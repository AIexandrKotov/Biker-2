{$apptype console}
{$product Biker 2}
{$company Kotov Projects}

{$copyright Alexandr Kotov}

//TODO FIXME ISSUE EDIT REMAKE UNDONE HACK

uses System;

const
  ///1) Изменить значения констаты версии
  ///2) Создать совместимость в v_compatibility, если это необходимо
  ///3) Копировать константу в установщик
  version: record Major, Minor, Build: integer; end = (Major: 0; Minor: 9; Build: 36);
  TEST = true;
  biker_name = 'Biker 2';
  questcount = 2;
  
{$region BASIC FUNCTIONS AND PROCEDURES}

///Разделяет целое число n типа uint64 на тысячные разряды
function dgt(n: uint64): string;
begin
  var k := n.ToString;
  var s := new StringBuilder;
  for var i:=1 to k.length do
  begin
    s+=k[i].ToString;
    if ((i-(k.Length mod 3)) mod 3 = 0) and (i<k.Length) then s+=' ';
  end;
  Result:=s.ToString;
end;

function dgt(n: integer): string;
begin
  var k := n.ToString;
  var s := new StringBuilder;
  for var i:=1 to k.length do
  begin
    s+=k[i].ToString;
    if ((i-(k.Length mod 3)) mod 3 = 0) and (i<k.Length) then s+=' ';
  end;
  Result:=s.ToString;
end;

///Преобразует n в consolecolor
function frominteger(n: integer): consolecolor := ConsoleColor(n);

///Случайный цвет консоли
function randomcolor: consolecolor := frominteger(PABCSystem.Random(16));

function ToColor(Self: integer): consolecolor; extensionmethod := frominteger(Self);

///Обнуляет до минимального значения n
procedure outnull(var n: integer) := n := integer.MinValue;

///Обнуляет строку s
procedure outnull(var s: string) := s := '';

///Обнуляет до минимального значения n и строку s
procedure outnull(var s: string; var n: integer);
begin
  outnull(n); outnull(s);
end;

///Обнуляет до минимального значения n и строку s
procedure outnull(var n: integer; var s: string) := outnull(s, n);

///Меняет значение f с true на false или обратно
procedure change(var f: boolean) := if f then f:=false else f:=true;

///Выводит с паузой t значения
procedure wrdelay(t: integer; params s: array of string);
begin
  for var i:=0 to s.Length-1 do
    for var j:=1 to s[i].Length do
    begin
      write((s[i])[j]);sleep(t);
    end;
end;

///Вычисляет дистанцию между двумя точками
function distance(x1,y1,x2,y2: real): real := sqrt(sqr(x2-x1)+sqr(y2-y1));

///Возвращает true если c входит в состав строки s
function havechar(Self: string; c: char): boolean; extensionmethod;
begin
  if Self.Length>0 then
    for var i:=1 to Self.length do
      if Self[i]=c then Result:=true;
end;

///Преобразует DayOfWeek к integer
function ToWeekDay(a: DayOfWeek): integer := Ord(a) + 1;

procedure spc(n: integer);
begin
  loop n do write(' ');
end;

procedure spc := spc(1);

function spcf(n: integer): string;
begin
  var s:=new StringBuilder;
  loop n do s+=' ';
  Result:=s.ToString;
end;

function spcf: string := spcf(1);

function Rome(a: integer): string;
begin
  case a of
    0: Result:='0';
    1: Result:='I';
    2: Result:='II';
    3: Result:='III';
    4: Result:='IV';
    5: Result:='V';
    6: Result:='VI';
    7: Result:='VII';
    8: Result:='VIII';
    9: Result:='IX';
    10..integer.MaxValue: Result:='X';
  end;
end;

function IntToBool(a: integer): boolean := a=1;

{$endregion BASIC FUNCTIONS AND PROCEDURES}

{$region TYPES}
type

  int8 = shortint;
  int16 = smallint;
  int32 = integer;
  int64 = int64;
  uint8 = byte;
  uint16 = word;
  uint32 = longword;
  uint64 = uint64;
  
  LOG = static class
    protected static Lines:=new List<string>;
    ///Добавляет строку в лог (и файл log.txt)
    public static procedure Add(params s: array of string);
    begin
      var ss:=s.JoinIntoString('');
      var T: DateTime = DateTime.Now;
      var HT: string;
      
      var logfile: TextFile;
      assign(logfile,'log.txt');
      
      HT:=string.Format('[{0} {1}:{2}:{3}:{4}] ',T.ToShortDateString,T.Hour.ToString.PadLeft(2,'0'),
      T.Minute.ToString.PadLeft(2,'0'),T.Second.ToString.PadLeft(2,'0'),T.Millisecond.ToString.PadLeft(3,'0'));
      Lines.Add(HT+ss);
      
      if Lines.Count=1 then rewrite(logfile,encoding.UTF8) else append(logfile,encoding.UTF8);
      writeln(logfile,Lines.Last);close(logfile);
    end;
    ///Сохраняет лог в файл filename
    ///Расширение тоже необходимо указать
    public static procedure Dump(filename: string);
    begin
      if Lines.Count>0 then WriteAllLines(filename,Lines.ToArray,Encoding.UTF8);
    end;
  end;
  
  ///Представляет тип цикла
  TLoop = record
    ///Максимальное игровое время, за которое пройдёт цикл
    maximum: integer;
    ///Максимальный уровень множителя игрового времени
    levelmax: integer;
    ///Минимальное игровое время, за которое пройдёт цикл
    minimum: integer;
    ///Множитель игрового времени
    k: integer;
    
    ///Минимальное реальное время, за которое пройдёт цикл
    addcurrent: integer;
    ///Множитель реального времени
    levelk: integer;
    ///Максимальное реальное время, за которое пройдёт цикл
    addcurrentmax: integer;
    ///Максимальный уровень множителя реального времени
    addcurrentlevelmax: integer;
    ///Пауза в милисекундах между итерациями добавления реального времени
    pause: integer;
    
    ///Затрата энергии на цикл
    energy: integer;    
  end;
  
  TItem = record
    tpsort: integer;//1 - frame, 2 - fork, 3 - bsusp, 4 - transmission, 5 - rudder, 6 - breaks, 7 - wheels, 8 - breakscard, 9 - camera, 10 - quest item, 11 - send, 12 - needle box
    name, cardname: string;//1..10
    questitem: integer;//10
    town: integer;//11
    timeStart, timeMax: DateTime;//11
    material: integer;//Only for 1
    suspensionflag: boolean;//1: Возможность установки заднего амортизатора, 2,3: Наличие аморта
    block: boolean;//2,3: Наличие блокировки
    suspension: integer;//2,3: Тип подвески
    travel: integer;//2,3: Ход подвески
    fores: boolean;//4: Наличие передних скоростей
    count: integer;//4: Кол-во задних скоростей
    sort: integer;//5: Тип руля, 6: Тип тормоза, 8: Тип колодки
    effection, maxeffection: integer;//6, 8: Эффективность тормоза (делится на это число шанс аварии)
    needles: integer;//Количество рабочих спиц
    camerahit: boolean;//True если камера проколота
    eight: boolean;//Исправлена ли восьмёрка. Одно исправление на одно колесо - +1000 прочности
    hitpoints, maxhitpoints: integer;//1..7: Эффективность тормоза (делится на это число шанс аварии)
    price: integer;
    veight: integer;//В граммах
  end;

  TBike = record
    name: string;
    odo: real;
    light: boolean;
    frame: record
      name: string;
      material: integer;
      suspensionflag: boolean;//Возможность установки заднего амортизатора
      hitpoints: integer;
      maxhitpoints: integer;
      price: integer;
      veight: integer;//В граммах
    end;
    fork: record
      name: string;
      suspensionflag: boolean;//Наличие амортизатора
      block: boolean;//Наличие блокировки
      blocks: boolean;//Заблокирован ли
      suspension: integer;//Тип подвески
      travel: integer;//Ход подвески
      hitpoints: integer;
      maxhitpoints: integer;
      price: integer;
      veight: integer;//В граммах
    end;
    bsusp: record
      flag: boolean;//Наличие амортизатора
      name: string;
      block: boolean;//Наличие блокировки
      blocks: boolean;//Заблокирован ли
      suspension: integer;//Тип подвески
      travel: integer;//Ход подвески
      hitpoints: integer;
      maxhitpoints: integer;
      price: integer;
      veight: integer;//В граммах
    end;
    transmission: record
      name: string;
      fores: boolean;//Наличие передних скоростей
      count: integer;//Кол-во задних скоростей
      hitpoints: integer;
      maxhitpoints: integer;
      price: integer;
      veight: integer;//В граммах
    end;
    rudder: record
      name: string;
      sort: integer;//Тип руля
      hitpoints: integer;
      maxhitpoints: integer;
      price: integer;
      veight: integer;//В граммах
    end;
    backbreak: record
      flag: boolean;//Наличие тормоза
      name: string;
      cardname: string;
      sort: integer;//Тип тормоза
      effection, maxeffection: integer;//Состояние колодок
      hitpoints: integer;
      maxhitpoints: integer;
      price: integer;
      veight: integer;//В граммах
    end;
    frontbreak: record
      flag: boolean;//Наличие тормоза
      name: string;
      cardname: string;
      sort: integer;//Тип тормоза
      effection, maxeffection: integer;//Состояние колодок
      hitpoints: integer;
      maxhitpoints: integer;
      price: integer;
      veight: integer;//В граммах
    end;
    backwheel: record
      name: string;
      pressure: real;//Давление в покрышках
      needles: integer;//Количество рабочих спиц
      hitpoints: integer;
      maxhitpoints: integer;
      camerahit: boolean;//True если камера проколота
      eight: boolean;//Исправлена ли восьмёрка. Одно исправление на одно колесо - +1000 прочности
      price: integer;
      veight: integer;//В граммах
    end;
    frontwheel: record
      name: string;
      pressure: real;//Давление в покрышках
      needles: integer;//Количество рабочих спиц
      hitpoints: integer;
      maxhitpoints: integer;
      camerahit: boolean;//True если камера проколота
      eight: boolean;//Исправлена ли восьмёрка. Одно исправление на одно колесо - +1000 прочности
      price: integer;
      veight: integer;//В граммах
    end;
  end;
  
  TApart = record
    apartment: boolean;
    price: integer;
    itemcount, bikecount: integer;
    items: array of TItem;
    //bikes: array of TBike;
  end;
    
  TMap = record
    name: string;
    sort: integer;
    x,y: real;
    road: array of record
      id: integer;
      tp: string;
    end;
    apartment: TApart;
    kprice: real;
  end;
  
  KTX = static class
    public const subgraph_a: string = '█▓▒░';
    public const subgraph_b: string = '▄▌▐▀';
    public const subgraph_c: string = '│┤╡╢╣║╠╟╞├│';
    public const subgraph_d: string = '─┴┬╨╥═╩╦╧╤';
    public const subgraph_e: string = '╖╕╗╝╜╛┐└┼╚╔╬╙╘╒╓╫╪┘┌';
    public const modname: string = 'KTX Console Manager';
    public const version: string = '1.2';
    public const minimumx: integer = 100;
    public const minimumy: integer = 30;
    public static maxx: integer;
    public static maxy: integer;
    public static procedure Init;
    begin
      maxx:=minimumx;
      maxy:=minimumy;
      Console.BackgroundColor := consolecolor.White;
      Console.ForegroundColor := consolecolor.Black;
      Console.Clear;
      Console.SetWindowSize(1, 1);
      Console.SetBufferSize(maxx, maxy);
      Console.SetWindowSize(maxx, maxy);
      Console.CursorVisible:=false;
      Console.Title:=biker_name;
      //Console.OpenStandardInput(0);
    end;
    public static procedure resize;
    begin
      while (Console.LargestWindowWidth<minimumx) or (Console.LargestWindowHeight<minimumy) do
      begin
        Console.Clear;
        Console.ForegroundColor:=consolecolor.Red;
        write('WINDOW SIZE TOO SMALL');
        sleep(100);
        Console.ForegroundColor:=consolecolor.Black;
      end;
      
      if not ((maxx<=Console.LargestWindowWidth) and (maxy<=Console.LargestWindowHeight)) then
      begin
        maxx:=Console.LargestWindowWidth;
        maxy:=Console.LargestWindowHeight;
      end;
      Console.Clear;
      if (console.WindowHeight>maxy) or (console.WindowWidth>maxx) then Console.SetWindowSize(1,1);
      Console.SetBufferSize(maxx,maxy);
      Console.SetWindowSize(maxx,maxy);
    end;
    public static procedure A_kotov;
    begin
      var subx, suby: integer;
      subx:=trunc(maxx/2)-15;//при 100 - 35
      suby:=trunc(maxy/2)-8;//при 30 - 7
      for var i := 1 to 7 do
      begin
        Console.SetCursorPosition(subx, (suby-1) + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition(subx + i, (suby + 2));
        write(subgraph_a[1]);
      end;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition((subx+2) + i, (suby+2) + i);
        write(subgraph_a[1]);
        Console.SetCursorPosition((subx+2) + i, (suby+2) - i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition((subx+4), (suby+4) + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 5 do
      begin
        Console.SetCursorPosition((subx+6), suby + i);
        write(subgraph_a[1]);
        Console.SetCursorPosition((subx+10), suby + i);
        write(subgraph_a[1]);
        if i <= 3 then
        begin
          Console.SetCursorPosition((subx+6) + i, suby);
          write(subgraph_a[1]);
          Console.SetCursorPosition((subx+6) + i, suby+6);
          write(subgraph_a[1]);
        end;
      end;
      for var i := 1 to 7 do
      begin
        Console.SetCursorPosition(subx+14, (suby-1) + i);
        write(subgraph_a[1]);
        if i <= 5 then
        begin
          Console.SetCursorPosition((subx+11) + i, suby);
          write(subgraph_a[1]);
        end;
      end;
      for var i := 1 to 5 do
      begin
        Console.SetCursorPosition(subx+18, suby + i);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+22, suby + i);
        write(subgraph_a[1]);
        if i <= 3 then
        begin
          Console.SetCursorPosition(subx + 18 + i, suby);
          write(subgraph_a[1]);
          Console.SetCursorPosition(subx + 18 + i, suby+6);
          write(subgraph_a[1]);
        end;
      end;
      for var i := 1 to 4 do
      begin
        Console.SetCursorPosition(subx+24, suby - 1 + i);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+28, suby - 1 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition(subx+25, suby + 3 + i);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+27, suby + 3 + i);
        write(subgraph_a[1]);
      end;
      Console.SetCursorPosition(subx+26, suby+6);
      write(subgraph_a[1]);
    end;
    public static procedure A_projects(c: consolecolor);
    begin
      var subx: integer = trunc(maxx/2)-23;//при 100 - 27
      var suby: integer = trunc(maxy/2)+1;//при 100 - 15
      console.ForegroundColor := c;
      for var i := 1 to 6 do
      begin
        Console.SetCursorPosition(subx, suby+1 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 3 do
      begin
        Console.SetCursorPosition(subx + i, suby+5);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition(subx+4, suby+2 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition(subx+1 + i, suby+2);
        write(subgraph_a[1]);
      end;
      Console.SetCursorPosition(subx+1, suby+3);
      write(subgraph_a[1]);
      for var i := 1 to 5 do
      begin
        Console.SetCursorPosition(subx+6, suby+1 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition(subx+9 - i, suby+1 + i);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+8 + i, suby+1 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 3 do
      begin
        Console.SetCursorPosition(subx+12 + i, suby+2);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+12, suby+2 + i);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+12 + i, suby+6);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+16, suby+2 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 7 do
      begin
        if i<>2 then
        begin
          Console.SetCursorPosition(subx+22, suby-1 + i);
          write(subgraph_a[1]);
        end;
      end;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition(subx+18, suby+4 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 3 do
      begin
        Console.SetCursorPosition(subx+18 + i, suby+7);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 3 do
      begin
        Console.SetCursorPosition(subx+24 + i, suby+2);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+24, suby+2 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 4 do
      begin
        Console.SetCursorPosition(subx+24 + i, suby+4);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+24 + i, suby+6);
        write(subgraph_a[1]);
      end;
      Console.SetCursorPosition(subx+28, suby+3);
      write(subgraph_a[1]);
      for var i := 1 to 3 do
      begin
        Console.SetCursorPosition(subx+30 + i, suby+2);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+30 + i, suby+6);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+30, suby+2 + i);
        write(subgraph_a[1]);
      end;
      Console.SetCursorPosition(subx+34, suby+3);
      write(subgraph_a[1]);
      Console.SetCursorPosition(subx+34, suby+5);
      write(subgraph_a[1]);
      for var i := 1 to 6 do
      begin
        Console.SetCursorPosition(subx+37, suby-1 + i);
        write(subgraph_a[1]);
        if i<=3 then
        begin
          Console.SetCursorPosition(subx+35 + i, suby+1);
          write(subgraph_a[1]);
        end;
      end;
      Console.SetCursorPosition(subx+38, suby+6);
      write(subgraph_a[1]);
      for var i := 1 to 4 do
      begin
        Console.SetCursorPosition(subx+40 + i, suby+2);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+39 + i, suby+6);
        write(subgraph_a[1]);
        if i<=3 then
        begin
          Console.SetCursorPosition(subx+40 + i, suby+4);
          write(subgraph_a[1]);
        end;
      end;
      Console.SetCursorPosition(subx+40, suby+3);
      write(subgraph_a[1]);
      Console.SetCursorPosition(subx+44, suby+5);
      write(subgraph_a[1]);
      console.ForegroundColor := consolecolor.Black;
    end;
    public static procedure A_biker(c1, c2: consolecolor);
    begin
      var subx: integer = Trunc(maxx/2)-15;//При 100 - 35
      var suby: integer = Trunc(maxy/2)-4;//При 30 - 10 (11, но считаем от 10)
      Console.ForegroundColor:=c1;
      for var i := 1 to 7 do
      begin
        Console.SetCursorPosition(subx, suby-1 + i);
        write(subgraph_a[1]);
        if (i<>1) and (i<>3) and (i<>7) then
        begin
          Console.SetCursorPosition(subx+4, suby-1 + i);
          write(subgraph_a[1]);
        end;
      end;
      for var i := 1 to 3 do
      begin
        Console.SetCursorPosition(subx + i, suby);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx + i, suby+2);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx + i, suby+6);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 7 do
      if i<>2 then
      begin
        Console.SetCursorPosition(subx+6, suby-1+i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 7 do
      begin
        Console.SetCursorPosition(subx+8, suby-1+i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 3 do
      begin
        Console.SetCursorPosition(subx+8 + i, suby+3+i);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+8 + i, suby+5-i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 3 do
      begin
        Console.SetCursorPosition(subx+13 + i, suby+2);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+13, suby+2 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 4 do
      begin
        Console.SetCursorPosition(subx+13 + i, suby+4);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+13 + i, suby+6);
        write(subgraph_a[1]);
      end;
      Console.SetCursorPosition(subx+17, suby+3);
      write(subgraph_a[1]);
      for var i := 1 to 5 do
      begin
        Console.SetCursorPosition(subx+19, suby+1 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition(subx+22 - i, suby+1 + i);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+21 + i, suby+1 + i);
        write(subgraph_a[1]);
      end;
      Console.ForegroundColor:=c2;
      Console.SetCursorPosition(subx+25, suby+1);
      write(subgraph_a[1]);
      for var i := 1 to 3 do
      begin
        Console.SetCursorPosition(subx+25 + i, suby);
        write(subgraph_a[1]);
      end;;
      for var i := 1 to 2 do
      begin
        Console.SetCursorPosition(subx+29, suby+3 - i);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+29 - i, suby+3);
        write(subgraph_a[1]);
        Console.SetCursorPosition(subx+27 - i, suby+3 + i);
        write(subgraph_a[1]);
      end;
      for var i := 1 to 5 do
      begin
        Console.SetCursorPosition(subx+24 + i, suby+6);
        write(subgraph_a[1]);
      end;;
      Console.ForegroundColor:=Consolecolor.Black;
    end;
    public static procedure B1;
    begin
      resize;
      sleep(250);
      A_kotov;
      sleep(250);
      A_projects(consolecolor.Black);
      sleep(200);A_projects(consolecolor.Red);
      sleep(200);A_projects(consolecolor.Cyan);
      sleep(200);A_projects(consolecolor.Green);
      sleep(200);A_projects(consolecolor.Yellow);
      sleep(200);A_projects(consolecolor.Magenta);
      sleep(250);A_projects(consolecolor.Blue);
      var t: DateTime = DateTime.Now;
      var s: DateTime = DateTime.Now;
      while abs(t.Ticks-s.Ticks)<20000000 do
      begin
        s:=DateTime.Now;
        Console.Clear;
        a_Kotov;
        a_projects(consolecolor.Blue);
      end;Console.Clear;
      a_biker(ConsoleColor.Black,ConsoleColor.Blue);sleep(1000);
    end;
    public static procedure read_1;
    begin
      //Console.KeyAvailable:=true;
      Console.CursorVisible:=true;
    end;
    public static procedure read_0;
    begin
      //Console.KeyAvailable:=false;
      Console.CursorVisible:=false;
    end;
    public static procedure subwindows(x1,y1,dx,dy: integer; name: string);
    begin
      var sname: string = name+' ';
      Console.SetCursorPosition(x1,y1);write('┌');
      write('─');spc;
      
      if sname.Length-4<=dx then
      begin
        write(sname);
        loop dx-(4+sname.Length) do write('─');
      end
      else write(sname.Left(dx-4));
      
      write('─');write('┐');
      for var i:=1 to dy-1 do
      begin
        Console.SetCursorPosition(x1,y1+i);write('│');
        Console.SetCursorPosition(x1+dx,y1+i);write('│');
      end;
      
      Console.SetCursorPosition(x1,y1+dy);
      write('└');
      loop dx-1 do write('─');
      write('┘');
    end;
  end;

  TLoad = class
    Constructor Create;
    begin
      KTX.Init;
      var t: string = $'{Version.Major}.{Version.Minor}.{Version.Build}';
      Console.SetCursorPosition(KTX.minimumx-t.length-1,KTX.minimumy-1);
      write(t);
    end;
  end;
  
  TQuest = record
    {started: boolean;
    starttown: integer;
    finishtown: integer;
    minimumlevel: integer;
    startid: integer;
    finishid: array of integer;
    prequest: array of integer;
    iffinish: function: boolean;
    finished: boolean;
    finishitem: boolean;
    finishitems: array of TItem;
    awarditem: boolean;
    awarditmes: array of TItem;
    stage: integer;
    stages: array of record
      id: integer;
      st: array of string;
      variants: array of record
        name: string;
        getid: integer;
      end;
    end;}
    name: string;
    stage: integer;
    stagesname: array of record
      id: integer;
      purpose: string;
    end;
  end;

  TFrame = record
    maxlvl: integer;
    lvl: integer;
    
    name: string;
    material: integer;
    susp: boolean;
    price: integer;
    veight: integer;
    public constructor;
    begin
      lvl:=0;
      maxlvl:=0;
      material:=0;
      name:=string.Empty;
      price:=0;
      susp:=False;
      veight:=0;
    end;
  end;
  
  TFork = record
    maxlvl: integer;
    lvl: integer;
    
    name: string;
    susp: boolean;
    sort: integer;
    travel: integer;
    block: boolean;
    
    price: integer;
    veight: integer;
    public constructor;
    begin
      lvl:=0;
      maxlvl:=0;
      veight:=0;
      price:=0;
      name:=string.Empty;
      
      block:=False;
      sort:=0;
      travel:=0;
      susp:=False;
    end;
  end;
  
  TBack = record
    maxlvl: integer;
    lvl: integer;
    
    name: string;
    sort: integer;
    travel: integer;
    block: boolean;
    
    price: integer;
    veight: integer;
    public constructor;
    begin
      lvl:=0;
      maxlvl:=0;
      veight:=0;
      price:=0;
      name:=string.Empty;
      
      block:=False;
      sort:=0;
      travel:=0;
    end;
  end;
  
  TTrans = record
    maxlvl: integer;
    lvl: integer;
    
    name: string;
    count: integer;
    fores: boolean;
    
    price: integer;
    veight: integer;
    public constructor;
    begin
      lvl:=0;
      maxlvl:=0;
      veight:=0;
      price:=0;
      name:=string.Empty;
      
      count:=1;
      fores:=False;
    end;
  end;

  TRudder = record
    maxlvl: integer;
    lvl: integer;
    
    name: string;
    sort: integer;
    
    price: integer;
    veight: integer;
    
    public constructor;
    begin
      lvl:=0;
      maxlvl:=0;
      veight:=0;
      price:=0;
      name:=string.Empty;
      
      sort:=0;
    end;
  end;
  
  TBrake = record
    maxlvl: integer;
    lvl: integer;
    
    name: string;
    sort: integer;
    
    price: integer;
    veight: integer;
    
    public constructor;
    begin
      lvl:=0;
      maxlvl:=0;
      veight:=0;
      price:=0;
      name:=string.Empty;
      
      sort:=0;
    end;
  end;
  
  TWheel = record
    maxlvl: integer;
    lvl: integer;
    
    name: string;
    maxhp: integer;
    
    price: integer;
    veight: integer;
    
    public constructor;
    begin
      lvl:=0;
      maxlvl:=0;
      veight:=0;
      price:=0;
      name:=string.Empty;
      
      maxhp:=1;
    end;
  end;
  
  TCard = record
    maxlvl: integer;
    lvl: integer;
    
    name: string;
    sort: integer;
    maxeff: integer;
    
    price: integer;
    veight: integer;
    
    public constructor;
    begin
      lvl:=0;
      maxlvl:=0;
      veight:=0;
      price:=0;
      name:=string.Empty;
      
      maxeff:=1;
      sort:=1;
    end;
  end;
  
  Qst = class
    input: string;
    output: integer;
    status: boolean;
    first: boolean;
    Constructor Create;
    begin
      output:=integer.MinValue;
      status:=true;
      first:=true;
    end;
    procedure OutNil;
    begin
      input:='';
      output:=integer.MinValue;
    end;
  end;

  TWord = record
    name: string;
    lastid: integer;
  end;

  THp = record
    average, minimal, maximum: real;
  end;

  SleepType =(
    Apart,
    Tent,
    Hotel,
    Street
  );
  
  TSend = record
    veight: integer;
    minprice: integer;
    maxprice: integer;
    days: integer;
    Constructor Create(v, min, max: integer; d: integer);
    begin
      veight:=v;
      minprice:=min;
      maxprice:=max;
      days:=d;
    end;
  end;

  TBalance = record
    maxtutorial, int_minx, int_miny, int_maxx, int_maxy, minnicksize, maxnicksize, minspeedong, minspeedonb,
    animminspeed, animmaxspeed, animKFspeed, animKFseconds, nighthourstart, nighthourfinish, criticalhp,
    cameraveight, needleveight, apartmentprice0, apartmentprice1, apartmentprice2, maxwritespd, minwritespd, distancebetweenroadbonuses: integer;
        
    wateronmeter, foodonmeter, night0, night1, minimaleff, subaverage, foodprice, waterprice, mv_minsc, mv_maxsc, mvminstep, mvmaxstep: real;
    
    MonthsKSpeed: record
      _1January, _2Febraury, _3March, _4April, _5May, _6June, _7July, _8August, _9September, _10October, _11November, _12December: real;
    end;
    
    SpeedAndVeight: record
      BikeVeight: record
        minimalk, maximumk: real;
        minimum, maximum: integer;
      end;
      ItemVeight: record
        minimalk, maximumk: real;
        minimum, maximum: real;
      end;
    end;
    
    IFace: record
      framematerial: record
        Steel, SteelPlus, Alu6061, Alu7075, Titan: ConsoleColor;
      end;
      susptype: record
        Steel, Elastomer, Pneumatic, Oil, OilPlus, PneumaticPlus: ConsoleColor;
      end;
      susptravel: record
        _0, _1, _2, _3: record
          min, max: integer;
          indicate: ConsoleColor;
        end;
      end;
      backcount: record
        _1, _6, _7, _8, _9, _10, _11: ConsoleColor;
      end;
      forecount: record
        _1, _3: ConsoleColor;
      end;
      ruddertype: record
        _0, _1, _2: ConsoleColor;
      end;
      braketype: record
        _1, _2, _3: ConsoleColor;
      end;
      wheelhits: record
        _1, _2, _3: record
          min, max: integer;
          indicate: Consolecolor;
        end;
      end;
      cardhits: record
        _0, _1, _2, _3: record
          min, max: integer;
          indicate: Consolecolor;
        end;
      end;
    end;
    
    Sleep: record
      minimal, pcentathour, pcahadd: real;
      pcahmaxlvl: integer;
      HotelPricemin: array of integer;
      HotelPriceadd: array of integer;
      HotelPricelvlmax: array of integer;
      ///+/- хп от сна в зависимости от типа сна
      HealthPlus: array[SleepType] of real;
      eff_Hotel, eff_Apart, eff_Tent, eff_Street: real;
      _90100, _7590, _5075, _2550, _025: record
        min, max: real;
        color: ConsoleColor;
      end;
    end;
    
    Sell: record
      Oldermin: real;
      Olderadd: real;
      Oldermaxlvl: integer;
    end;
    
    Send: record
      Sends: array of TSend;
      
      minrespect: integer;
      maxrespect: integer;
      mink: real;
      maxlvlk: integer;
      kadd: real;
    end;
    
    CameraPrice: record
      min: integer;
      add: integer;
      maxlvl: integer;
      maxcount: integer;
    end;
    
    NeedlePrice: record
      min: integer;
      add: integer;
      maxlvl: integer;
      maxcount: integer;
    end;
    
    Crash: record
      minimumdechp: integer;
      dechpmaxlvl: integer;
      dechpadd: integer;
    end;
    
    Wait: record
      energyatminute: real;
      maxminutes: integer;
    end;
    
    MinLevel: record
      BackSusps: integer;
    end;
    
    NEWGAME: record
      maxveight, maxwater, maxfood, maxenergy, maxhealth, respect: integer;
      startdate: int64;
    end;
    
    levelup: record
      plusmveight, plusmwater, plusmfood, plusmenergy, expmin, expk, expmaxlevel: integer;
    end;
    
    shopmaxlevels: record
      type0, type1, type2: integer;
    end;
    
    BreakCardEffection: record
      VBrake, DiskMechanic, DiskHydravlic: record
        minimal, lvladd, maxlvl: integer;
      end;
    end;
    
    economic: record
      town0, town1, town2: record
        max, min: real;
      end;
      infochance, infoprice, infok: real;
      infomaxlevel: integer;
    end;
    
    timing:{$region} record
      bsusp_demontage, break_demontage, camering, needling, pumping, it_framing, it_forking, it_bsusping,
      it_transing, it_ruddering, it_breaking, it_wheeling, it_breakcarding, it_sending, it_replacing, ap_buy, ap_sell: TLoop;
    end;{$endregion}
    
    status:{$region} record
      _verybad: record
        min: real;
        max: integer;
        color: ConsoleColor;
      end;
      _bad: record
        min: integer;
        max: real;
        color: ConsoleColor;
      end;
      _normal, _good, _verygood: record
        min, max: real;
        color: ConsoleColor;
      end;
    end;{$endregion}
    ///Велик
    bk: {$region}record
      ///Рама
      mincostG, mincostB: real;
      frame: {$region}record
        material: {$region }record
          steel, steelplus, alu6061, alu7075, titan: record
            minlevel, hitpoints: integer;
            roadg, roadb: real;
          end;
        end;{$endregion}
        hp: THp;
      end;{$endregion}
      fork: {$region }record
        suspension: {$region }record
          steel, steelplus, pneumatic, pneumaticplus, oil, oilplus: record
            minlevel, hitpoints: integer;
            roadg, roadb: real;
          end;
          flag0, flag1: record
            minlevel: integer;
            roadg, roadb: real;
          end;
        end;{$endregion}
        hp: THp;
        susptravel1, susptravel2, susptravel3: record
          min, max: integer;
          value: real;
        end;
        block: record
          minlevel: integer;
          roadg, roadb: real;
        end;
      end;{$endregion}
      bsusp: {$region}record
        suspension: {$region }record
          steel, steelplus, pneumatic, pneumaticplus, oil: record
            minlevel, hitpoints: integer;
            roadg, roadb: real;
          end;
          flag0, flag1: record
            minlevel: integer;
            roadg, roadb: real;
          end;
        end;{$endregion}
        block: record
          minlevel: integer;
          roadg, roadb: real;
        end;
        susptravel1, susptravel2, susptravel3: record
          min, max: integer;
          value: real;
        end;
        hp: THp;
      end;{$endregion}
      transmission: {$region}record
        backs0, backs1, fores0, fores1: record
          minlevel: integer;
          roadG, roadB: real;
        end;
        count6, count7, count8, count9, count10, count11: record
          minlevel, speedG, speedB, hitpoints: integer;
        end;
        hp: THp;
      end;{$endregion}
      rudder: {$region }record
        sort1, sort2, sort3: record
          minlevel, speedg, speedb, hitpoints: integer;
        end;
        hp: THp;
      end;{$endregion}
      backbreak, frontbreak: {$region}record
        none: record
          crashchance: real;
        end;
        vbrake, dm, dh: record
          crashchance: real;
          hitpoints: integer;
        end;
        hp: record
          average, crahsminimum, crahsmaximum: real;
        end;
      end;{$endregion}
      wheel: {$region}record
        hitpoints: integer;
        pressure: record
          average, minimum, maximum, minimumG, minimumB, maximumG, maximumB, permeter: real;
        end;
        hp: record
          average, minimumchance, maximumchance, chance: real;
        end;
        needle: record
          minimum, average, maximum: integer;
          minimumchance, chancek, maximumchance: real;
        end;
      end;{$endregion}
      allbreak: record
        crashchancemax, crashchancemin, crashchance1, minimal: real;
        _1maxeff, _2maxeff, _3maxeff: integer;
      end;
    end;{$endregion}
  end;

  TBlock = record
    input: string;
    output: integer;
    status: boolean;
  end;

  TAlarm = record
    Date: int64;
    Status: boolean;
  end;
  
  TSell = record
    id: integer;
    item: TItem;
  end;
  
  ItemGen = static class
    public const k = 1000;
  
    public const FrameSteal = 0;
    public const FrameStealPlus = 1;
    public const FrameAlu6061 = 2;
    public const FrameAlu7075 = 3;
    public const FrameTitan = 4;
    
    public const ForkSteal = 0;
    public const ForkElastomer = 1;
    public const ForkPneumatic = 2;
    public const ForkOil = 3;
    public const ForkOilPlus = 4;
    public const ForkPneumaticPlus = 5;
    
    public const BacksuspSteal = 0;
    public const BacksuspElastomer = 1;
    public const BacksuspPneumatic = 2;
    public const BacksuspOil = 3;
    public const BacksuspPneumaticPlus = 4;
    
    public const RoadRudder = 0;
    public const StrongRudder = 1;
    public const AsphaltRudder = 2;
    
    public const VBrake = 1;
    public const DiskM = 2;
    public const DiskH = 3;
    
    public static function Frame(name: string; material: integer; suspflag: boolean; hits, mhits, price, veight: integer): TItem;
    begin
      Result.tpsort:=1;
      Result.name:=name;
      Result.material:=material;
      Result.suspensionflag:=suspflag;
      
      Result.maxhitpoints:=mhits;
      Result.hitpoints:=hits;
      
      Result.price:=price;
      Result.veight:=veight;
    end;
    
    public static function Fork(name: string; suspflag, block: boolean; susp, travel: integer; hits, mhits, price, veight: integer): TItem;
    begin
      Result.tpsort:=2;
      Result.name:=name;
      Result.suspensionflag:=suspflag;
      Result.suspension:=susp;
      Result.block:=block;
      Result.travel:=travel;
      
      Result.maxhitpoints:=mhits;
      Result.hitpoints:=hits;
      
      Result.price:=price;
      Result.veight:=veight;
    end;
    
    public static function BackSuspension(name: string; block: boolean; susp, travel: integer; hits, mhits, price, veight: integer): TItem;
    begin
      Result.tpsort:=3;
      Result.name:=name;
      Result.suspension:=susp;
      Result.block:=block;
      Result.travel:=travel;
      
      Result.maxhitpoints:=mhits;
      Result.hitpoints:=hits;
      
      Result.price:=price;
      Result.veight:=veight;
    end;
    
    public static function Transmission(name: string; count: integer; fores: boolean; hits, mhits, price, veight: integer): TItem;
    begin
      Result.tpsort:=4;
      Result.name:=name;
      Result.count:=count;
      Result.fores:=fores;
      
      Result.maxhitpoints:=mhits;
      Result.hitpoints:=hits;
      
      Result.price:=price;
      Result.veight:=veight;
    end;
    
    public static function Rudder(name: string; sort: integer; hits, mhits, price, veight: integer): TItem;
    begin
      Result.tpsort:=5;
      Result.name:=name;
      Result.sort:=sort;
      
      Result.maxhitpoints:=mhits;
      Result.hitpoints:=hits;
      
      Result.price:=price;
      Result.veight:=veight;
    end;
    
    public static function Brake(name: string; sort: integer; eff, meff, hits, mhits, price, veight: integer): TItem;
    begin
      Result.tpsort:=6;
      Result.name:=name;
      Result.sort:=sort;
      
      Result.maxhitpoints:=mhits;
      Result.hitpoints:=hits;
      
      Result.maxeffection:=meff;
      Result.effection:=eff;
      
      Result.price:=price;
      Result.veight:=veight;
    end;
    
    public static function Wheel(name: string; needles: integer; ch, eight: boolean; hits, mhits, price, veight: integer): TItem;
    begin
      Result.tpsort:=7;
      Result.name:=name;
      Result.needles:=needles;
      Result.camerahit:=ch;
      Result.eight:=eight;
      
      Result.maxhitpoints:=mhits;
      Result.hitpoints:=hits;
      
      Result.price:=price;
      Result.veight:=veight;
    end;
  end;

  QuestAwardItem = static class
    ///Рама "Объект 254"
    public static Object254:=ItemGen.Frame('Object 254',ItemGen.FrameTitan,true,ItemGen.k*25000,ItemGen.k*25000,500000,2200);
    public static TestSuperFork:=ItemGen.Fork('Object 277',true,true,ItemGen.ForkOilPlus,750,ItemGen.k*1000,ItemGen.k*1000,100000,1000);
  end;
  
{$endregion TYPES}

{$region VARIABLES}
var

  BALANCE: TBalance;
  
  soundavailable: boolean;
  SOUND: System.Media.SoundPlayer = new System.Media.SoundPlayer;
  
  lowloader:=new TLoad;
  
  A_B1: boolean = true;
  
  LOG_autosave: boolean = false;

  mapname: string;
  mapversion: string;
  mapupdate: string;
  types: array of string;
  map: array of TMap;
  
  VersionInfo: record
    Versions: array of record
      Name: string;
      Description: array of string;
    end;
  end;
  
  svg: record
    sound: boolean = true;
    available: boolean;
    version: string;
    date: DateTime;
    autosave: boolean;//false - off, true - on
    time_type: integer;
    levelvisible: boolean;
    animspeed: integer = 1;
    wrspeed: integer;//длина паузы при печати символов
    CRSP: string;
  end;
  
  mapviewer: record
    minscalable: real = 2.5;
    maxscalable: real = 5;
    stepscalable: real = 0.5;
  end;
  
  SubQuest: boolean;
  
  quests: array of TQuest;
  
  inter: array of record
    face: array of string;
  end;
  
  helps: array of record
    value: array of string;
  end;
  
  bikes: array of record
    value: array of string;
  end;
  
  items: array of record
    value: array of string;
  end;
  
  interquest: array of record
    value: array of string;
  end;
  
  help_available: boolean;
  
  month: array of string;
  
  shop: record
    olds: boolean;
    frames: array of TFrame;
    forks: array of TFork;
    backs: array of TBack;
    trans: array of TTrans;
    rudders: array of TRudder;
    brakes: array of TBrake;
    wheels: array of TWheel;
    cards: array of TCard;
    input: string;
    output: integer;
    status: boolean;
    water, food: record
      input: string;
      output: integer;
      status: boolean;
      onprice, onsize: TBlock;
    end;
    details: record
      input: string;
      output: integer;
      status: boolean;
      frames: record
        input: string;
        output: integer;
        status: boolean;
        filter: record
          onminprice, onmaxprice, onmaterial, onminveight, onmaxveight, onsuspension: boolean;
          minprice, maxprice: integer;
          material: integer;
          minveight, maxveight: integer;
          suspension: boolean;
        end;
        fs_minprice, fs_maxprice, fs_veight, fs_suspension, fs_material, fs_minveight, fs_maxveight: TBlock;
        buy: record
          input: string;
          output: integer;
          status: boolean;
          check: TBlock;
        end;
      end;
      forks: record
        input: string;
        output: integer;
        status: boolean;
        onminprice, onmaxprice, onmaterial, onminveight, onmaxveight, onsuspension, onsort, onmintravel, onmaxtravel, onblock: boolean;
        minprice, maxprice, minveight, maxveight, sort, mintravel, maxtravel: integer;
        suspension, block: boolean;
        fset: TBlock;
        buy: record
          input: string;
          output: integer;
          status: boolean;
          check: TBlock;
        end;
      end;
      backs: record
        input: string;
        output: integer;
        status: boolean;
        onminprice, onmaxprice, onmaterial, onminveight, onmaxveight, onsort, onmintravel, onmaxtravel, onblock: boolean;
        minprice, maxprice, minveight, maxveight, sort, mintravel, maxtravel: integer;
        block: boolean;
        fset: TBlock;
        buy: record
          input: string;
          output: integer;
          status: boolean;
          check: TBlock;
        end;
      end;
      transmissions: record
        input: string;
        output: integer;
        status: boolean;
        onminprice, onmaxprice, onminveight, onmaxveight, oncount, onfore: boolean;
        minprice, maxprice, minveight, maxveight, count: integer;
        fore: boolean;
        fset: TBlock;
        buy: record
          input: string;
          output: integer;
          status: boolean;
          check: TBlock;
        end;
      end;
      rudders: record
        input: string;
        output: integer;
        status: boolean;
        onminprice, onmaxprice, onminveight, onmaxveight, onsort: boolean;
        minprice, maxprice, minveight, maxveight, sort: integer;
        fset: TBlock;
        buy: record
          input: string;
          output: integer;
          status: boolean;
          check: TBlock;
        end;
      end;
      brakes: record
        input: string;
        output: integer;
        status: boolean;
        onminprice, onmaxprice, onminveight, onmaxveight, onsort: boolean;
        minprice, maxprice, minveight, maxveight, sort: integer;
        fset: TBlock;
        buy: record
          input: string;
          output: integer;
          status: boolean;
          check: TBlock;
        end;
      end;
      wheels: record
        input: string;
        output: integer;
        status: boolean;
        onminprice, onmaxprice, onminveight, onmaxveight, onminhp, onmaxhp: boolean;
        minprice, maxprice, minveight, maxveight, minhp, maxhp: integer;
        fset: TBlock;
        buy: record
          input: string;
          output: integer;
          status: boolean;
          check: TBlock;
        end;
      end;
      cards: record
        input: string;
        output: integer;
        status: boolean;
        onminprice, onmaxprice, onminveight, onmaxveight, onsort, onmineff, onmaxeff: boolean;
        minprice, maxprice, minveight, maxveight, sort, mineff, maxeff: integer;
        fset: TBlock;
        buy: record
          input: string;
          output: integer;
          status: boolean;
          check: TBlock;
        end;
      end;
    end;
  end;
  
  player: record
    time: DateTime;
    nickname: string;
    respect: integer;
    position, level, energy, food, water, health, maxenergy, maxfood, maxwater, maxveight, maxhealth: integer;
    money: uint64;
    luck: real;
    itemcount: integer;
    items: array of TItem;
    bike: TBike;
    sending: boolean;
    experience: integer;
    tent: boolean;
  end;
  
  Alarm: TAlarm;
  
  economic: record
    last: integer;
  end;
  
  menu: TBlock;
  
  help: record
    status: boolean;
    input: string;
    output: integer;
    help: TBlock;
  end;
  
  settings: record
    status: boolean;
    input: string;
    output: integer;
    resolution: TBlock;
  end;
  
  game: record
    status: boolean;
    input: string;
    output: integer;
    road: record
      arr: array of record
        id: integer;
        tp: char;//g or b
        energy,water,food,block: boolean;//True если энергии до этого города не хватит
      end;
      roader: record
        currentwater, currentfood, currentenergy: integer;
        starttime, currenttime: DateTime;
        currentspeed, currentdist, maxspeed, maxdist, odometer: real;
      end;
      crash: record
        lst: record
          framehp, forkhp, bsusphp, rudderhp, transhp, bbreak, fbreak, fwheel, bwheel, bbeff, fbeff, foodleft, waterleft, fneedles, bneedles: integer;
          first: boolean;
        end;
        status: boolean;
        input: string;
        output: integer;
      end;
      status: boolean;
      input: string;
      output: integer;
    end;
    bike: record
      frame, fork, transmission, rudder, backbreak, frontbreak, odometer: TBlock;
      backwheel, frontwheel: record
        status: boolean;
        input: string;
        output: integer;
        pressure: record
          status: boolean;
          input: string;
          output: integer;
          press: real;
        end;
      end;
      status: boolean;
      input: string;
      output: integer;
    end;
    item: record
      status: boolean;
      input: string;
      output: integer;
      arrcount: integer;
      arr: array of record
        id: integer;
        it: TItem;
      end;
      item: record
        status: boolean;
        input: string;
        output: integer;
        sets, replace, drop, send: TBlock;
      end;
    end;
    apart: record
      status: boolean;
      input: string;
      output: integer;
      buy, sell: TBlock;
      item: record
        status: boolean;
        input: string;
        output: integer;
        items: record
          status: boolean;
          input: string;
          output: integer;
          sets, replace, drop, send: TBlock;
        end;
      end;
    end;
  end;
  
  tutorial: integer;
  
  block: boolean;
  
{$endregion}

{$region AFTER VAR PROCEDURES AND FUNCTIONS}

  function SizeSeparate(x: integer; params s: array of string): array of string;
  begin
    var PreRes:=new List<string>;
    for var i:=0 to s.Length-1 do
    begin
      var StrBuild := new StringBuilder;
      StrBuild+=' ';
      var TWds:=s[i].ToWords;
      if TWds<>nil then
      for var j:=0 to TWds.Length-1 do
      begin
        if StrBuild.length + 1 + TWds[j].length < x then
        begin
          if j>0 then StrBuild+=' ';
          StrBuild+=TWds[j];
        end
        else
        begin
          PreRes.Add(StrBuild.ToString);
          StrBuild:=' '+TWds[j];
        end;
      end;
      if StrBuild.ToString<>'' then
      begin
        PreRes.Add(StrBuild.ToString);
      end;
    end;
    Result:=PreRes.ToArray;
  end;
  
  function SizeSeparate(params s: array of string): array of string;
  begin
    Result:=SizeSeparate(KTX.maxx,s);
  end;

  {$region NullableDetails}
  
  {$endregion}
  
  ///Выводит с паузой значения
  procedure wrdelay(params s: array of string);
  begin
    wrdelay(svg.wrspeed,s);
  end;
  
  procedure wrif(first: boolean; params s: array of string);
  begin
    if first then wrdelay(s)
    else for var i:=0 to s.Length-1 do write(s[i]);
  end;
 
  procedure ReEco;
  begin
    for var i:=0 to map.Length-1 do
    begin
      if map[i].sort=0 then map[i].kprice:=balance.economic.town0.min+Round((PABCSystem.Random*(balance.economic.town0.max-balance.economic.town0.min))*1000)/1000;
      if map[i].sort=1 then map[i].kprice:=balance.economic.town1.min+Round((PABCSystem.Random*(balance.economic.town1.max-balance.economic.town1.min))*1000)/1000;
      if map[i].sort=2 then map[i].kprice:=balance.economic.town2.min+Round((PABCSystem.Random*(balance.economic.town2.max-balance.economic.town2.min))*1000)/1000;
    end;
  end;
  
  procedure looping(bal: TLoop; st: string);
  begin
    Console.Clear;KTX.resize;
    var current, max: integer;
    var curtime: DateTime;
    var currentenergy: integer;
    current:=0;max:=1000;
    while current<max do
    begin
      if player.level<bal.levelmax then
      curtime:=player.time.AddMinutes(Round((bal.maximum-(player.level*bal.k))*(current/max)))
      else curtime:=player.time.AddMinutes(Round(bal.minimum*(current/max)));
      
      var porcent: integer = Round((current/max)*(KTX.maxx-2));
      Console.SetCursorPosition(Round((KTX.maxx-st.Length)/2),1);
      write(st);
      Console.SetCursorPosition(1,2);
      loop porcent do write(KTX.subgraph_a[1]);
      loop (KTX.maxx-2)-porcent do write(KTX.subgraph_a[3]);
      
      currentenergy:=Round(player.energy-(bal.energy*(current/max)));
      var parcent: integer = Round((currentenergy/player.maxenergy)*(KTX.maxx-50));
      var pcent: string = $'{spcf(3)}{Round((currentenergy/player.maxenergy)*100)}%{spcf(3)}';
      Console.SetCursorPosition(Round(((KTX.maxx-50)-pcent.length)/2)+49,4);
      write(pcent);
      Console.ForegroundColor:=consolecolor.Red;
      Console.SetCursorPosition(49,5);
      loop parcent do write(KTX.subgraph_a[1]);
      loop (KTX.maxx-50)-parcent do write(KTX.subgraph_a[3]);
      Console.ForegroundColor:=consolecolor.Black;
      
      Console.SetCursorPosition(1,4);write(inter[10].face[0],': ');
      write(curtime.Hour,':');
      if curtime.Minute<10 then write('0',curtime.Minute) else write(curtime.Minute);
      spc(3);
      
      sleep(bal.pause);
      if player.level<bal.addcurrentlevelmax then
      begin
        current+=bal.addcurrent+(player.level*bal.levelk);
      end
      else current+=bal.addcurrentmax;
    end;
    if player.level<bal.levelmax then
    player.time:=player.time.AddMinutes(bal.maximum-(player.level*bal.k))
    else player.time:=player.time.AddMinutes(bal.minimum);
    player.energy-=bal.energy;
  end;
  
  procedure looping_sec(bal: TLoop; st: string);
  begin
    Console.Clear;KTX.resize;
    var current, max: integer;
    var curtime: DateTime;
    var currentenergy: integer;
    current:=0;max:=1000;
    while current<max do
    begin
      if player.level<bal.levelmax then
      curtime:=player.time.AddSeconds(Round((bal.maximum-(player.level*bal.k))*(current/max)))
      else curtime:=player.time.AddSeconds(Round(bal.minimum*(current/max)));
      
      var porcent: integer = Round((current/max)*(KTX.maxx-2));
      Console.SetCursorPosition(Round((KTX.maxx-st.Length)/2),1);
      write(st);
      Console.SetCursorPosition(1,2);
      loop porcent do write(KTX.subgraph_a[1]);
      loop (KTX.maxx-2)-porcent do write(KTX.subgraph_a[3]);
      
      currentenergy:=Round(player.energy-(bal.energy*(current/max)));
      var parcent: integer = Round((currentenergy/player.maxenergy)*(KTX.maxx-50));
      var pcent: string = $'{spcf(3)}{Round((currentenergy/player.maxenergy)*100)}%{spcf(3)}';
      Console.SetCursorPosition(Round(((KTX.maxx-50)-pcent.length)/2)+49,4);
      write(pcent);
      Console.ForegroundColor:=consolecolor.Red;
      Console.SetCursorPosition(49,5);
      loop parcent do write(KTX.subgraph_a[1]);
      loop (KTX.maxx-50)-parcent do write(KTX.subgraph_a[3]);
      Console.ForegroundColor:=consolecolor.Black;
      
      Console.SetCursorPosition(1,4);write(inter[10].face[0],': ');
      write(curtime.Hour,':');
      if curtime.Minute<10 then write('0',curtime.Minute) else write(curtime.Minute);
      spc(3);
      
      sleep(bal.pause);
      if player.level<bal.addcurrentlevelmax then
      begin
        current+=bal.addcurrent+(player.level*bal.levelk);
      end
      else current+=bal.addcurrentmax;
    end;
    if player.level<bal.levelmax then
    player.time:=player.time.AddSeconds(bal.maximum-(player.level*bal.k))
    else player.time:=player.time.AddSeconds(bal.minimum);
    player.energy-=bal.energy;
  end;
  
  ///Проверяет все склады предметов игры на наличие посылок
  function CheckAllOnSending: boolean;
  begin
    Result:=False;
    if player.itemcount>0 then
      for var i:=0 to player.items.Length-1 do
        if player.items[i].tpsort=11 then Result:=true;
  end;
  
  function SendKF: real;
  begin
    var kk: real;
    if player.level>balance.Send.maxlvlk then kk:=balance.Send.mink+balance.Send.kadd*balance.Send.maxlvlk
      else kk:=balance.Send.mink+balance.Send.kadd*player.level;
    Result:=(player.respect/1000000)*(map[player.position].kprice)*kk;
  end;
  
  procedure v_compatibility;
  begin
    svg.version:=$'{version.Major}.{version.Minor}.{version.Build}';
  end;
  
  ///Загружает сохранённую игру
  procedure load;
  begin
    LOG.Add('START loading savegame');
    var savefile: TextFile;
    var saveinput: string;
    LOG.Add('Check for file save.dat');
    if FileExists('save.dat') then
    begin
      var apartid: integer;
      player.itemcount:=0;
      for var i:=0 to map.Length-1 do
      begin
        map[i].apartment.apartment:=false;
        map[i].apartment.price:=0;
        map[i].apartment.itemcount:=0;
      end;
      svg.available:=true;
      alarm.Status:=false;
      LOG.Add('save.dat exists is true');
      LOG.Add('Opening to read save.dat');
      reset(savefile,'save.dat',encoding.UTF8);
      LOG.Add('START reading save.dat');
      {$region svg}
      while ((not savefile.Eof) and (svg.available)) do
      begin
        readln(savefile,saveinput);
        {$region General}
        if saveinput.left(8)='version=' then
        begin
          svg.version:=copy(saveinput,9,32);
        end;
        if saveinput.left(5)='crsp=' then
        begin
          svg.CRSP:=Copy(saveinput,6,128);
        end;
        if saveinput.left(6)='alarm=' then
        begin
          Alarm.Status:=true;
          if not int64.TryParse(Copy(saveinput,7,128),Alarm.Date) then
          begin
            Alarm.Status:=false;
            LOG.Add('E! Incorrect alarm time')
          end;
        end;
        if saveinput.left(7)='mv_min=' then
        begin
          var a: integer;
          var b: real;
          val(Copy(saveinput,8,32),b,a);
          if (a=0) and (b>=balance.mv_minsc) and (b<=balance.mv_maxsc) then
          begin
            mapviewer.minscalable:=b;
          end
          else LOG.Add('E! Incorrect mapviewer params, name: minsc');
        end;
        if saveinput.left(7)='mv_max=' then
        begin
          var a: integer;
          var b: real;
          val(Copy(saveinput,8,32),b,a);
          if (a=0) and (b>=balance.mv_minsc) and (b<=balance.mv_maxsc) then
          begin
            mapviewer.maxscalable:=b;
          end
          else LOG.Add('E! Incorrect mapviewer params, name: maxsc');
        end;
        if saveinput.left(8)='mv_step=' then
        begin
          var a: integer;
          var b: real;
          val(Copy(saveinput,9,32),b,a);
          if (a=0) and (b>=balance.mvminstep) and (b<=balance.mvmaxstep) then
          begin
            mapviewer.stepscalable:=b;
          end
          else LOG.Add('E! Incorrect mapviewer params, name: stepsc');
        end;
        if saveinput.Left(10)='int_widht=' then
        begin
          var a,b: integer;
          val(Copy(saveinput,11,32),b,a);
          if (a=0) and (b>=balance.int_minx) and (b<=balance.int_maxx) then
          begin
            KTX.maxx:=b;
          end
          else LOG.Add('E! Incorrect interface width');
        end;
        if saveinput.Left(11)='int_heigth=' then
        begin
          var a,b: integer;
          val(Copy(saveinput,12,32),b,a);
          if (a=0) and (b>=balance.int_miny) and (b<=balance.int_maxy) then
          begin
            KTX.maxy:=b;
          end
          else LOG.Add('E! Incorrect interface height');
        end;
        
        if saveinput.left(13)='log_autosave=' then
        begin
          var a: boolean;
          if boolean.TryParse(Copy(saveinput,14,16),a) then log_autosave:=boolean.Parse(Copy(saveinput,14,16))
          else
          begin
            LOG.Add('E! Incorrect log_autosave type');
          end;
        end;
        if saveinput.left(10)='shop_olds=' then
        begin
          var a: boolean;
          if boolean.TryParse(Copy(saveinput,11,16),a) then shop.olds:=a
          else
          begin
            LOG.Add('E! Incorrect shop_olds type');
          end;
        end;
        if saveinput.left(9)='savedate=' then
        begin
          var a: uint64;
          var b: integer;
          val(Copy(saveinput,10,128),a,b);
          if b=0 then svg.date:=new DateTime(a) else LOG.Add('E! Incorrect Save Date');
        end;
        if saveinput.Left(9)='autosave=' then
        begin
          var a: boolean;
          if boolean.TryParse(Copy(saveinput,10,16),a) then svg.autosave:=boolean.Parse(Copy(saveinput,10,16))
          else
          begin
            LOG.Add('E! Incorrect autosave type');
          end;
        end;
        if saveinput.Left(9)='animation' then
        begin
          var sss: string = saveinput.Replace('(',' ').Replace(')',' ').Replace('=',' ');
          if sss.ToWords[1] = 'B1' then
          begin
            if sss.ToWords[2].ToLower='true' then A_B1:=true;
            if sss.ToWords[2].ToLower='false' then A_B1:=false;
          end;
        end;
        if saveinput.Left(8)='sending=' then
        begin
          if Copy(Saveinput,9,5).ToLower=boolean.FalseString.ToLower then player.sending:=false;
          if Copy(Saveinput,9,5).ToLower=boolean.TrueString.ToLower then player.sending:=true;
        end;
        if saveinput.Left(10)='time_type=' then
        begin
          var a,b: integer;
          val(Copy(saveinput,11,32),b,a);
          if (a=0) and (b>=0) and (b<=2) then
          begin
            svg.time_type:=b;
          end
          else LOG.Add('E! Incorrect time type');
        end;
        if saveinput.Left(6)='sound=' then
        begin
          var a: boolean;
          if boolean.TryParse(Copy(saveinput,7,16),a) then svg.sound:=boolean.Parse(Copy(saveinput,7,16))
          else
          begin
            LOG.Add('E! Incorrect sound turn');
          end;
        end;
        if saveinput.Left(10)='animspeed=' then
        begin
          var a, e: integer;
          val(Copy(saveinput,11,16),a,e);
          if (e=0) and (a>=balance.animminspeed) and (a<=balance.animmaxspeed) then
            svg.animspeed:=a
          else
          begin
            LOG.Add('E! Incorrect animation speed');
          end;
        end;
        if saveinput.Left(11)='writespeed=' then
        begin
          var a, e: integer;
          val(Copy(saveinput,12,16),a,e);
          if (e=0) and (a>=balance.minwritespd) and (a<=balance.maxwritespd) then
            svg.wrspeed:=a
          else
          begin
            LOG.Add('E! Incorrect write speed, set to 30');
            svg.wrspeed:=30;
          end;
        end;
        if saveinput.Left(13)='levelvisible=' then
        begin
          var a: boolean;
          if boolean.TryParse(Copy(saveinput,14,16),a) then svg.levelvisible:=boolean.Parse(Copy(saveinput,14,16))
          else
          begin
            LOG.Add('E! Incorrect levelvisible');
          end;
        end;
        if saveinput.Left(9)='nickname=' then
        begin
          player.nickname:=Copy(saveinput,10,balance.maxnicksize);
          if player.nickname.Length<balance.minnicksize then
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect nickname length');
          end;
        end;
        if saveinput.Left(5)='time=' then
        begin
          var a: integer;
          var b: uint64;
          val(Copy(saveinput,6,64),b,a);
          if a=0 then player.time:=new DateTime(b)
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.time');
          end;
        end;
        if saveinput.Left(9)='position=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,10,64),b,a);
          if (a=0) and (b<map.Length) then player.position:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.position');
          end;
        end;
        if saveinput.Left(4)='exp=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,5,64),b,a);
          if (a=0) then player.experience:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.experience');
          end;
        end;
        if saveinput.Left(6)='money=' then
        begin
          var a: integer; var b: uint64;
          val(Copy(saveinput,7,64),b,a);
          if a=0 then player.money:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.money');
          end;
        end;
        if saveinput.Left(7)='health=' then
        begin
          var a: integer; var b: uint64;
          val(Copy(saveinput,8,64),b,a);
          if a=0 then player.health:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.health');
          end;
        end;
        if saveinput.Left(8)='respect=' then
        begin
          var a: integer; var b: integer;
          val(Copy(saveinput,9,64),b,a);
          if a=0 then player.respect:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.respect');
          end;
          if player.respect>balance.Send.maxrespect then player.respect:=balance.Send.maxrespect
          else if player.respect<balance.Send.minrespect then player.respect:=balance.Send.minrespect;
        end;
        if saveinput.Left(10)='maxhealth=' then
        begin
          var a: integer; var b: uint64;
          val(Copy(saveinput,11,64),b,a);
          if a=0 then player.maxhealth:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.maxhealth');
          end;
        end;
        if saveinput.Left(5)='tent=' then
        begin
          var a: boolean;
          if boolean.TryParse(Copy(saveinput,6,16),a) then player.tent:=a
          else
          begin
            LOG.Add('E! Incorrect player.tent');
          end;
        end;
        if saveinput.Left(10)='maxenergy=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,11,64),b,a);
          if a=0 then player.maxenergy:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.maxenergy');
          end;
        end;
        if saveinput.Left(10)='maxveight=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,11,64),b,a);
          if a=0 then player.maxveight:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.maxveight');
          end;
        end;
        if saveinput.Left(9)='maxwater=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,10,64),b,a);
          if a=0 then player.maxwater:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.maxwater');
          end;
        end;
        if saveinput.Left(8)='maxfood=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,9,64),b,a);
          if a=0 then player.maxfood:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.maxfood');
          end;
        end;
        if saveinput.Left(7)='energy=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,8,64),b,a);
          if b<=player.maxenergy then
          if a=0 then player.energy:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.energy');
          end
          else
          begin
            player.energy:=player.maxenergy;
            LOG.Add('E! Player.energy more than player.maxenergy');
          end;
        end;
        if saveinput.Left(6)='water=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,7,64),b,a);
          if b<=player.maxwater then
          if a=0 then player.water:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.water');
          end
          else
          begin
            player.water:=player.maxwater;
            LOG.Add('E! Player.water more than player.maxwater');
          end;
        end;
        if saveinput.Left(5)='food=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,6,64),b,a);
          if b<=player.maxfood then
          if a=0 then player.food:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.food');
          end
          else
          begin
            player.food:=player.maxfood;
            LOG.Add('E! Player.water more than player.maxwater');
          end;
        end;
        if saveinput.Left(6)='level=' then
        begin
          var a, b: integer;
          val(Copy(saveinput,7,64),b,a);
          if (a=0) and (b>=0) then player.level:=b
          else
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect player.level');
          end;
        end;
        if saveinput.Left(9)='eco_last=' then
        begin
          var a,b: integer;
          val(Copy(saveinput,10,32),b,a);
          if (a=0) and (b>=1) and (b<=31) then
          begin
            economic.last:=b;
          end
          else LOG.Add('E! Incorrect economic changer');
        end;
        {$endregion}
        if saveinput.Left(10)='apartment=' then
        begin
          var a,b: integer;
          val(Copy(saveinput,11,32),b,a);
          if (a=0) and (b>=0) and (b<map.Length) then
          begin
            apartid:=b;
            map[apartid].apartment.apartment:=true;
          end
          else
          begin
            LOG.Add('E! Incorrect apartment');
            svg.available:=false;
          end;
        end;
        if saveinput.Left(9)='ap_price=' then
        begin
          var a,b: integer;
          val(Copy(saveinput,10,32),b,a);
          if (a=0) then
          begin
            map[apartid].apartment.price:=b;
          end
          else
          begin
            LOG.Add('E! Incorrect apartment price');
            svg.available:=false;
          end;
        end;
        if saveinput.Left(9)='tutorial=' then
        begin
          var a,b: integer;
          val(Copy(saveinput,10,32),b,a);
          if (a=0) and (b<=balance.maxtutorial) then
          begin
            tutorial:=b;
          end
          else tutorial:=-1;
        end;
        
        try
          if saveinput.Left(8)='ap_item.' then
          begin
            case saveinput.ToLower.ToWords('.','=')[1] of
              'newitem':
              begin
                map[apartid].apartment.itemcount+=1;
                SetLength(map[apartid].apartment.items,map[apartid].apartment.itemcount);
              end;
              'type': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].tpsort:=StrToInt(saveinput.ToWords('=')[1]);
              'name':
              begin
                map[apartid].apartment.items[map[apartid].apartment.itemcount-1].name:=saveinput.ToWords('=')[1].Replace('_',' ');
                map[apartid].apartment.items[map[apartid].apartment.itemcount-1].cardname:=saveinput.ToWords('=')[1].Replace('_',' ');
              end;
              'quest': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].questitem:=StrToInt(saveinput.ToWords('=')[1]);
              'town': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].town:=StrToInt(saveinput.ToWords('=')[1]);
              'timestart': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].timestart:=new DateTime(int64.Parse(saveinput.ToWords('=')[1]));
              'timemax': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].timeMax:=new DateTime(int64.Parse(saveinput.ToWords('=')[1]));
              'material': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].material:=StrToInt(saveinput.ToWords('=')[1]);
              'suspensionflag': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].suspensionflag:=boolean.Parse(saveinput.ToWords('=')[1]);
              'block': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].block:=boolean.Parse(saveinput.ToWords('=')[1]);
              'suspension': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].suspension:=StrToInt(saveinput.ToWords('=')[1]);
              'travel': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].travel:=StrToInt(saveinput.ToWords('=')[1]);
              'fores': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].fores:=boolean.Parse(saveinput.ToWords('=')[1]);
              'count': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].count:=StrToInt(saveinput.ToWords('=')[1]);
              'btype': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].sort:=StrToInt(saveinput.ToWords('=')[1]);
              'effection': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].effection:=StrToInt(saveinput.ToWords('=')[1]);
              'maxeffection': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].maxeffection:=StrToInt(saveinput.ToWords('=')[1]);
              'needles': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].needles:=StrToInt(saveinput.ToWords('=')[1]);
              'camerahit': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].camerahit:=boolean.Parse(saveinput.ToWords('=')[1]);
              'eight': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].eight:=boolean.Parse(saveinput.ToWords('=')[1]);
              'hitpoints': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].hitpoints:=StrToInt(saveinput.ToWords('=')[1]);
              'maxhitpoints': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].maxhitpoints:=StrToInt(saveinput.ToWords('=')[1]);
              'price': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].price:=StrToInt(saveinput.ToWords('=')[1]);
              'veight': map[apartid].apartment.items[map[apartid].apartment.itemcount-1].veight:=StrToInt(saveinput.ToWords('=')[1]);
            end;
            {
              tpsort: integer;//1 - frame, 2 - fork, 3 - bsusp, 4 - transmission, 5 - rudder, 6 - breaks, 7 - wheels, 8 - breakscard, 9 - camera, 10 - quest item, 11 - send
              name: string;//1..10
              questitem: integer;//10
              town: integer;//11
              time: DateTime;//11
              material: integer;//Only for 1
              suspensiongflag: boolean;//1: Возможность установки заднего амортизатора, 2,3: Наличие аморта
              block: boolean;//2,3: Наличие блокировки
              suspension: integer;//2,3: Тип подвески
              travel: integer;//2,3: Ход подвески
              fores: boolean;//4: Наличие передних скоростей
              count: integer;//4: Кол-во задних скоростей
              sort: integer;//5: Тип руля, 6: Тип тормоза
              effection, maxeffection: integer;//6, 8: Эффективность тормоза (делится на это число шанс аварии)
              needles: integer;//Количество рабочих спиц
              camerahit: boolean;//True если камера проколота
              eight: boolean;//Исправлена ли восьмёрка. Одно исправление на одно колесо - +1000 прочности//7
              price: integer;//1..10
              veight: integer;//В граммах}
          end;
        except
          on System.Exception do
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect apartment items');
          end;
        end;
        
        try
          if saveinput.Left(8)='pl_item.' then
          begin
            case saveinput.ToLower.ToWords('.','=')[1] of
              'newitem':
              begin
                player.itemcount+=1;
                SetLength(player.items,player.itemcount);
              end;
              'type': player.items[player.itemcount-1].tpsort:=StrToInt(saveinput.ToWords('=')[1]);
              'name':
              begin
                player.items[player.itemcount-1].name:=saveinput.ToWords('=')[1].Replace('_',' ');
                player.items[player.itemcount-1].cardname:=saveinput.ToWords('=')[1].Replace('_',' ');
              end;
              'quest': player.items[player.itemcount-1].questitem:=StrToInt(saveinput.ToWords('=')[1]);
              'town': player.items[player.itemcount-1].town:=StrToInt(saveinput.ToWords('=')[1]);
              'timestart': player.items[player.itemcount-1].timestart:=new DateTime(int64.Parse(saveinput.ToWords('=')[1]));
              'timemax': player.items[player.itemcount-1].timeMax:=new DateTime(int64.Parse(saveinput.ToWords('=')[1]));
              'material': player.items[player.itemcount-1].material:=StrToInt(saveinput.ToWords('=')[1]);
              'suspensionflag': player.items[player.itemcount-1].suspensionflag:=boolean.Parse(saveinput.ToWords('=')[1]);
              'block': player.items[player.itemcount-1].block:=boolean.Parse(saveinput.ToWords('=')[1]);
              'suspension': player.items[player.itemcount-1].suspension:=StrToInt(saveinput.ToWords('=')[1]);
              'travel': player.items[player.itemcount-1].travel:=StrToInt(saveinput.ToWords('=')[1]);
              'fores': player.items[player.itemcount-1].fores:=boolean.Parse(saveinput.ToWords('=')[1]);
              'count': player.items[player.itemcount-1].count:=StrToInt(saveinput.ToWords('=')[1]);
              'btype': player.items[player.itemcount-1].sort:=StrToInt(saveinput.ToWords('=')[1]);
              'effection': player.items[player.itemcount-1].effection:=StrToInt(saveinput.ToWords('=')[1]);
              'maxeffection': player.items[player.itemcount-1].maxeffection:=StrToInt(saveinput.ToWords('=')[1]);
              'needles': player.items[player.itemcount-1].needles:=StrToInt(saveinput.ToWords('=')[1]);
              'camerahit': player.items[player.itemcount-1].camerahit:=boolean.Parse(saveinput.ToWords('=')[1]);
              'eight': player.items[player.itemcount-1].eight:=boolean.Parse(saveinput.ToWords('=')[1]);
              'hitpoints': player.items[player.itemcount-1].hitpoints:=StrToInt(saveinput.ToWords('=')[1]);
              'maxhitpoints': player.items[player.itemcount-1].maxhitpoints:=StrToInt(saveinput.ToWords('=')[1]);
              'price': player.items[player.itemcount-1].price:=StrToInt(saveinput.ToWords('=')[1]);
              'veight': player.items[player.itemcount-1].veight:=StrToInt(saveinput.ToWords('=')[1]);
            end;
          end;
        except
          on System.Exception do
          begin
            svg.available:=false;
            LOG.Add('E! Incorrect items');
          end;
        end;
        
        if saveinput.Left(10)='pricingmap' then
        begin
          try
          map[StrToInt(saveinput.ToWords('@','=')[1])].kprice:=StrToFloat(saveinput.Replace(',','.').ToWords('=')[1]);
          except
            on System.Exception do
            begin
              svg.available:=false;
              LOG.Add('E! Incorrect town k price');
            end;
          end;
        end;
        if saveinput.Left(5)='bike.' then
        {$region load bike}
        begin
          try
            var bikeinput: array of string = saveinput.ToWords('.','=',' ');
            if bikeinput[1].ToLower='name' then player.bike.name:=bikeinput[2].Replace('_',' ');
            if bikeinput[1].ToLower='odo' then player.bike.odo:=StrToFloat(bikeinput[2].Replace(',','.'));
            if bikeinput[1].ToLower='light' then case bikeinput[2].ToLower of
                                              'false': player.bike.light:=false;
                                              'true' : player.bike.light:=true;
                                            end;
            if bikeinput[1].ToLower='frame' then
            case bikeinput[2] of
              'name' : player.bike.frame.name:=bikeinput[3].Replace('_',' ');
              'material' : player.bike.frame.material:=StrToInt(bikeinput[3]);
              'suspensionflag' :  case bikeinput[3].ToLower of
                                    'false': player.bike.frame.suspensionflag:=false;
                                    'true' : player.bike.frame.suspensionflag:=true;
                                  end;
              'hitpoints': player.bike.frame.hitpoints:=StrToInt(bikeinput[3]);
              'maxhitpoints': player.bike.frame.maxhitpoints:=StrToInt(bikeinput[3]);
              'price': player.bike.frame.price:=StrToInt(bikeinput[3]);
              'veight': player.bike.frame.veight:=StrToInt(bikeinput[3]);
            end;
            if bikeinput[1].ToLower='fork' then
            case bikeinput[2] of
              'name' : player.bike.fork.name:=bikeinput[3].Replace('_',' ');
              'suspensionflag' :  case bikeinput[3].ToLower of
                                    'false': player.bike.fork.suspensionflag:=false;
                                    'true' : player.bike.fork.suspensionflag:=true;
                                  end;
              'block' : case bikeinput[3].ToLower of
                          'false': player.bike.fork.block:=false;
                          'true' : player.bike.fork.block:=true;
                        end;
              
              'blocks' :  if player.bike.fork.block then case bikeinput[3].ToLower of
                            'false': player.bike.fork.blocks:=false;
                            'true' : player.bike.fork.blocks:=true;
                          end;
              'suspension': player.bike.fork.suspension:=StrToInt(bikeinput[3]);
              'travel': player.bike.fork.travel:=StrToInt(bikeinput[3]);
              'hitpoints': player.bike.fork.hitpoints:=StrToInt(bikeinput[3]);
              'maxhitpoints': player.bike.fork.maxhitpoints:=StrToInt(bikeinput[3]);
              'price': player.bike.fork.price:=StrToInt(bikeinput[3]);
              'veight': player.bike.fork.veight:=StrToInt(bikeinput[3]);
            end;
            if bikeinput[1].ToLower='backsuspension' then
            case bikeinput[2] of
              'name' : player.bike.bsusp.name:=bikeinput[3].Replace('_',' ');
              'flag' :  case bikeinput[3].ToLower of
                          'false': player.bike.bsusp.flag:=false;
                          'true' : player.bike.bsusp.flag:=true;
                        end;
              'block' : case bikeinput[3].ToLower of
                          'false': player.bike.bsusp.block:=false;
                          'true' : player.bike.bsusp.block:=true;
                        end;
              
              'blocks' :  if player.bike.fork.block then case bikeinput[3].ToLower of
                            'false': player.bike.bsusp.blocks:=false;
                            'true' : player.bike.bsusp.blocks:=true;
                          end;
              'suspension': player.bike.bsusp.suspension:=StrToInt(bikeinput[3]);
              'travel': player.bike.bsusp.travel:=StrToInt(bikeinput[3]);
              'hitpoints': player.bike.bsusp.hitpoints:=StrToInt(bikeinput[3]);
              'maxhitpoints': player.bike.bsusp.maxhitpoints:=StrToInt(bikeinput[3]);
              'price': player.bike.bsusp.price:=StrToInt(bikeinput[3]);
              'veight': player.bike.bsusp.veight:=StrToInt(bikeinput[3]);
            end;
            if bikeinput[1].ToLower='transmission' then
            case bikeinput[2] of
              'name' : player.bike.transmission.name:=bikeinput[3].Replace('_',' ');
              'fores' : case bikeinput[3].ToLower of
                          'false': player.bike.transmission.fores:=false;
                          'true' : player.bike.transmission.fores:=true;
                        end;
              'count': player.bike.transmission.count:=StrToInt(bikeinput[3]);
              'hitpoints': player.bike.transmission.hitpoints:=StrToInt(bikeinput[3]);
              'maxhitpoints': player.bike.transmission.maxhitpoints:=StrToInt(bikeinput[3]);
              'price': player.bike.transmission.price:=StrToInt(bikeinput[3]);
              'veight': player.bike.transmission.veight:=StrToInt(bikeinput[3]);
            end;
            if bikeinput[1].ToLower='rudder' then
            case bikeinput[2] of
              'name' : player.bike.rudder.name:=bikeinput[3].Replace('_',' ');
              'sort': player.bike.rudder.sort:=StrToInt(bikeinput[3]);
              'hitpoints': player.bike.rudder.hitpoints:=StrToInt(bikeinput[3]);
              'maxhitpoints': player.bike.rudder.maxhitpoints:=StrToInt(bikeinput[3]);
              'price': player.bike.rudder.price:=StrToInt(bikeinput[3]);
              'veight': player.bike.rudder.veight:=StrToInt(bikeinput[3]);
            end;
            if bikeinput[1].ToLower='backbreak' then
            case bikeinput[2] of
              'flag' :  case bikeinput[3].ToLower of
                          'false': player.bike.backbreak.flag:=false;
                          'true' : player.bike.backbreak.flag:=true;
                        end;
              'name' : player.bike.backbreak.name:=bikeinput[3].Replace('_',' ');
              'cardname' : player.bike.backbreak.cardname:=bikeinput[3].Replace('_',' ');
              'sort': player.bike.backbreak.sort:=StrToInt(bikeinput[3]);
              'effection': player.bike.backbreak.effection:=StrToInt(bikeinput[3]);
              'maxeffection': player.bike.backbreak.maxeffection:=StrToInt(bikeinput[3]);
              'hitpoints': player.bike.backbreak.hitpoints:=StrToInt(bikeinput[3]);
              'maxhitpoints': player.bike.backbreak.maxhitpoints:=StrToInt(bikeinput[3]);
              'price': player.bike.backbreak.price:=StrToInt(bikeinput[3]);
              'veight': player.bike.backbreak.veight:=StrToInt(bikeinput[3]);
            end;
            if bikeinput[1].ToLower='frontbreak' then
            case bikeinput[2] of
              'flag' :  case bikeinput[3].ToLower of
                          'false': player.bike.frontbreak.flag:=false;
                          'true' : player.bike.frontbreak.flag:=true;
                        end;
              'name' : player.bike.frontbreak.name:=bikeinput[3].Replace('_',' ');
              'cardname' : player.bike.frontbreak.cardname:=bikeinput[3].Replace('_',' ');
              'sort': player.bike.frontbreak.sort:=StrToInt(bikeinput[3]);
              'effection': player.bike.frontbreak.effection:=StrToInt(bikeinput[3]);
              'maxeffection': player.bike.frontbreak.maxeffection:=StrToInt(bikeinput[3]);
              'hitpoints': player.bike.frontbreak.hitpoints:=StrToInt(bikeinput[3]);
              'maxhitpoints': player.bike.frontbreak.maxhitpoints:=StrToInt(bikeinput[3]);
              'price': player.bike.frontbreak.price:=StrToInt(bikeinput[3]);
              'veight': player.bike.frontbreak.veight:=StrToInt(bikeinput[3]);
            end;
            if bikeinput[1].ToLower='backwheel' then
            case bikeinput[2] of
              'name' : player.bike.backwheel.name:=bikeinput[3].Replace('_',' ');
              'pressure': player.bike.backwheel.pressure:=StrToFloat(bikeinput[3].Replace(',','.'));
              'needles': player.bike.backwheel.needles:=StrToInt(bikeinput[3]);
              'camerahit' : case bikeinput[3].ToLower of
                              'false': player.bike.backwheel.camerahit:=false;
                              'true' : player.bike.backwheel.camerahit:=true;
                            end;
              'eight' : case bikeinput[3].ToLower of
                          'false': player.bike.backwheel.eight:=false;
                          'true' : player.bike.backwheel.eight:=true;
                        end;
              'hitpoints': player.bike.backwheel.hitpoints:=StrToInt(bikeinput[3]);
              'maxhitpoints': player.bike.backwheel.maxhitpoints:=StrToInt(bikeinput[3]);
              'price': player.bike.backwheel.price:=StrToInt(bikeinput[3]);
              'veight': player.bike.backwheel.veight:=StrToInt(bikeinput[3]);
            end;
            if bikeinput[1].ToLower='frontwheel' then
            case bikeinput[2] of
              'name' : player.bike.frontwheel.name:=bikeinput[3].Replace('_',' ');
              'pressure': player.bike.frontwheel.pressure:=StrToFloat(bikeinput[3].Replace(',','.'));
              'needles': player.bike.frontwheel.needles:=StrToInt(bikeinput[3]);
              'camerahit' : case bikeinput[3].ToLower of
                              'false': player.bike.frontwheel.camerahit:=false;
                              'true' : player.bike.frontwheel.camerahit:=true;
                            end;
              'eight' : case bikeinput[3].ToLower of
                          'false': player.bike.frontwheel.eight:=false;
                          'true' : player.bike.frontwheel.eight:=true;
                        end;
              'hitpoints': player.bike.frontwheel.hitpoints:=StrToInt(bikeinput[3]);
              'maxhitpoints': player.bike.frontwheel.maxhitpoints:=StrToInt(bikeinput[3]);
              'price': player.bike.frontwheel.price:=StrToInt(bikeinput[3]);
              'veight': player.bike.frontwheel.veight:=StrToInt(bikeinput[3]);
            end;
          except
            on System.Exception do
            begin
              LOG.Add('E! Error reading bike');
              svg.available:=false;
            end;
          end;
        end;{$endregion}
        if saveinput.Left(5)='quest' then
        begin
          try
            var tts:=saveinput.ToWords('@='.ToArray);
            quests[StrToInt(tts[1])].stage:=StrToInt(tts[2]);
          except
            on e: System.Exception do
            begin
              svg.available:=false;
              LOG.Add('E! Incorrect quests');
            end;
          end;
        end;
      end;
      {$endregion}
      LOG.Add('FINISH reading save.dat');
      close(savefile);
      LOG.Add('Close save.dat');
      player.sending:=CheckAllOnSending;
      if svg.available then
      begin
        if svg.version<>Concat(Version.Major.ToString,'.',Version.Minor.ToString,'.',Version.Build.ToString) then
        begin
          v_compatibility;
        end;
        
        if soundavailable then
        begin
          if not svg.sound then Sound.Stop;
        end;
      end;
    end else LOG.Add('save.dat exists is false');
    LOG.Add('FINISH loading savegame');
  end;

  ///Сохраняет игру
  procedure save;
  begin
    if svg.available then
    begin
      if (svg.autosave) and (LOG_autosave) then LOG.Add('autosaving...');
      if not svg.autosave then LOG.Add('START saving savegame');
      var savefile: TextFile;
      if not svg.autosave then LOG.Add('Opening to write save.dat');
      rewrite(savefile,'save.dat',encoding.UTF8);
      if not svg.autosave then LOG.Add('START writing save.dat');
      writeln(savefile,'version=',Version.Major,'.',Version.Minor,'.',Version.Build);
      svg.date:=DateTime.Now;
      writeln(savefile,'savedate=',svg.date.Ticks);
      writeln(savefile,'int_widht=',KTX.maxx);
      writeln(savefile,'int_heigth=',KTX.maxy);
      writeln(savefile,'autosave=',svg.autosave);
      writeln(savefile,'animation(B1)=',A_B1);
      writeln(savefile,'log_autosave=',log_autosave);
      writeln(savefile,'time_type=',svg.time_type);
      writeln(savefile,'sound=',svg.sound);
      writeln(savefile,'levelvisible=',svg.levelvisible);
      writeln(savefile,'animspeed=',svg.animspeed);
      writeln(savefile,'writespeed=',svg.wrspeed);
      writeln(savefile,'shop_olds=',shop.olds);
      writeln(savefile,'mv_min=',mapviewer.minscalable);
      writeln(savefile,'mv_max=',mapviewer.maxscalable);
      writeln(savefile,'mv_step=',mapviewer.stepscalable);
      writeln(savefile);
      writeln(savefile,'nickname=',player.nickname);
      writeln(savefile,'level=',player.level);
      writeln(savefile,'exp=',player.experience);
      writeln(savefile,'respect=',player.respect);
      writeln(savefile,'time=',player.time.Ticks);
      writeln(savefile,'position=',player.position);
      writeln(savefile,'money=',player.money);
      writeln(savefile,'maxveight=',player.maxveight);
      writeln(savefile,'maxenergy=',player.maxenergy);
      writeln(savefile,'maxwater=',player.maxwater);
      writeln(savefile,'maxfood=',player.maxfood);
      writeln(savefile,'maxhealth=',player.maxhealth);
      writeln(savefile,'energy=',player.energy);
      writeln(savefile,'water=',player.water);
      writeln(savefile,'food=',player.food);
      writeln(savefile,'health=',player.health);
      writeln(savefile,'tent=',player.tent);
      writeln(savefile,'sending=',player.sending);
      writeln(savefile,'eco_last=',economic.last);
      writeln(savefile,'crsp=',svg.CRSP);
      writeln(savefile,'tutorial=',tutorial);
      if Alarm.Status then writeln(savefile,'alarm=',Alarm.Date);
      writeln(savefile);
      for var i:=0 to map.Length-1 do
      begin
        writeln(savefile,'pricingmap@',i,'=',map[i].kprice.ToString.Replace('.',','));
      end;
      writeln(savefile);
      writeln(savefile,'bike.name=',player.bike.name.Replace(' ','_'));
      writeln(savefile,'bike.odo=',player.bike.odo.ToString.Replace('.',','));
      writeln(savefile,'bike.light=',player.bike.light);
      writeln(savefile,'bike.frame.name=',player.bike.frame.name.Replace(' ','_'));
      writeln(savefile,'bike.frame.material=',player.bike.frame.material);
      writeln(savefile,'bike.frame.suspensionflag=',player.bike.frame.suspensionflag);
      writeln(savefile,'bike.frame.hitpoints=',player.bike.frame.hitpoints);
      writeln(savefile,'bike.frame.maxhitpoints=',player.bike.frame.maxhitpoints);
      writeln(savefile,'bike.frame.price=',player.bike.frame.price);
      writeln(savefile,'bike.frame.veight=',player.bike.frame.veight);
      
      writeln(savefile,'bike.fork.name=',player.bike.fork.name.Replace(' ','_'));
      writeln(savefile,'bike.fork.suspensionflag=',player.bike.fork.suspensionflag);
      if player.bike.fork.suspensionflag then
      begin
        writeln(savefile,'bike.fork.block=',player.bike.fork.block);
        writeln(savefile,'bike.fork.blocks=',player.bike.fork.blocks);
        writeln(savefile,'bike.fork.suspension=',player.bike.fork.suspension);
        writeln(savefile,'bike.fork.travel=',player.bike.fork.travel);
      end;
      writeln(savefile,'bike.fork.hitpoints=',player.bike.fork.hitpoints);
      writeln(savefile,'bike.fork.maxhitpoints=',player.bike.fork.maxhitpoints);
      writeln(savefile,'bike.fork.price=',player.bike.fork.price);
      writeln(savefile,'bike.fork.veight=',player.bike.fork.veight);
      
      writeln(savefile,'bike.backsuspension.flag=',player.bike.bsusp.flag);
      if player.bike.bsusp.flag then
      begin
        writeln(savefile,'bike.backsuspension.name=',player.bike.bsusp.name.Replace(' ','_'));
        writeln(savefile,'bike.backsuspension.block=',player.bike.bsusp.block);
        writeln(savefile,'bike.backsuspension.blocks=',player.bike.bsusp.blocks);
        writeln(savefile,'bike.backsuspension.suspension=',player.bike.bsusp.suspension);
        writeln(savefile,'bike.backsuspension.travel=',player.bike.bsusp.travel);
        writeln(savefile,'bike.backsuspension.hitpoints=',player.bike.bsusp.hitpoints);
        writeln(savefile,'bike.backsuspension.maxhitpoints=',player.bike.bsusp.maxhitpoints);
        writeln(savefile,'bike.backsuspension.price=',player.bike.bsusp.price);
        writeln(savefile,'bike.backsuspension.veight=',player.bike.bsusp.veight);
      end;
      
      writeln(savefile,'bike.transmission.name=',player.bike.transmission.name.Replace(' ','_'));
      writeln(savefile,'bike.transmission.fores=',player.bike.transmission.fores);
      writeln(savefile,'bike.transmission.count=',player.bike.transmission.count);
      writeln(savefile,'bike.transmission.hitpoints=',player.bike.transmission.hitpoints);
      writeln(savefile,'bike.transmission.maxhitpoints=',player.bike.transmission.maxhitpoints);
      writeln(savefile,'bike.transmission.price=',player.bike.transmission.price);
      writeln(savefile,'bike.transmission.veight=',player.bike.transmission.veight);
      
      writeln(savefile,'bike.rudder.name=',player.bike.rudder.name.Replace(' ','_'));
      writeln(savefile,'bike.rudder.sort=',player.bike.rudder.sort);
      writeln(savefile,'bike.rudder.hitpoints=',player.bike.rudder.hitpoints);
      writeln(savefile,'bike.rudder.maxhitpoints=',player.bike.rudder.maxhitpoints);
      writeln(savefile,'bike.rudder.price=',player.bike.rudder.price);
      writeln(savefile,'bike.rudder.veight=',player.bike.rudder.veight);
      
      writeln(savefile,'bike.backbreak.flag=',player.bike.backbreak.flag);
      if player.bike.backbreak.flag then
      begin
        writeln(savefile,'bike.backbreak.name=',player.bike.backbreak.name.Replace(' ','_'));
        writeln(savefile,'bike.backbreak.cardname=',player.bike.backbreak.cardname.Replace(' ','_'));
        writeln(savefile,'bike.backbreak.sort=',player.bike.backbreak.sort);
        writeln(savefile,'bike.backbreak.effection=',player.bike.backbreak.effection);
        writeln(savefile,'bike.backbreak.maxeffection=',player.bike.backbreak.maxeffection);
        writeln(savefile,'bike.backbreak.hitpoints=',player.bike.backbreak.hitpoints);
        writeln(savefile,'bike.backbreak.maxhitpoints=',player.bike.backbreak.maxhitpoints);
        writeln(savefile,'bike.backbreak.price=',player.bike.backbreak.price);
        writeln(savefile,'bike.backbreak.veight=',player.bike.backbreak.veight);
      end;
      
      writeln(savefile,'bike.frontbreak.flag=',player.bike.frontbreak.flag);
      if player.bike.frontbreak.flag then
      begin
        writeln(savefile,'bike.frontbreak.name=',player.bike.frontbreak.name.Replace(' ','_'));
        writeln(savefile,'bike.frontbreak.cardname=',player.bike.frontbreak.cardname.Replace(' ','_'));
        writeln(savefile,'bike.frontbreak.sort=',player.bike.frontbreak.sort);
        writeln(savefile,'bike.frontbreak.effection=',player.bike.frontbreak.effection);
        writeln(savefile,'bike.frontbreak.maxeffection=',player.bike.frontbreak.maxeffection);
        writeln(savefile,'bike.frontbreak.hitpoints=',player.bike.frontbreak.hitpoints);
        writeln(savefile,'bike.frontbreak.maxhitpoints=',player.bike.frontbreak.maxhitpoints);
        writeln(savefile,'bike.frontbreak.price=',player.bike.frontbreak.price);
        writeln(savefile,'bike.frontbreak.veight=',player.bike.frontbreak.veight);
      end;
      
      writeln(savefile,'bike.backwheel.name=',player.bike.backwheel.name.Replace(' ','_'));
      writeln(savefile,'bike.backwheel.pressure=',player.bike.backwheel.pressure.ToString.Replace('.',','));
      writeln(savefile,'bike.backwheel.needles=',player.bike.backwheel.needles);
      writeln(savefile,'bike.backwheel.camerahit=',player.bike.backwheel.camerahit);
      writeln(savefile,'bike.backwheel.eight=',player.bike.backwheel.eight);
      writeln(savefile,'bike.backwheel.hitpoints=',player.bike.backwheel.hitpoints);
      writeln(savefile,'bike.backwheel.maxhitpoints=',player.bike.backwheel.maxhitpoints);
      writeln(savefile,'bike.backwheel.price=',player.bike.backwheel.price);
      writeln(savefile,'bike.backwheel.veight=',player.bike.backwheel.veight);
      
      writeln(savefile,'bike.frontwheel.name=',player.bike.frontwheel.name.Replace(' ','_'));
      writeln(savefile,'bike.frontwheel.pressure=',player.bike.frontwheel.pressure.ToString.Replace('.',','));
      writeln(savefile,'bike.frontwheel.needles=',player.bike.frontwheel.needles);
      writeln(savefile,'bike.frontwheel.camerahit=',player.bike.frontwheel.camerahit);
      writeln(savefile,'bike.frontwheel.eight=',player.bike.frontwheel.eight);
      writeln(savefile,'bike.frontwheel.hitpoints=',player.bike.frontwheel.hitpoints);
      writeln(savefile,'bike.frontwheel.maxhitpoints=',player.bike.frontwheel.maxhitpoints);
      writeln(savefile,'bike.frontwheel.price=',player.bike.frontwheel.price);
      writeln(savefile,'bike.frontwheel.veight=',player.bike.frontwheel.veight);
      writeln(savefile);
      if player.itemcount>0 then
      begin
        for var i:=0 to player.items.Length-1 do
        begin
          writeln(savefile,'pl_item.newitem');
          writeln(savefile,'pl_item.type=',player.items[i].tpsort);
          if player.items[i].tpsort=11 then
          begin
            writeln(savefile,'pl_item.name=',player.items[i].name);
          end;
          if (player.items[i].tpsort>=1) and (player.items[i].tpsort<=10) or (player.items[i].tpsort=12) then
          begin
            if (player.items[i].tpsort<>9) and (player.items[i].tpsort<>12) then
            if (player.items[i].tpsort<>8) then writeln(savefile,'pl_item.name=',player.items[i].name)
            else writeln(savefile,'pl_item.name=',player.items[i].cardname);
            if (player.items[i].tpsort=10) then
            begin
              writeln(savefile,'pl_item.quest=',player.items[i].questitem);
            end;
            if (player.items[i].tpsort=1) then
            begin
              writeln(savefile,'pl_item.material=',player.items[i].material);
            end;
            if (player.items[i].tpsort>=1) and (player.items[i].tpsort<=3) then
            begin
              writeln(savefile,'pl_item.suspensionflag=',player.items[i].suspensionflag);
            end;
            if (player.items[i].tpsort>=2) and (player.items[i].tpsort<=3) then
            begin
              writeln(savefile,'pl_item.block=',player.items[i].block);
              writeln(savefile,'pl_item.suspension=',player.items[i].suspension);
              writeln(savefile,'pl_item.travel=',player.items[i].travel);
            end;
            if (player.items[i].tpsort=4) then
            begin
              writeln(savefile,'pl_item.fores=',player.items[i].fores);
              writeln(savefile,'pl_item.count=',player.items[i].count);
            end;
            if ((player.items[i].tpsort>=5) and (player.items[i].tpsort<=6)) or (player.items[i].tpsort=8) then
            begin
              writeln(savefile,'pl_item.btype=',player.items[i].sort);
            end;
            if (player.items[i].tpsort=6) or (player.items[i].tpsort=8) then
            begin
              writeln(savefile,'pl_item.effection=',player.items[i].effection);
              writeln(savefile,'pl_item.maxeffection=',player.items[i].maxeffection);
            end;
            if (player.items[i].tpsort=7) then
            begin
              writeln(savefile,'pl_item.needles=',player.items[i].needles);
              writeln(savefile,'pl_item.camerahir=',player.items[i].camerahit);
              writeln(savefile,'pl_item.eight=',player.items[i].eight);
            end;
            if (player.items[i].tpsort>=1) and (player.items[i].tpsort<=7) then
            begin
              writeln(savefile,'pl_item.hitpoints=',player.items[i].hitpoints);
              writeln(savefile,'pl_item.maxhitpoints=',player.items[i].maxhitpoints);
            end;
            if ((player.items[i].tpsort<10) or (player.items[i].tpsort=12)) and (player.items[i].tpsort<>8) then writeln(savefile,'pl_item.price=',player.items[i].price);
            if (player.items[i].tpsort<>8) then writeln(savefile,'pl_item.veight=',player.items[i].veight);
          end;
          if (player.items[i].tpsort=11) then
          begin
            writeln(savefile,'pl_item.town=',player.items[i].town);
            writeln(savefile,'pl_item.timestart=',player.items[i].timestart.Ticks);
            writeln(savefile,'pl_item.timemax=',player.items[i].timemax.Ticks);
            writeln(savefile,'pl_item.price=',player.items[i].price);
            writeln(savefile,'pl_item.veight=',player.items[i].veight);
          end;
        end;
      end;
      writeln(savefile);
      for var i:=0 to map.Length-1 do
      begin
        if map[i].apartment.apartment then
        begin
          writeln(savefile,'apartment=',i);
          writeln(savefile,'ap_price=',map[i].apartment.price);
          if map[i].apartment.itemcount>0 then
          begin
            for var j:=0 to map[i].apartment.items.Length-1 do
            begin
              writeln(savefile,'ap_item.newitem');
              writeln(savefile,'ap_item.type=',map[i].apartment.items[j].tpsort);
              if (map[i].apartment.items[j].tpsort>=1) and (map[i].apartment.items[j].tpsort<=10) or (map[i].apartment.items[j].tpsort=12) then
              begin
                if (map[i].apartment.items[j].tpsort<>9) and (map[i].apartment.items[j].tpsort<>12) then
                if (map[i].apartment.items[j].tpsort<>8) then writeln(savefile,'ap_item.name=',map[i].apartment.items[j].name)
                else writeln(savefile,'ap_item.name=',map[i].apartment.items[j].cardname);
                if (map[i].apartment.items[j].tpsort=10) then
                begin
                  writeln(savefile,'ap_item.quest=',map[i].apartment.items[j].questitem);
                end;
                if (map[i].apartment.items[j].tpsort=1) then
                begin
                  writeln(savefile,'ap_item.material=',map[i].apartment.items[j].material);
                end;
                if (map[i].apartment.items[j].tpsort>=1) and (map[i].apartment.items[j].tpsort<=3) then
                begin
                  writeln(savefile,'ap_item.suspensionflag=',map[i].apartment.items[j].suspensionflag);
                end;
                if (map[i].apartment.items[j].tpsort>=2) and (map[i].apartment.items[j].tpsort<=3) then
                begin
                  writeln(savefile,'ap_item.block=',map[i].apartment.items[j].block);
                  writeln(savefile,'ap_item.suspension=',map[i].apartment.items[j].suspension);
                  writeln(savefile,'ap_item.travel=',map[i].apartment.items[j].travel);
                end;
                if (map[i].apartment.items[j].tpsort=4) then
                begin
                  writeln(savefile,'ap_item.fores=',map[i].apartment.items[j].fores);
                  writeln(savefile,'ap_item.count=',map[i].apartment.items[j].count);
                end;
                if ((map[i].apartment.items[j].tpsort>=5) and (map[i].apartment.items[j].tpsort<=6)) or (map[i].apartment.items[j].tpsort=8) then
                begin
                  writeln(savefile,'ap_item.btype=',map[i].apartment.items[j].sort);
                end;
                if (map[i].apartment.items[j].tpsort=6) or (map[i].apartment.items[j].tpsort=8) then
                begin
                  writeln(savefile,'ap_item.effection=',map[i].apartment.items[j].effection);
                  writeln(savefile,'ap_item.maxeffection=',map[i].apartment.items[j].maxeffection);
                end;
                if (map[i].apartment.items[j].tpsort=7) then
                begin
                  writeln(savefile,'ap_item.needles=',map[i].apartment.items[j].needles);
                  writeln(savefile,'ap_item.camerahir=',map[i].apartment.items[j].camerahit);
                  writeln(savefile,'ap_item.eight=',map[i].apartment.items[j].eight);
                end;
                if (map[i].apartment.items[j].tpsort>=1) and (map[i].apartment.items[j].tpsort<=7) then
                begin
                  writeln(savefile,'ap_item.hitpoints=',map[i].apartment.items[j].hitpoints);
                  writeln(savefile,'ap_item.maxhitpoints=',map[i].apartment.items[j].maxhitpoints);
                end;
                if ((map[i].apartment.items[j].tpsort<10) or (map[i].apartment.items[j].tpsort=12)) and (map[i].apartment.items[j].tpsort<>8) then writeln(savefile,'ap_item.price=',map[i].apartment.items[j].price);
                if (map[i].apartment.items[j].tpsort<>8) then writeln(savefile,'ap_item.veight=',map[i].apartment.items[j].veight);
              end;
              if (map[i].apartment.items[j].tpsort=11) then
              begin
                writeln(savefile,'ap_item.town=',map[i].apartment.items[j].town);
                writeln(savefile,'ap_item.timestart=',map[i].apartment.items[j].timestart.Ticks);
                writeln(savefile,'ap_item.timemax=',map[i].apartment.items[j].timemax.Ticks);
                writeln(savefile,'ap_item.price=',map[i].apartment.items[j].price);
                writeln(savefile,'ap_item.veight=',map[i].apartment.items[j].veight);
              end;
            end;
          end;
        end;
      end;
      writeln(savefile);
      for var i:=0 to quests.Length-1 do
      begin
        writeln(savefile,'quest@',i,'=',quests[i].stage);
      end;
      if not svg.autosave then LOG.Add('FINISH writing save.dat');
      close(savefile);
      if not svg.autosave then LOG.Add('Close save.dat');
      if not svg.autosave then LOG.Add('FINISH saving savegame');
    end else LOG.Add('E! Savegame was not found');
  end;
  
  function ValueToCaser(n: integer): integer;
  begin
    case n mod 100 of
      1,21,31,41,51,61,71,81,91: Result:=0;
      2..4,22..24,32..34,42..44,52..54,62..64,72..74,82..84,92..94: Result:=1;
      0,5..20,25..30,35..40,45..50,55..60,65..70,75..80,85..90,95..99: Result:=2;
    end;
  end;
  
  function ValueToCaser(n: uint64): integer;
  begin
    case n mod 100 of
      1,21,31,41,51,61,71,81,91: Result:=0;
      2..4,22..24,32..34,42..44,52..54,62..64,72..74,82..84,92..94: Result:=1;
      0,5..20,25..30,35..40,45..50,55..60,65..70,75..80,85..90,95..99: Result:=2;
    end;
  end;
  
  ///Возвращает название валюты в нужном падеже
  function rub(n: uint64): string := inter[2].face[ValueToCaser(n)];
  
  ///Возвращает название валюты в нужном падеже
  function rub(n: integer): string := inter[2].face[ValueToCaser(n)];
  
  function AllVeight: integer;
  begin
    if player.itemcount>0 then
    for var i:=0 to player.items.length-1 do
      Result+=player.items[i].veight;
  end;
  
  function AllVeight(params it1: array of integer): integer;
  begin
    Result:=AllVeight;
    for var i:=0 to it1.length-1 do Result+=it1[i];
  end;
  
  function BikeVeight: integer;
  begin
    Result+=player.bike.frame.veight;
    Result+=player.bike.fork.veight;
    if (player.bike.bsusp.flag) and (player.bike.frame.suspensionflag) then Result+=player.bike.bsusp.veight;
    Result+=player.bike.transmission.veight;
    Result+=player.bike.rudder.veight;
    Result+=player.bike.backwheel.veight;
    Result+=player.bike.frontwheel.veight;
    if player.bike.backbreak.flag then Result+=player.bike.backbreak.veight;
    if player.bike.frontbreak.flag then Result+=player.bike.frontbreak.veight;
  end;
  
  procedure AddItem(it: TItem);
  begin
    if player.itemcount>0 then
    begin
      SetLength(player.items,player.itemcount+1);
      player.itemcount+=1;
      player.items[player.itemcount-1]:=it;
    end
    else
    begin
      SetLength(player.items,1);
      player.itemcount:=1;
      player.items[player.itemcount-1]:=it;
    end;
  end;
  
  ///Добавляет предмет в квартиру города st
  procedure AddItem(st: TMap; it: TItem);
  begin
    if st.apartment.itemcount>0 then
    begin
      SetLength(st.apartment.items,st.apartment.itemcount+1);
      st.apartment.itemcount+=1;
      st.apartment.items[st.apartment.itemcount-1]:=it;
    end
    else
    begin
      SetLength(st.apartment.items,1);
      st.apartment.itemcount:=1;
      st.apartment.items[st.apartment.itemcount-1]:=it;
    end;
  end;
  
  ///Добавляет предмет в квартиру города st
  procedure ap_AddItem(st: integer; it: TItem);
  begin
    if map[st].apartment.itemcount>0 then
    begin
      SetLength(map[st].apartment.items,map[st].apartment.itemcount+1);
      map[st].apartment.itemcount+=1;
      map[st].apartment.items[map[st].apartment.itemcount-1]:=it;
    end
    else
    begin
      SetLength(map[st].apartment.items,1);
      map[st].apartment.itemcount:=1;
      map[st].apartment.items[map[st].apartment.itemcount-1]:=it;
    end;
  end;
  
  procedure RemoveItem(a: integer);
  begin
    if (player.itemcount>a) and (player.itemcount>0) then
    begin
      for var i:=a+1 to player.itemcount-1 do
        player.items[i-1]:=player.items[i];
      SetLength(player.items,player.itemcount-1);
      player.itemcount-=1;
    end;
  end;
  
  procedure RemoveItem(st: TMap; a: integer);
  begin
    if st.apartment.apartment then
    if (st.apartment.itemcount>a) and (st.apartment.itemcount>0) then
    begin
      for var i:=a+1 to st.apartment.itemcount-1 do
        st.apartment.items[i-1]:=st.apartment.items[i];
      SetLength(st.apartment.items,st.apartment.itemcount-1);
      st.apartment.itemcount-=1;
    end;
  end;
  
  procedure ap_RemoveItem(st: integer; a: integer);
  begin
    if map[st].apartment.apartment then
    if (map[st].apartment.itemcount>a) and (map[st].apartment.itemcount>0) then
    begin
      for var i:=a+1 to map[st].apartment.itemcount-1 do
      begin
        map[st].apartment.items[i-1]:=map[st].apartment.items[i];
      end;
      SetLength(map[st].apartment.items,map[st].apartment.itemcount-1);
      map[st].apartment.itemcount-=1;
    end;
  end;
  
  ///Возвращает true если в рюкзаке есть запасная камера
  function CameraAvailable: boolean;
  begin
    Result:=False;
    if player.itemcount>0 then
    for var i:=0 to player.items.Length-1 do
      if player.items[i].tpsort=9 then Result:=true;
  end;
  
  ///Возвращает количество запасных камер
  function CameraCount: integer;
  begin
    var a: integer = 0;
    if player.itemcount>0 then
    for var i:=0 to player.items.Length-1 do
      if player.items[i].tpsort=9 then a+=1;
    Result:=a;
  end;
  
  ///Возвращает массу всех запасных камер
  function CameraVeight: integer;
  begin
    var a: integer = 0;
    if player.itemcount>0 then
    for var i:=0 to player.items.Length-1 do
      if player.items[i].tpsort=9 then a+=player.items[i].veight;
    Result:=a;
  end;
  
  ///Возвращает true если в рюкзаке есть наборы спиц
  function NeedleAvailable: boolean;
  begin
    Result:=False;
    if player.itemcount>0 then
    for var i:=0 to player.items.Length-1 do
      if player.items[i].tpsort=12 then Result:=true;
  end;
  
  ///Возвращает количество наборов спиц
  function NeedleCount: integer;
  begin
    if player.itemcount>0 then
    for var i:=0 to player.items.Length-1 do
      if player.items[i].tpsort=12 then Result+=1;
  end;
  
  ///Возвращает массу всех наборов спиц
  function NeedleVeight: integer;
  begin
    if player.itemcount>0 then
    for var i:=0 to player.items.Length-1 do
      if player.items[i].tpsort=12 then Result+=player.items[i].veight;
  end;
  
  ///Возвращает наличие указанных предметов в инвентаре
  function IsQuestItem(params ints: array of integer): boolean;
  begin
    var ts := new boolean[ints.Length];
    if player.itemcount>0 then
      for var i:=0 to player.items.Length-1 do
        if (player.items[i].tpsort=10) then
          for var j:=0 to ts.Length-1 do
            if player.items[i].questitem=ints[j] then ts[j]:=true;
    Result:=True;
    if player.itemcount>0 then
      for var i:=0 to ts.length-1 do
        if not ts[i] then Result:=False;
  end;
  
  ///Отвечает за увеличение уровня игрока
  procedure NewLevel;
  var
    _nw: record
      first: boolean = true;
      output: integer;
      status: boolean;
      input: string;
      check: record
        output: integer;
        status: boolean;
        input: string;
      end;
    end;
  begin
    while player.experience>=(balance.levelup.expk*player.level)+balance.levelup.expmin do
    if player.level<balance.levelup.expmaxlevel then
    begin
      _nw.status:=true;
      while _nw.status do
      begin
        KTX.resize;
        outnull(_nw.output, _nw.input);
        
        Console.SetCursorPosition(1,1);wrif(_nw.first,inter[17].face[0],'! ');
        write(Rome(player.level));write(' -> ');
        write(Rome(player.level+1));
        
        Console.SetCursorPosition(1,3);wrif(_nw.first,inter[17].face[1],': ');
        
        
        Console.SetCursorPosition(1,5);write('(1) ');
        Console.ForegroundColor:=consolecolor.DarkGreen;write(inter[17].face[2]);
        Console.ForegroundColor:=consolecolor.Black;
        Console.SetCursorPosition(5,6);write(inter[17].face[5],': ');
        Console.ForegroundColor:=consolecolor.DarkGreen;
        write(player.maxveight/1000,' ',inter[0].face[10]);
        Console.ForegroundColor:=consolecolor.Black;
        Console.SetCursorPosition(5,7);write(inter[17].face[6],': ');
        Console.ForegroundColor:=consolecolor.DarkGreen;
        write((player.maxveight+balance.levelup.plusmveight)/1000,' ',inter[0].face[10]);
        Console.ForegroundColor:=consolecolor.Black;
        
        
        Console.SetCursorPosition(1,9);write('(2) ');
        Console.ForegroundColor:=consolecolor.DarkBlue;write(inter[17].face[3]);
        Console.ForegroundColor:=consolecolor.Black;
        Console.SetCursorPosition(5,10);write(inter[17].face[5],': ');
        Console.ForegroundColor:=consolecolor.DarkBlue;
        write(player.maxwater/1000,' ',inter[0].face[13]);
        Console.ForegroundColor:=consolecolor.Black;
        Console.SetCursorPosition(5,11);write(inter[17].face[6],': ');
        Console.ForegroundColor:=consolecolor.DarkBlue;
        write((player.maxwater+balance.levelup.plusmwater)/1000,' ',inter[0].face[13]);
        Console.ForegroundColor:=consolecolor.Black;
        
        
        Console.SetCursorPosition(1,13);write('(3) ');
        Console.ForegroundColor:=consolecolor.DarkYellow;write(inter[17].face[4]);
        Console.ForegroundColor:=consolecolor.Black;
        Console.SetCursorPosition(5,14);write(inter[17].face[5],': ');
        Console.ForegroundColor:=consolecolor.DarkYellow;
        write(player.maxfood/1000,' ',inter[0].face[10]);
        Console.ForegroundColor:=consolecolor.Black;
        Console.SetCursorPosition(5,15);write(inter[17].face[6],': ');
        Console.ForegroundColor:=consolecolor.DarkYellow;
        write((player.maxfood+balance.levelup.plusmfood)/1000,' ',inter[0].face[10]);
        Console.ForegroundColor:=consolecolor.Black;
        
        
        Console.SetCursorPosition(1,17);write('(4) ');
        Console.ForegroundColor:=consolecolor.Red;write(inter[17].face[7]);
        Console.ForegroundColor:=consolecolor.Black;
        Console.SetCursorPosition(5,18);write(inter[17].face[8],': ');
        Console.ForegroundColor:=consolecolor.Red;
        write(player.maxenergy/1000,' ',inter[0].face[8]);
        Console.ForegroundColor:=consolecolor.Black;
        Console.SetCursorPosition(5,19);write(inter[17].face[9],': ');
        Console.ForegroundColor:=consolecolor.Red;
        write((player.maxenergy+balance.levelup.plusmenergy)/1000,' ',inter[0].face[8]);
        Console.ForegroundColor:=consolecolor.Black;
        
        KTX.read_1;
        while (_nw.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx)) do
        begin
          Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
          readln(_nw.input);
        end;
        KTX.read_0;
        
        if _nw.input='1' then _nw.output:=1;
        
        if _nw.input='2' then _nw.output:=2;
        
        if _nw.input='3' then _nw.output:=3;
        
        if _nw.input='4' then _nw.output:=4;
        
        if _nw.output>0 then
        begin
          _nw.check.status:=true;
          while _nw.check.status do
          begin
            KTX.resize;
            outnull(_nw.check.output, _nw.check.input);
            
            Console.SetCursorPosition(1,1);write(inter[17].face[10],' ');
            case _nw.output of
              1: Console.ForegroundColor:=consolecolor.DarkGreen;
              2: Console.ForegroundColor:=consolecolor.DarkBlue;
              3: Console.ForegroundColor:=consolecolor.DarkYellow;
              4: Console.ForegroundColor:=consolecolor.Red;
            end;
            case _nw.output of
              1..4: write(inter[17].face[10+_nw.output]);
            end;
            Console.ForegroundColor:=consolecolor.Black;write('?');
            Console.SetCursorPosition(1,2);write(inter[17].face[15],'!');
            
            Console.SetCursorPosition(1,KTX.maxy-5);write('(1) ',inter[17].face[16]);
            Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[17].face[17]);
            
            KTX.read_1;
            while (_nw.check.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx)) do
            begin
              Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
              readln(_nw.check.input);
            end;
            KTX.read_0;
            
            if _nw.check.input='0' then _nw.check.output:=0;
            
            if _nw.check.input='1' then _nw.check.output:=1;
            
            if _nw.check.output=0 then _nw.check.status:=false;
            
            if _nw.check.output=1 then
            begin
              if _nw.output=1 then
              begin
                player.maxveight+=balance.levelup.plusmveight;
              end;
              if _nw.output=2 then
              begin
                player.maxwater+=balance.levelup.plusmwater;
              end;
              if _nw.output=3 then
              begin
                player.maxfood+=balance.levelup.plusmfood;
              end;
              if _nw.output=4 then
              begin
                player.maxenergy+=balance.levelup.plusmenergy;
                player.energy+=balance.levelup.plusmenergy;
              end;
              player.experience-=balance.levelup.expmin+(balance.levelup.expk*player.level);
              player.level+=1;
              _nw.check.status:=false;
              _nw.status:=false;
              if svg.autosave then save;
            end;
          end;
        end;
        
        _nw.first:=false;
      end;
    end
    else
    begin
      player.experience-=(player.level*balance.levelup.expk)+balance.levelup.expmin;
      player.level+=1;
      if svg.autosave then save;
    end;
  end;

  procedure ReadQuest(var s: string);
  begin
    KTX.read_1;
    while (s='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx)) do
    begin
      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
      readln(s);
    end;
    KTX.read_0;
  end;
  
  procedure GetCamera(n: integer);
  begin
    var sw: TItem;
    sw.tpsort:=9;
    sw.veight:=balance.cameraveight;
    loop n do AddItem(sw);
  end;
  
  procedure GetCamera := GetCamera(1);
  
  procedure GetNeedleBox(n: integer);
  begin
    var sw: TItem;
    sw.tpsort:=12;
    sw.veight:=balance.needleveight;
    loop n do AddItem(sw);
  end;
  
  procedure GetNeedleBox := GetNeedleBox(1);
  
  ///Отвечает за все изменения в игровом мире:
  ///  Квесты, экономика, поднятие уровня
  procedure CHANGINGS;
  
  var
    pr_ch: record
      input: string;
      output: integer;
      status: boolean;
      first: boolean = true;
    end;
    
  begin
    if player.experience>=(balance.levelup.expk*player.level)+balance.levelup.expmin then NewLevel;
    {$region REECONOMIC}
    if (economic.last<>player.time.Day) and (player.time.DayOfWeek = DayOfWeek.Friday) and (quests[0].stage=-1) then
    begin
      ReEco;economic.last:=player.time.Day;
      if PABCSystem.Random<=balance.economic.infochance then
      begin
        pr_ch.status:=true;
        while pr_ch.status do
        begin
          Console.Clear;KTX.resize;
          outnull(pr_ch.output, pr_ch.input);
          
          var pr_ch_price:=Round(balance.economic.infoprice+(balance.economic.infok*player.level));
          if pr_ch.first then
          begin
            Console.SetCursorPosition(1,1);
            wrdelay(inter[15].face[0]);sleep(1000);
            Console.SetCursorPosition(1,2);
            wrdelay(inter[15].face[1]);
            Console.SetCursorPosition(1,3);
            wrdelay(inter[15].face[2],' ',pr_ch_price.ToString,' ',rub(pr_ch_price).ToString,' ',inter[15].face[3]);sleep(500);
            Console.SetCursorPosition(1,5);
            wrdelay(inter[15].face[4],'?');
          end
          else
          begin
            Console.SetCursorPosition(1,1);
            write(inter[15].face[0]);
            Console.SetCursorPosition(1,2);
            write(inter[15].face[1]);
            Console.SetCursorPosition(1,3);
            write(inter[15].face[2],' ',pr_ch_price.ToString,' ',rub(pr_ch_price).ToString,' ',inter[15].face[3]);sleep(500);
            Console.SetCursorPosition(1,5);
            write(inter[15].face[4],'?');
          end;
          if player.money>=pr_ch_price then
          begin
            Console.SetCursorPosition(1,KTX.maxy-5);write('(1) ',inter[15].face[5]);
          end
          else
          begin
            Console.ForegroundColor:=consolecolor.Gray;
            Console.SetCursorPosition(1,KTX.maxy-5);write('(1) ',inter[15].face[5]);
            Console.ForegroundColor:=consolecolor.Red;
            write(' (',inter[15].face[7],')');
            Console.ForegroundColor:=consolecolor.Black;
          end;
          Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[15].face[6]);
          
          KTX.read_1;
          while (pr_ch.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
          begin
            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
            readln(pr_ch.input);
          end;
          KTX.read_0;
          
          //if pr_ch.input.Left(1)='/' then con(pr_ch.input);
          if pr_ch.input='0' then pr_ch.output:=0;
          if (pr_ch.input='1') and (player.money>=pr_ch_price) then pr_ch.output:=1;
          
          if pr_ch.output=0 then pr_ch.status:=false;
          if pr_ch.output=1 then
          begin
            player.money-=pr_ch_price;
            var _0input: string;
            var _0output: integer;
            var _0status: boolean;
            var _0first: boolean = true;
            _0status:=true;
            var _00minimum: real = 999999;
            var _00id: integer;
            
            for var i:=0 to map.Length-1 do
            begin
              if _00minimum>map[i].kprice then
              begin
                _00minimum:=map[i].kprice;
                _00id:=i;
              end;
            end;
            while _0status do
            begin
              Console.Clear;KTX.resize;
              outnull(_0output, _0input);
              
              if _0first then
              begin
                Console.SetCursorPosition(1,1);wrdelay(inter[16].face[0],' ',types[map[_00id].sort],' ',map[_00id].name);
              end
              else
              begin
                Console.SetCursorPosition(1,1);write(inter[16].face[0],' ',types[map[_00id].sort],' ',map[_00id].name);
              end;
              Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',inter[16].face[1]);
              
              KTX.read_1;
              while (_0input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
              begin
                Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                readln(_0input);
              end;
              KTX.read_0;
              
              if _0input='1' then _0output:=1;
              if _0output=1 then
              begin
                _0status:=false;
                if svg.autosave then save;
              end;
              
              _0first:=false;
            end;
            pr_ch.status:=false
          end;
          pr_ch.first:=false;
        end;
        KTX.resize;
      end;
    end;{$endregion}
    
    {$region Quest Zero (Start)}
    
    if quests[0].stage>=0 then
    begin
      if quests[0].stage=0 then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[0]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[1]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=1;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if quests[0].stage=1 then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[2]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[3]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=2;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if quests[0].stage=2 then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[4]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          ir:=SizeSeparate(interquest[0].value[5]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-5);write('(1) ',interquest[0].value[6]);
          Console.SetCursorPosition(1,KTX.maxy-4);write('(2) ',interquest[0].value[7]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.input='2' then current.output:=2;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=10;
            save;
          end;
          if current.output=2 then
          begin
            current.status:=false;
            quests[0].stage:=3;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if quests[0].stage=3 then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[8]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[9]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=4;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if quests[0].stage=4 then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[10]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[11]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=11;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if quests[0].stage=10 then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[12]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[13]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=11;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if quests[0].stage=11 then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[14]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[15]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=12;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if quests[0].stage=12 then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[16]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          ir:=SizeSeparate(interquest[0].value[17]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[18]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=13;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if quests[0].stage=13 then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[19]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[20]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=14;
            quests[1].stage:=1;
            GetCamera;
            player.money+=5000;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if (quests[0].stage=14) and (player.position=1) then
      begin
        if player.bike.backwheel.camerahit then player.bike.backwheel.camerahit:=false;
        if player.bike.frontwheel.camerahit then player.bike.frontwheel.camerahit:=false;
        if player.bike.backwheel.needles <> balance.bk.wheel.needle.maximum then player.bike.backwheel.needles := balance.bk.wheel.needle.maximum;
        if player.bike.frontwheel.needles <> balance.bk.wheel.needle.maximum then player.bike.frontwheel.needles := balance.bk.wheel.needle.maximum;
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[21]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[22]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=15;
            player.experience += 50;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if (quests[0].stage=15) and (player.position<>1) then quests[0].stage:=16;
      
      if (quests[0].stage=15) and (player.energy=player.maxenergy) and (player.position=1) then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[23]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[24]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=16;
            player.experience += 50;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if (quests[0].stage=16) and (player.position=2) then
      begin
        if player.bike.backwheel.camerahit then player.bike.backwheel.camerahit:=false;
        if player.bike.frontwheel.camerahit then player.bike.frontwheel.camerahit:=false;
        if player.bike.backwheel.needles <> balance.bk.wheel.needle.maximum then player.bike.backwheel.needles := balance.bk.wheel.needle.maximum;
        if player.bike.frontwheel.needles <> balance.bk.wheel.needle.maximum then player.bike.frontwheel.needles := balance.bk.wheel.needle.maximum;
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[25]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[26]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=17;
            player.experience += 50;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if (quests[0].stage=17) and (player.position<>2) then quests[0].stage:=18;
      
      
      if (quests[0].stage=17) and (player.energy=player.maxenergy) and (player.position=2) then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[27]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[28]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=18;
            player.experience += 50;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if (quests[0].stage=18) and (player.position=3) then
      begin
        player.bike.backwheel.camerahit := true;
        if player.bike.frontwheel.camerahit then player.bike.frontwheel.camerahit:=false;
        if player.bike.backwheel.needles <> balance.bk.wheel.needle.maximum then player.bike.backwheel.needles := balance.bk.wheel.needle.maximum;
        if player.bike.frontwheel.needles <> balance.bk.wheel.needle.maximum then player.bike.frontwheel.needles := balance.bk.wheel.needle.maximum;
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[29]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[30]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=19;
            player.experience += 50;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if (quests[0].stage=19) and (not player.bike.backwheel.camerahit) then quests[0].stage:=20;
      
      if (quests[0].stage=19) and (player.bike.backwheel.camerahit) then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[31]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[32]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=20;
            player.experience += 50;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
      
      if (quests[0].stage=20) and (player.position<>3) then quests[0].stage:=21;
      
      if (quests[0].stage=20) and (player.energy=player.maxenergy) and (player.position=3) then
      begin
        var current:=new Qst;
        while current.status do
        begin
          current.OutNil;KTX.resize;
          
          Console.SetCursorPosition(0,1);
          var ir:=SizeSeparate(interquest[0].value[33]);
          for var i:=0 to ir.length-1 do
          begin
            wrif(current.first,ir[i]);writeln;
          end;
          
          Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',interquest[0].value[34]);
          
          ReadQuest(current.input);
          
          if current.input='1' then current.output:=1;
          if current.output=1 then
          begin
            current.status:=false;
            quests[0].stage:=21;
            player.experience += 50;
            save;
          end;
          
          if current.first then current.first:=false;
        end;
      end;
    end;
    {$endregion}
    
    Console.Clear;
    KTX.resize;
  end;
  
  ///Генерирует верхний интерфейс
  procedure upface(f: boolean);
  begin
    if f then changings;
    Console.SetCursorPosition(0,0);
    
    var max:=2+player.nickname.Length;
    if svg.levelvisible then max+=1+Rome(player.level).Length;
    
    var _Str: string=' ';
    if svg.levelvisible then _Str+=Rome(player.level)+' ';
    _Str+=player.nickname+' ';
    
    var min:=Round((player.health/player.maxhealth)*max);
    
    Console.BackgroundColor:=consolecolor.Cyan;
    Console.ForegroundColor:=consolecolor.Black;
    for var i:=1 to min do
    begin
      write(_Str[i]);
    end;
    Console.BackgroundColor:=consolecolor.Red;
    Console.ForegroundColor:=consolecolor.White;
    for var i:=min+1 to max do
    begin
      write(_Str[i]);
    end;
    Console.ForegroundColor:=consolecolor.Black;
    
    Console.BackgroundColor:=consolecolor.Green;
    write(' ');write(dgt(player.money),' ',rub(player.money));write(' ');
    Console.BackgroundColor:=consolecolor.Yellow;
    write(' ');write(round(player.food/player.maxfood*100),'%');write(' ');
    Console.BackgroundColor:=consolecolor.Cyan;
    write(' ');write(round(player.water/player.maxwater*100),'%');write(' ');
    Console.BackgroundColor:=consolecolor.Red;
    Console.ForegroundColor:=consolecolor.Yellow;
    write(' ');write(round(player.energy/player.maxenergy*100),'%');write(' ');
    Console.ForegroundColor:=consolecolor.Black;
    Console.BackgroundColor:=consolecolor.Gray;
    while console.CursorLeft<=KTX.maxx-2 do write(' ');
    var str: string;
    case map[player.position].sort of
      0: str:=' '+types[map[player.position].sort].Left(1).ToLower+'.';
      1: str:=' '+types[map[player.position].sort].Left(1).ToLower+'.';
      2: str:=' '+types[map[player.position].sort].Left(2).ToLower+'.';
    end;
    
    str:=str+' '+map[player.position].name+' ';
    if svg.time_type=0 then
    begin
      str:=str+player.time.Day;
      str:=str+' '+month[player.time.Month-1]+' '+player.time.Year+' ';
    end;
    if svg.time_type=1 then
    begin
      str:=str+player.time.Day;
      str:=str+' '+month[player.time.Month-1].Left(3)+' '+player.time.Year+' ';
    end;
    if svg.time_type=2 then
    begin
      if player.time.Day<10 then str:=str+'0'+player.time.Day+'.'
      else str:=str+player.time.Day+'.';
      if player.time.Month<10 then str:=str+'0'+player.time.Month+'.'
      else str:=str+player.time.Month+'.';
      str:=str+player.time.Year+' ';
    end;
    str:=str+player.time.Hour;
    str:=str+':';
    if player.time.Minute < 10 then str:=str+'0'+player.time.Minute
    else str:=str+player.time.Minute;
    str:=str+' ';
    Console.SetCursorPosition(KTX.maxx-str.Length,0);write(str);
    
    
    Console.BackgroundColor:=consolecolor.White;
  end;
  
  procedure upface;
  begin
    upface(true);
  end;
  
  ///Возвращает расстояние между лвумя городами
  function distance(map1, map2: TMap): real := distance(map1.x,map1.y,map2.x,map2.y);

type
  EnergyCosts = static class
    public static function GetCBFrame(c: char): real;
    begin
      if c = 'g' then
      case player.bike.frame.material of
        0: Result += balance.bk.frame.material.steel.roadg;
        1: Result += balance.bk.frame.material.steelplus.roadg;
        2: Result += balance.bk.frame.material.alu6061.roadg;
        3: Result += balance.bk.frame.material.alu7075.roadg;
        4: Result += balance.bk.frame.material.titan.roadg;
      end;
      if c = 'b' then
      case player.bike.frame.material of
        0: Result += balance.bk.frame.material.steel.roadb;
        1: Result += balance.bk.frame.material.steelplus.roadb;
        2: Result += balance.bk.frame.material.alu6061.roadb;
        3: Result += balance.bk.frame.material.alu7075.roadb;
        4: Result += balance.bk.frame.material.titan.roadb;
      end;
      if player.bike.frame.hitpoints/player.bike.frame.maxhitpoints >= balance.bk.frame.hp.average then
      begin
        if c='g' then Result += (balance.bk.frame.hp.maximum*((player.bike.frame.hitpoints/player.bike.frame.maxhitpoints)-balance.bk.frame.hp.average));
        if c='b' then Result += (balance.bk.frame.hp.maximum*((player.bike.frame.hitpoints/player.bike.frame.maxhitpoints)-balance.bk.frame.hp.average));
      end
      else
      begin
        if c='g' then Result += (balance.bk.frame.hp.minimal*(balance.bk.frame.hp.average-(player.bike.frame.hitpoints/player.bike.frame.maxhitpoints)));
        if c='b' then Result += (balance.bk.frame.hp.minimal*(balance.bk.frame.hp.average-(player.bike.frame.hitpoints/player.bike.frame.maxhitpoints)));
      end;
    end;
    public static function GetCBFork(c: char): real;
    begin
      if player.bike.fork.suspensionflag then
      begin
        if c='g' then Result += balance.bk.fork.suspension.flag1.roadg;
        if c='b' then Result += balance.bk.fork.suspension.flag1.roadb;
      end
      else
      begin
        if c='g' then Result += balance.bk.fork.suspension.flag0.roadg;
        if c='b' then Result += balance.bk.fork.suspension.flag0.roadb;
      end;
      if player.bike.fork.suspensionflag then
      begin
        if player.bike.fork.blocks then
        begin
          if c='g' then Result += balance.bk.fork.block.roadg;
          if c='b' then Result += balance.bk.fork.block.roadb;
        end;
        if c='g' then
        case player.bike.fork.suspension of
          0: Result += balance.bk.fork.suspension.steel.roadg;
          1: Result += balance.bk.fork.suspension.steelplus.roadg;
          2: Result += balance.bk.fork.suspension.pneumatic.roadg;
          3: Result += balance.bk.fork.suspension.oil.roadg;
          4: Result += balance.bk.fork.suspension.oilplus.roadg;
          5: Result += balance.bk.fork.suspension.pneumaticplus.roadg;
        end;
        if (not (player.bike.fork.blocks)) then
        begin
          if c='b' then
          case player.bike.fork.suspension of
            0: Result += balance.bk.fork.suspension.steel.roadb;
            1: Result += balance.bk.fork.suspension.steelplus.roadb;
            2: Result += balance.bk.fork.suspension.pneumatic.roadb;
            3: Result += balance.bk.fork.suspension.oil.roadb;
            4: Result += balance.bk.fork.suspension.oilplus.roadb;
            5: Result += balance.bk.fork.suspension.pneumaticplus.roadb;
          end;
          if (player.bike.fork.travel>0) and (player.bike.fork.travel<balance.bk.fork.susptravel1.max) then
          begin
            if c='b' then Result += player.bike.fork.travel*balance.bk.fork.susptravel1.value;
          end;
          if (player.bike.fork.travel>=balance.bk.fork.susptravel2.min) and (player.bike.fork.travel<balance.bk.fork.susptravel2.max) then
          begin
            if c='b' then Result += (((player.bike.fork.travel-balance.bk.fork.susptravel2.min)*balance.bk.fork.susptravel2.value)+(balance.bk.fork.susptravel1.max*balance.bk.fork.susptravel1.value));
          end;
          if (player.bike.fork.travel>=balance.bk.fork.susptravel3.min){ and (player.bike.fork.travel<=balance.bk.fork.susptravel3.max)} then
          begin
            if c='b' then Result += (((player.bike.fork.travel-balance.bk.fork.susptravel3.min)*balance.bk.fork.susptravel3.value)+(balance.bk.fork.susptravel1.max*balance.bk.fork.susptravel1.value)+((balance.bk.fork.susptravel2.max-balance.bk.fork.susptravel2.min)*balance.bk.fork.susptravel2.value));
          end;
        end;
      end;
      if player.bike.fork.hitpoints/player.bike.fork.maxhitpoints>=balance.bk.fork.hp.average then
      begin
        if c='g' then Result += (balance.bk.fork.hp.maximum*((player.bike.fork.hitpoints/player.bike.fork.maxhitpoints)-balance.bk.fork.hp.average));
        if c='b' then Result += (balance.bk.fork.hp.maximum*((player.bike.fork.hitpoints/player.bike.fork.maxhitpoints)-balance.bk.fork.hp.average));
      end
      else
      begin
        if c='g' then Result += (balance.bk.fork.hp.minimal*(balance.bk.fork.hp.average-(player.bike.fork.hitpoints/player.bike.fork.maxhitpoints)));
        if c='b' then Result += (balance.bk.fork.hp.minimal*(balance.bk.fork.hp.average-(player.bike.fork.hitpoints/player.bike.fork.maxhitpoints)));
      end;
    end;
    public static function GetCBBack(c: char): real;
    begin
      if (player.bike.bsusp.flag) and (player.bike.frame.suspensionflag) and (player.bike.bsusp.hitpoints > balance.criticalhp) then
      begin
        if c='g' then Result += balance.bk.bsusp.suspension.flag1.roadg;
        if c='b' then Result += balance.bk.bsusp.suspension.flag1.roadb;
      end
      else
      begin
        if c='g' then Result += balance.bk.bsusp.suspension.flag0.roadg;
        if c='b' then Result += balance.bk.bsusp.suspension.flag0.roadb;
      end;
      if player.bike.frame.suspensionflag then
      if (player.bike.bsusp.flag) and (player.bike.bsusp.hitpoints > balance.criticalhp) then
      begin
        if player.bike.bsusp.blocks then
        begin
          if c='g' then Result += balance.bk.bsusp.block.roadg;
          if c='b' then Result += balance.bk.bsusp.block.roadb;
        end;
        if c='g' then
        case player.bike.bsusp.suspension of
          0: Result += balance.bk.bsusp.suspension.steel.roadg;
          1: Result += balance.bk.bsusp.suspension.steelplus.roadg;
          2: Result += balance.bk.bsusp.suspension.pneumatic.roadg;
          3: Result += balance.bk.bsusp.suspension.oil.roadg;
          4: Result += balance.bk.bsusp.suspension.pneumaticplus.roadg;
        end;
        if (not (player.bike.bsusp.blocks)) then
        begin
          if c='b' then
          case player.bike.bsusp.suspension of
            0: Result += balance.bk.bsusp.suspension.steel.roadb;
            1: Result += balance.bk.bsusp.suspension.steelplus.roadb;
            2: Result += balance.bk.bsusp.suspension.pneumatic.roadb;
            3: Result += balance.bk.bsusp.suspension.oil.roadb;
            4: Result += balance.bk.bsusp.suspension.pneumaticplus.roadb;
          end;
          if (player.bike.bsusp.travel>0) and (player.bike.bsusp.travel<balance.bk.bsusp.susptravel1.max) then
          begin
            if c='b' then Result += player.bike.bsusp.travel*balance.bk.bsusp.susptravel1.value;
          end;
          if (player.bike.bsusp.travel>=balance.bk.bsusp.susptravel2.min) and (player.bike.bsusp.travel<balance.bk.bsusp.susptravel2.max) then
          begin
            if c='b' then Result += ((player.bike.bsusp.travel-balance.bk.bsusp.susptravel2.min)*balance.bk.bsusp.susptravel2.value)+(balance.bk.bsusp.susptravel1.max*balance.bk.bsusp.susptravel1.value);
          end;
          if (player.bike.bsusp.travel>=balance.bk.bsusp.susptravel3.min) then
          begin
            if c='b' then Result += ((player.bike.bsusp.travel-balance.bk.bsusp.susptravel3.min)*balance.bk.bsusp.susptravel3.value)+(balance.bk.bsusp.susptravel1.max*balance.bk.bsusp.susptravel1.value)+((balance.bk.bsusp.susptravel2.max-balance.bk.bsusp.susptravel2.min)*balance.bk.bsusp.susptravel2.value);
          end;
        end;
        if player.bike.bsusp.hitpoints/player.bike.bsusp.maxhitpoints>=balance.bk.bsusp.hp.average then
        begin
          if c='g' then Result += balance.bk.bsusp.hp.maximum*((player.bike.bsusp.hitpoints/player.bike.bsusp.maxhitpoints)-balance.bk.bsusp.hp.average);
          if c='b' then Result += balance.bk.bsusp.hp.maximum*((player.bike.bsusp.hitpoints/player.bike.bsusp.maxhitpoints)-balance.bk.bsusp.hp.average);
        end
        else
        begin
          if c='g' then Result += balance.bk.bsusp.hp.minimal*(balance.bk.bsusp.hp.average-(player.bike.bsusp.hitpoints/player.bike.bsusp.maxhitpoints));
          if c='b' then Result += balance.bk.bsusp.hp.minimal*(balance.bk.bsusp.hp.average-(player.bike.bsusp.hitpoints/player.bike.bsusp.maxhitpoints));
        end;
      end;
    end;
    public static function GetCBTransmission(c: char): real;
    begin
      if player.bike.transmission.count<6 then
      begin
        if c='g' then Result += balance.bk.transmission.backs0.roadG;
        if c='b' then Result += balance.bk.transmission.backs0.roadb;
      end;
      if player.bike.transmission.count>=6 then
      begin
        if c='g' then Result += balance.bk.transmission.backs1.roadG;
        if c='b' then Result += balance.bk.transmission.backs1.roadb;
      end;
      if player.bike.transmission.fores then
      begin
        if c='g' then Result += balance.bk.transmission.fores1.roadG;
        if c='b' then Result += balance.bk.transmission.fores1.roadB;
      end
      else
      begin
        if c='g' then Result += balance.bk.transmission.fores0.roadG;
        if c='b' then Result += balance.bk.transmission.fores0.roadB;
      end;
      if player.bike.transmission.hitpoints/player.bike.transmission.maxhitpoints>=balance.bk.transmission.hp.average then
      begin
        if c='g' then Result += balance.bk.transmission.hp.maximum*((player.bike.transmission.hitpoints/player.bike.transmission.maxhitpoints)-balance.bk.transmission.hp.average);
        if c='b' then Result += balance.bk.transmission.hp.maximum*((player.bike.transmission.hitpoints/player.bike.transmission.maxhitpoints)-balance.bk.transmission.hp.average);
      end
      else
      begin
        if c='g' then Result += balance.bk.transmission.hp.minimal*(balance.bk.transmission.hp.average-(player.bike.transmission.hitpoints/player.bike.transmission.maxhitpoints));
        if c='b' then Result += balance.bk.transmission.hp.minimal*(balance.bk.transmission.hp.average-(player.bike.transmission.hitpoints/player.bike.transmission.maxhitpoints));
      end;
    end;
    public static function GetCBRudder(c: char): real;
    begin
      if player.bike.rudder.hitpoints/player.bike.rudder.maxhitpoints>=balance.bk.rudder.hp.average then
      begin
        if c='g' then Result += balance.bk.rudder.hp.maximum*((player.bike.rudder.hitpoints/player.bike.rudder.maxhitpoints)-balance.bk.rudder.hp.average);
        if c='b' then Result += balance.bk.rudder.hp.maximum*((player.bike.rudder.hitpoints/player.bike.rudder.maxhitpoints)-balance.bk.rudder.hp.average);
      end
      else
      begin
        if c='g' then Result += balance.bk.rudder.hp.minimal*(balance.bk.rudder.hp.average-(player.bike.rudder.hitpoints/player.bike.rudder.maxhitpoints));
        if c='b' then Result += balance.bk.rudder.hp.minimal*(balance.bk.rudder.hp.average-(player.bike.rudder.hitpoints/player.bike.rudder.maxhitpoints));
      end;
    end;
    public static function GetCBBackWheel(c: char): real;
    begin
      if player.bike.backwheel.pressure>=balance.bk.wheel.pressure.average then
      begin
        if c='g' then Result += (player.bike.backwheel.pressure-balance.bk.wheel.pressure.average)*balance.bk.wheel.pressure.maximumG;
        if c='b' then Result += (player.bike.backwheel.pressure-balance.bk.wheel.pressure.average)*balance.bk.wheel.pressure.maximumB;
      end
      else
      begin
        if c='g' then Result += (balance.bk.wheel.pressure.average-player.bike.backwheel.pressure)*balance.bk.wheel.pressure.minimumG;
        if c='b' then Result += (balance.bk.wheel.pressure.average-player.bike.backwheel.pressure)*balance.bk.wheel.pressure.minimumB;
      end;
    end;
    public static function GetCBFrontWheel(c: char): real;
    begin
      if player.bike.frontwheel.pressure>=balance.bk.wheel.pressure.average then
      begin
        if c='g' then Result += (player.bike.frontwheel.pressure-balance.bk.wheel.pressure.average)*balance.bk.wheel.pressure.maximumG;
        if c='b' then Result += (player.bike.frontwheel.pressure-balance.bk.wheel.pressure.average)*balance.bk.wheel.pressure.maximumB;
      end
      else
      begin
        if c='g' then Result += (balance.bk.wheel.pressure.average-player.bike.frontwheel.pressure)*balance.bk.wheel.pressure.minimumG;
        if c='b' then Result += (balance.bk.wheel.pressure.average-player.bike.frontwheel.pressure)*balance.bk.wheel.pressure.minimumB;
      end;
    end;
    public static function GetEnergyCost(c: char): real;
    begin
      if c = 'g' then
      begin
        var g := balance.bk.mincostG;
        g += g*GetCBFrame(c);
        g += g*GetCBFork(c);
        g += g*GetCBBack(c);
        g += g*GetCBTransmission(c);
        g += g*GetCBRudder(c);
        g += g*GetCBBackWheel(c);
        g += g*GetCBFrontWheel(c);
        Result := g;
      end;
      
      if c = 'b' then
      begin
        var b := balance.bk.mincostB;
        b += b*GetCBFrame(c);
        b += b*GetCBFork(c);
        b += b*GetCBBack(c);
        b += b*GetCBTransmission(c);
        b += b*GetCBRudder(c);
        b += b*GetCBBackWheel(c);
        b += b*GetCBFrontWheel(c);
        Result := b;
      end;
    end;
  end;

  ///Возвращает стоимость километра в энергии по типу дорог c
  function energycost(c: char) := EnergyCosts.GetEnergyCost(c);

  ///Возвращает текущую скорость
  function curspeed(c: char): real;
  begin
    var g: real = balance.minspeedong;
    var b: real = balance.minspeedonb;
    if player.bike.transmission.count=6 then
    begin
      if c='g' then g:=g+balance.bk.transmission.count6.speedG;
      if c='b' then b:=b+balance.bk.transmission.count6.speedB;
    end;
    if player.bike.transmission.count=7 then
    begin
      if c='g' then g:=g+balance.bk.transmission.count7.speedG;
      if c='b' then b:=b+balance.bk.transmission.count7.speedB;
    end;
    if player.bike.transmission.count=8 then
    begin
      if c='g' then g:=g+balance.bk.transmission.count8.speedG;
      if c='b' then b:=b+balance.bk.transmission.count8.speedB;
    end;
    if player.bike.transmission.count=9 then
    begin
      if c='g' then g:=g+balance.bk.transmission.count9.speedG;
      if c='b' then b:=b+balance.bk.transmission.count9.speedB;
    end;
    if player.bike.transmission.count=10 then
    begin
      if c='g' then g:=g+balance.bk.transmission.count10.speedG;
      if c='b' then b:=b+balance.bk.transmission.count10.speedB;
    end;
    if player.bike.transmission.count=11 then
    begin
      if c='g' then g:=g+balance.bk.transmission.count11.speedG;
      if c='b' then b:=b+balance.bk.transmission.count11.speedB;
    end;
    if player.bike.rudder.sort=0 then
    begin
      if c='g' then g:=g+balance.bk.rudder.sort1.speedg;
      if c='b' then b:=b+balance.bk.rudder.sort1.speedb;
    end;
    if player.bike.rudder.sort=1 then
    begin
      if c='g' then g:=g+balance.bk.rudder.sort2.speedg;
      if c='b' then b:=b+balance.bk.rudder.sort2.speedb;
    end;
    if player.bike.rudder.sort=2 then
    begin
      if c='g' then g:=g+balance.bk.rudder.sort3.speedg;
      if c='b' then b:=b+balance.bk.rudder.sort3.speedb;
    end;
    if (game.road.roader.currenttime.Hour>=balance.nighthourstart) or (game.road.roader.currenttime.Hour<balance.nighthourfinish) then
    begin
      if (game.road.roader.currenttime.Hour=balance.nighthourstart) then
      begin
        if c='g' then g:=g-Round((g*balance.night0)*(game.road.roader.currenttime.Minute/60)*10)/10;
        if c='b' then b:=b-Round((b*balance.night0)*(game.road.roader.currenttime.Minute/60)*10)/10;
      end
      else
      begin
        if (game.road.roader.currenttime.Hour=balance.nighthourfinish-1) then
        begin
        if c='g' then g:=g-Round((g*balance.night0)*((60-game.road.roader.currenttime.Minute)/60)*10)/10;
        if c='b' then b:=b-Round((b*balance.night0)*((60-game.road.roader.currenttime.Minute)/60)*10)/10;
        end
        else
        begin
          if not player.bike.light then
          begin
            if c='g' then g:=g-(g*balance.night0);
            if c='b' then b:=b-(b*balance.night0);
          end
          else
          begin
            if c='g' then g:=g-(g*balance.night1);
            if c='b' then b:=b-(b*balance.night1);
          end;
        end;
      end;
    end;
    
    var bv:=BikeVeight;
    var iv:=allveight/player.maxveight;
    
    if bv<=Balance.SpeedAndVeight.BikeVeight.minimum then
    begin
      if c = 'g' then g*=Balance.SpeedAndVeight.BikeVeight.maximumk;
      if c = 'b' then b*=Balance.SpeedAndVeight.BikeVeight.maximumk;
    end
    else if bv>=Balance.SpeedAndVeight.BikeVeight.maximum then
    begin
      if c = 'g' then g*=Balance.SpeedAndVeight.BikeVeight.minimalk;
      if c = 'b' then b*=Balance.SpeedAndVeight.BikeVeight.minimalk;
    end
    else
    begin
      var xx:=(bv - Balance.SpeedAndVeight.BikeVeight.minimum)/(Balance.SpeedAndVeight.BikeVeight.maximum - Balance.SpeedAndVeight.BikeVeight.minimum);
      if c = 'g' then g*=(Balance.SpeedAndVeight.BikeVeight.maximumk - ((xx)*(Balance.SpeedAndVeight.BikeVeight.maximumk-Balance.SpeedAndVeight.BikeVeight.minimalk)));
      if c = 'b' then b*=(Balance.SpeedAndVeight.BikeVeight.maximumk - ((xx)*(Balance.SpeedAndVeight.BikeVeight.maximumk-Balance.SpeedAndVeight.BikeVeight.minimalk)));
    end;
    
    if iv<=Balance.SpeedAndVeight.ItemVeight.minimum then
    begin
      if c = 'g' then g*=Balance.SpeedAndVeight.ItemVeight.maximumk;
      if c = 'b' then b*=Balance.SpeedAndVeight.ItemVeight.maximumk;
    end
    else if iv>=Balance.SpeedAndVeight.ItemVeight.maximum then
    begin
      if c = 'g' then g*=Balance.SpeedAndVeight.ItemVeight.minimalk;
      if c = 'b' then b*=Balance.SpeedAndVeight.ItemVeight.minimalk;
    end
    else
    begin
      var xx:=(iv - Balance.SpeedAndVeight.ItemVeight.minimum)/(Balance.SpeedAndVeight.ItemVeight.maximum - Balance.SpeedAndVeight.ItemVeight.minimum);
      if c = 'g' then g*=(Balance.SpeedAndVeight.ItemVeight.maximumk - ((xx)*(Balance.SpeedAndVeight.ItemVeight.maximumk-Balance.SpeedAndVeight.ItemVeight.minimalk)));
      if c = 'b' then b*=(Balance.SpeedAndVeight.ItemVeight.maximumk - ((xx)*(Balance.SpeedAndVeight.ItemVeight.maximumk-Balance.SpeedAndVeight.ItemVeight.minimalk)));
    end;
    
    if c = 'g' then
    case player.time.Month of
      1: g*=Balance.MonthsKSpeed._1January;
      2: g*=Balance.MonthsKSpeed._2Febraury;
      3: g*=Balance.MonthsKSpeed._3March;
      4: g*=Balance.MonthsKSpeed._4April;
      5: g*=Balance.MonthsKSpeed._5May;
      6: g*=Balance.MonthsKSpeed._6June;
      7: g*=Balance.MonthsKSpeed._7July;
      8: g*=Balance.MonthsKSpeed._8August;
      9: g*=Balance.MonthsKSpeed._9September;
      10: g*=Balance.MonthsKSpeed._10October;
      11: g*=Balance.MonthsKSpeed._11November;
      12: g*=Balance.MonthsKSpeed._12December;
    end;
    
    if c = 'b' then
    case player.time.Month of
      1: b*=Balance.MonthsKSpeed._1January;
      2: b*=Balance.MonthsKSpeed._2Febraury;
      3: b*=Balance.MonthsKSpeed._3March;
      4: b*=Balance.MonthsKSpeed._4April;
      5: b*=Balance.MonthsKSpeed._5May;
      6: b*=Balance.MonthsKSpeed._6June;
      7: b*=Balance.MonthsKSpeed._7July;
      8: b*=Balance.MonthsKSpeed._8August;
      9: b*=Balance.MonthsKSpeed._9September;
      10: b*=Balance.MonthsKSpeed._10October;
      11: b*=Balance.MonthsKSpeed._11November;
      12: b*=Balance.MonthsKSpeed._12December;
    end;
    
    var rndg: integer = Round(g) div 4;
    var rndb: integer = Round(b) div 4;
    if pabcsystem.Random>=player.luck then
    begin
      if c='g' then Result:=g+pabcsystem.Random(rndg*10)/10;
      if c='b' then Result:=b+pabcsystem.Random(rndb*10)/10;
    end
    else
    begin
      if c='g' then Result:=g-pabcsystem.Random(rndg*10)/10;
      if c='b' then Result:=b-pabcsystem.Random(rndb*10)/10;
    end;
    
    if g>30 then g-=g*(PABCSystem.Random*0.2 + 0.8);
    if b>24 then b-=b*(PABCSystem.Random*0.2 + 0.8);
    Result:=Round(Result,1);
  end;
  
  ///Возвращает true если один из элементов bike не имеет прочности (кроме тормозов и заднего амортизатора)
  function bikeiscrash: boolean;
  begin
    Result:=False;
    if player.bike.frame.hitpoints<=balance.criticalhp then Result:=true;
    if player.bike.fork.hitpoints<=balance.criticalhp then Result:=true;
    if player.bike.rudder.hitpoints<=balance.criticalhp then Result:=true;
    if player.bike.transmission.hitpoints<=balance.criticalhp then Result:=true;
    //if player.bike.backbreak.hitpoints<=balance.criticalhp then Result:=true;
    //if player.bike.frontbreak.hitpoints<=balance.criticalhp then Result:=true;
    if player.bike.backwheel.hitpoints<=balance.criticalhp then Result:=true;
    if player.bike.frontwheel.hitpoints<=balance.criticalhp then Result:=true;
    if player.bike.backwheel.needles<=balance.bk.wheel.needle.minimum then Result:=true;
    if player.bike.frontwheel.needles<=balance.bk.wheel.needle.minimum then Result:=true;
    if player.bike.backwheel.pressure<balance.bk.wheel.pressure.minimum then Result:=true;
    if player.bike.backwheel.pressure>balance.bk.wheel.pressure.maximum then Result:=true;
    if player.bike.frontwheel.pressure<balance.bk.wheel.pressure.minimum then Result:=true;
    if player.bike.frontwheel.pressure>balance.bk.wheel.pressure.maximum then Result:=true;
    if player.bike.backwheel.camerahit then Result:=true;
    if player.bike.frontwheel.camerahit then Result:=true;
  end;
  
  ///Возвращает шанс аварии
  function crashchance: real;
  begin
    var breakcount: integer;
    var bf : real = player.bike.backbreak.effection/player.bike.backbreak.maxeffection;
    var ff : real = player.bike.frontbreak.effection/player.bike.frontbreak.maxeffection;
    if player.bike.backbreak.flag then breakcount+=1;
    if player.bike.frontbreak.flag then breakcount+=1;
    if breakcount=0 then Result:=balance.bk.allbreak.crashchancemax;
    if breakcount=1 then
    begin
      if player.bike.backbreak.flag then
      begin
        Result:=((1-bf)*(balance.bk.allbreak.crashchancemax-balance.bk.allbreak.crashchance1))+balance.bk.allbreak.crashchance1;
      end
      else
      begin
        Result:=((1-bf)*(balance.bk.allbreak.crashchancemax-balance.bk.allbreak.crashchance1))+balance.bk.allbreak.crashchance1;
      end;
    end;
    if breakcount=2 then
    begin
      if bf>=ff then
      begin
        if ff>balance.bk.allbreak.minimal then
        begin
          Result:=((1-bf)*balance.bk.allbreak.crashchancemax);
        end
        else Result:=((1-bf)*(balance.bk.allbreak.crashchancemax-balance.bk.allbreak.crashchance1))+balance.bk.allbreak.crashchance1;
      end
      else
      begin
        if bf>balance.bk.allbreak.minimal then
        begin
          Result:=((1-ff)*balance.bk.allbreak.crashchancemax);
        end
        else Result:=((1-ff)*(balance.bk.allbreak.crashchancemax-balance.bk.allbreak.crashchance1))+balance.bk.allbreak.crashchance1;
      end;
    end;
    
  end;
  
  ///Возвращает шанс прокола заднего колеса
  function backwheelhitchance: real;
  begin
    if player.bike.backwheel.hitpoints/player.bike.backwheel.maxhitpoints>=balance.bk.wheel.hp.average then
      Result:=balance.bk.wheel.hp.chance
    else
      Result:=(balance.bk.wheel.hp.average-(player.bike.backwheel.hitpoints/player.bike.backwheel.maxhitpoints))+balance.bk.wheel.hp.chance;
    if player.bike.backwheel.needles<balance.bk.wheel.needle.average then Result+=(((balance.bk.wheel.needle.average-player.bike.backwheel.needles)/100)*balance.bk.wheel.needle.minimumchance);
  end;
  
  ///Возвращает шанс прокола переднего колеса
  function frontwheelhitchance: real;
  begin
    if player.bike.frontwheel.hitpoints/player.bike.frontwheel.maxhitpoints>=balance.bk.wheel.hp.average then
      Result:=balance.bk.wheel.hp.chance
    else
      Result:=(balance.bk.wheel.hp.average-(player.bike.frontwheel.hitpoints/player.bike.frontwheel.maxhitpoints))+balance.bk.wheel.hp.chance;
    if player.bike.frontwheel.needles<balance.bk.wheel.needle.average then Result+=(((balance.bk.wheel.needle.average-player.bike.frontwheel.needles)/100)*balance.bk.wheel.needle.minimumchance);
  end;
  
  procedure Versions;
  var
    blck: TBlock;
  begin
    if VersionInfo.Versions<>nil then blck.status:=true;
    while blck.status do
    begin
      Console.Clear;KTX.resize;
      outnull(blck.output, blck.input);
      
      var vsize: integer = VersionInfo.Versions.Length;
      if vsize>=(KTX.maxy-5)*2 then Console.SetBufferSize(KTX.maxx,Round(vsize/2)+5);
      
      var vvsk:=Round(vsize/2);
      for var i:=0 to vvsk-1 do
      begin
        Console.SetCursorPosition(1,i+1);
        write('(',i+1,') ',VersionInfo.Versions[i].Name);
      end;
      for var i:=vvsk to vsize-1 do
      begin
        Console.SetCursorPosition(Round(KTX.maxx/2),i+1-vvsk);
        write('(',i+1,') ',VersionInfo.Versions[i].Name);
      end;
      Console.SetCursorPosition(1,Round(vsize/2)+1);
      write('(0) ',inter[0].face[5]);
      
      KTX.read_1;
      while (blck.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
      begin
        if vsize>=(KTX.maxy-5)*2 then
        begin
          Console.SetCursorPosition(1,Round(vsize/2)+4);
          Console.SetCursorPosition(1,Round(vsize/2)+3);
        end
        else Console.SetCursorPosition(1,KTX.maxy-2);
        write(': ');
        readln(blck.input);
      end;
      KTX.read_0;
        
        if blck.input='0' then blck.output:=0;
        if not (blck.input='0') then
        begin
          var a,e: integer;
          val(blck.input,a,e);
          if (e=0) and (a>0) and (a<=VersionInfo.Versions.Length) then blck.output:=a;
        end;
        
        if blck.output=0 then
        begin
          blck.status:=false;
        end;
        
        if blck.output>0 then
        begin
          var blck2: TBlock;
          blck2.status:=true;
          while blck2.status do
          begin
            KTX.resize;
            outnull(blck2.output,blck2.input);
            var o2:=SizeSeparate(VersionInfo.Versions[blck.output-1].Description);
            var i3: integer = o2.Length;
            if i3>=(KTX.maxy-6) then Console.SetBufferSize(KTX.maxx,i3+6);
            for var i:=0 to o2.Length-1 do
            begin
              Console.SetCursorPosition(0,i+1);write(o2[i]);
            end;
            if i3>=(KTX.maxy-6) then
            begin
              Console.SetCursorPosition(1,i3+2);write('(0) ',inter[0].face[5]);
            end
            else
            begin
              Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
            end;
            
            
            KTX.read_1;
            while (blck2.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              if i3>=(KTX.maxy-6) then
              begin
                Console.SetCursorPosition(1,i3+5);
                Console.SetCursorPosition(1,i3+4);
              end
              else Console.SetCursorPosition(1,KTX.maxy-2);
              write(': ');
              readln(blck2.input);
            end;
            KTX.read_0;
            
            if blck2.input='0' then blck2.output:=0;
            
            if blck2.output=0 then
            begin
              blck2.status:=false;
            end;
          end;

        end;
    end;
  end;

  procedure SetAlarm();
  var
    Ala: TBlock;
  begin
    Ala.status:=true;
    while Ala.status do
    begin
      Console.Clear;KTX.resize;
      outnull(Ala.output, Ala.input);
      
      Console.SetCursorPosition(1,1);write(inter[30].face[0],': ');
      if Alarm.Status then
      begin
        var _DT:=new DateTime(Alarm.Date);
        write(_DT.Hour,':',_DT.Minute.ToString.PadLeft(2,'0'));
      end
      else write(inter[30].face[1]);
      Console.SetCursorPosition(1,2);write(inter[30].face[2]);
      Console.SetCursorPosition(1,3);write(inter[30].face[3]);
      Console.SetCursorPosition(1,4);write(inter[30].face[4]);
      
      KTX.read_1;
      while (Ala.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx)) do
      begin
        Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
        readln(Ala.input);
      end;
      KTX.read_0;
      
      if Ala.input='0' then Ala.status:=false;
      
      if Ala.input.ToLower='d' then
      begin
        Alarm.Status:=false;
        Ala.status:=false;
      end;
      
      try
        var _ala:= Ala.input.ToWords(':');
        var h:=StrToInt(_ala[0]);
        var m:=StrToInt(_ala[1]);
        if ((h>=0) and (h<24)) and ((m>=0) and (m<60)) then
        begin
          Alarm.Status:=true;
          Alarm.Date:=(h*TimeSpan.TicksPerHour)+(m*TimeSpan.TicksPerMinute);
          Ala.status:=false;
        end;
      except on System.Exception do ;
      
      end;
    end;
  end;

  procedure GoSleep(ST: SleepType; SleepTime: TimeSpan);
  begin
    var
      ///Действительный сон в минутах
      NaturalSleep: integer;
    
    if Alarm.Status then
    begin
      var CurrentTime := new DateTime(player.time.Hour*TimeSpan.TicksPerHour+player.time.Minute*TimeSpan.TicksPerMinute);
      var AlarmDate := Alarm.Date;
      if CurrentTime.Ticks >= AlarmDate then AlarmDate+=TimeSpan.TicksPerDay;
      var AlarmSleep: int64 = AlarmDate-CurrentTime.Ticks;
      if AlarmSleep<=SleepTime.Ticks then NaturalSleep := Round(AlarmSleep/TimeSpan.TicksPerMinute)
      else NaturalSleep:=Round(SleepTime.Ticks/TimeSpan.TicksPerMinute);
    end
    else
    begin
      NaturalSleep:=Round(SleepTime.Ticks/TimeSpan.TicksPerMinute);
    end;
    
    Console.Clear;
    var EnergyPlus:=Round((player.maxenergy-player.energy)*(NaturalSleep/(SleepTime.Ticks/TimeSpan.TicksPerMinute)));
    var CurrentEnergy:=player.energy;
    var MaxEnergy: integer := EnergyPlus+player.energy;
    while (CurrentEnergy<MaxEnergy) do
    begin
      var pcent:=CurrentEnergy/player.maxenergy;
      var strpcent:=Round(pcent*100).ToString+'%';
      
      var pcent1: string = spcf(3)+strpcent+spcf(3);
      Console.SetCursorPosition(Round(((KTX.maxx)-strpcent.length)/2)-2,1);
      write(pcent1);
      
      Console.SetCursorPosition(1,2);
      var __Delim:=Round((pcent)*(KTX.maxx-2));
      Console.ForegroundColor:=consolecolor.Red;
      for var i:=1 to __Delim do
      begin
        write(KTX.subgraph_a[1]);
      end;
      for var i:=__Delim+1 to KTX.maxx-2 do
      begin
        write(KTX.subgraph_a[4]);
      end;
      Console.ForegroundColor:=consolecolor.Black;
      
      var maxt:=MaxEnergy-player.energy;
      var mint:=CurrentEnergy-player.energy;
      var stpt:=mint/maxt;
      var dtpt:=new DateTime(player.time.Ticks+(Round(stpt*NaturalSleep)*TimeSpan.TicksPerMinute));
      
      Console.SetCursorPosition(1,4);write(inter[29].face[20],': ',dtpt.Hour,':',dtpt.Minute.ToString.PadLeft(2,'0'),spcf(5));
      if Alarm.Status then
      begin
        Console.SetCursorPosition(1,5);write(inter[29].face[19],': ',Alarm.Date div TimeSpan.TicksPerHour,':',((Alarm.Date mod TimeSpan.TicksPerHour div TimeSpan.TicksPerMinute).ToString.PadLeft(2,'0')),spcf(5));
      end;
      
      CurrentEnergy+=200;Sleep(50);
    end;
    player.time:=player.time.AddMinutes(NaturalSleep);
    player.energy+=EnergyPlus;
    player.health+=Round(NaturalSleep*balance.Sleep.HealthPlus[ST]);
    if svg.autosave then save;
  end;
  
  procedure ResetRandomStreetPlace();
  begin
    svg.CRSP:=inter[31].face[PABCSystem.Random(inter[31].face.Length)];
  end;
  
  procedure GoWait(min: integer);
  begin
    Console.Clear;
    var current: integer = 0;
    var max: integer = min;
    while (Current<Max) do
    begin
      var pcent:=(player.energy+Round(Current*balance.Wait.energyatminute))/player.maxenergy;
      var strpcent:=Round(pcent*100).ToString+'%';
      
      var pcent1: string = spcf(3)+strpcent+spcf(3);
      Console.SetCursorPosition(Round(((KTX.maxx)-strpcent.length)/2)-2,1);
      write(pcent1);
      
      Console.SetCursorPosition(1,2);
      var __Delim:=Round((pcent)*(KTX.maxx-2));
      Console.ForegroundColor:=consolecolor.Red;
      for var i:=1 to __Delim do
      begin
        write(KTX.subgraph_a[1]);
      end;
      for var i:=__Delim+1 to KTX.maxx-2 do
      begin
        write(KTX.subgraph_a[4]);
      end;
      Console.ForegroundColor:=consolecolor.Black;
      var dtpt:=player.time.AddMinutes(current);
      
      Console.SetCursorPosition(1,4);write(inter[29].face[20],': ',dtpt.Hour,':',dtpt.Minute.ToString.PadLeft(2,'0'),spcf(5));
      
      Current+=1;Sleep(50);
    end;
    player.time:=player.time.AddMinutes(min);
    player.energy+=Round(min*balance.Wait.energyatminute);
    if svg.autosave then save;
  end;

  function GetInformation: array of string;
  begin
    var sb:=new List<string>;
    if (player.bike.fork.suspensionflag) and (player.bike.fork.block) and (player.bike.fork.blocks) then sb.Add(inter[40].face[0]);
    if (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) and (player.bike.bsusp.block) and (player.bike.bsusp.blocks) then sb.Add(inter[40].face[1]);
    if (player.bike.backwheel.needles < balance.bk.wheel.needle.maximum) then sb.Add(inter[40].face[2]);
    if (player.bike.frontwheel.needles < balance.bk.wheel.needle.maximum) then sb.Add(inter[40].face[3]);
    //if (player.bike.backbreak.effection/player.bike.backbreak.maxeffection
    if sb.Count=0 then Result:=nil else Result:=sb.ToArray;
  end;
  
{$endregion}

{$region Balancing}

procedure Balancing;
begin
  LOG.Add('START Balancing');
  with balance do
  begin
    balance.maxtutorial := 32;
    mv_minsc := 2.5;
    mv_maxsc := 8;
    mvminstep := 0.1;
    mvmaxstep := 1;
    int_minx := 100;
    int_miny := 30;
    int_maxx := 999;
    int_maxy := 999;
    minnicksize := 3;
    maxnicksize := 16;
    minspeedong := 12;
    minspeedonb := 10;
    wateronmeter := 0.04;
    foodonmeter := 0.015;
    animminspeed := 1;
    animmaxspeed := 8;
    animKFspeed := 200;
    animKFseconds := 100;
    nighthourstart := 22;
    nighthourfinish := 6;
    night0 := 0.5;
    night1 := 0.15;
    criticalhp := 100000;
    minimaleff := 0.75;
    subaverage := 0.5;
    
    cameraveight := 600;
    needleveight := 300;
    
    apartmentprice0 := 800000;
    apartmentprice1 := 1200000;
    apartmentprice2 := 2400000;
    
    maxwritespd := 36;
    minwritespd := 24;
    
    foodprice := 2/25;
    waterprice := 3/100;
    
    distancebetweenroadbonuses  := 3;
    
    with MonthsKSpeed do
    begin
      _1January := 0.66;
      _2Febraury := 0.66;
      _3March := 0.72;
      _4April := 0.85;
      _5May := 0.95;
      _6June := 1;
      _7July := 1;
      _8August := 1;
      _9September := 0.95;
      _10October := 0.85;
      _11November := 0.72;
      _12December := 0.66;
    end;
    
    with SpeedAndVeight do
    begin
      with BikeVeight do
      begin
        minimalk := 0.8;
        maximumk := 1.2;
        minimum := 11000;
        maximum := 14000;
      end;
      with ItemVeight do
      begin
        minimalk := 0.9;
        maximumk := 1.1;
        minimum := 0.5;
        maximum := 1;
      end;
    end;
    
    with IFace do
    begin
      with framematerial do
      begin
        Steel := ConsoleColor.DarkYellow;
        SteelPlus := ConsoleColor.DarkGray;
        Alu6061 := ConsoleColor.DarkGreen;
        Alu7075 := ConsoleColor.DarkCyan;
        Titan := ConsoleColor.DarkBlue;
      end;
      with susptype do
      begin
        Steel := ConsoleColor.DarkYellow;
        Elastomer := ConsoleColor.DarkYellow;
        Pneumatic := ConsoleColor.DarkGreen;
        Oil := ConsoleColor.DarkCyan;
        OilPlus := ConsoleColor.DarkBlue;
        PneumaticPlus := ConsoleColor.DarkBlue;
      end;
      with susptravel do
      begin
        with _0 do
        begin
          min := 0;
          max := 60;
          indicate := ConsoleColor.DarkYellow;
        end;
        
        with _1 do
        begin
          min := 61;
          max := 120;
          indicate := ConsoleColor.DarkGreen;
        end;
        
        with _2 do
        begin
          min := 121;
          max := 180;
          indicate := ConsoleColor.DarkCyan;
        end;
        
        with _3 do
        begin
          min := 181;
          max := integer.MaxValue;
          indicate := ConsoleColor.DarkBlue;
        end;
      end;
      
      
      with cardhits do
      begin
        with _0 do
        begin
          min := 0;
          max := 2000000;
          indicate := ConsoleColor.DarkYellow;
        end;
        
        with _1 do
        begin
          min := 2001000;
          max := 5000000;
          indicate := ConsoleColor.DarkGreen;
        end;
        
        with _2 do
        begin
          min := 5001000;
          max := 7500000;
          indicate := ConsoleColor.DarkCyan;
        end;
        
        with _3 do
        begin
          min := 7501000;
          max := integer.MaxValue;
          indicate := ConsoleColor.DarkBlue;
        end;
      end;
      
      with backcount do
      begin
        _1 := ConsoleColor.Red;
        _6 := ConsoleColor.DarkYellow;
        _7 := ConsoleColor.DarkYellow;
        _8 := ConsoleColor.DarkYellow;
        _9 := ConsoleColor.DarkGreen;
        _10 := ConsoleColor.DarkGreen;
        _11 := ConsoleColor.DarkBlue;
      end;
      with forecount do
      begin
        _1 := ConsoleColor.DarkYellow;
        _3 := ConsoleColor.DarkGreen;
      end;
      with ruddertype do
      begin
        _0 := ConsoleColor.DarkGreen;
        _1 := ConsoleColor.DarkBlue;
        _2 := ConsoleColor.DarkBlue;
      end;
      with braketype do
      begin
        _1 := ConsoleColor.DarkYellow;
        _2 := ConsoleColor.DarkGreen;
        _3 := ConsoleColor.DarkBlue;
      end;
      with wheelhits do
      begin
        with _1 do
        begin
          min := 0;
          max := 1999000;
          indicate := ConsoleColor.DarkYellow;
        end;
        with _2 do
        begin
          min := 2000000;
          max := 3999000;
          indicate := ConsoleColor.DarkGreen;
        end;
        with _3 do
        begin
          min := 4000000;
          max := integer.MaxValue;
          indicate := ConsoleColor.DarkBlue;
        end;
      end;
    end;
    
    with Sell do
    begin
      Oldermin := 1.5;
      Olderadd := -0.05;
      Oldermaxlvl := 10;
    end;
    
    with CameraPrice do
    begin
      min :=  200;
      add :=  -15;
      maxlvl :=  10;
    end;
    
    with NeedlePrice do
    begin
      min :=  300;
      add :=  -20;
      maxlvl :=  10;
    end;
    
    with Send do
    begin
      Sends := Arr(
      new TSend(10,80,120,1),
      new TSend(100,250,400,2),
      new TSend(200,400,650,2),
      new TSend(300,650,850,3),
      new TSend(500,850,1200,3),
      new TSend(750,1350,1750,3),
      new TSend(1000,2000,3000,4)
      );
      
      minrespect :=  500000;
      maxrespect :=  1500000;
      mink :=  0.5;
      maxlvlk :=  10;
      kadd :=  0.05
    end;
    
    with Crash do
    begin
      minimumdechp := 20000;
      dechpmaxlvl := 10;
      dechpadd := -1000;
    end;
    
    with Wait do
    begin
      energyatminute := -100;
      maxminutes := 60;
    end;
    
    with Sleep do
    begin
      eff_Hotel := 1;
      eff_Apart := 0.9;
      eff_Tent := 1.25;
      eff_Street := 1.8;
      minimal := 0.9;
      pcentathour :=  0.1;
      pcahadd :=  0.0025;
      pcahmaxlvl :=  10;
      
      HotelPricemin := Arr(200,600,1000);
      HotelPriceadd := Arr(20,60,100);
      HotelPricelvlmax := Arr(10,10,10);
      
      HealthPlus[SleepType.Apart] := 0.8;
      HealthPlus[SleepType.Hotel] := 2/3;
      HealthPlus[SleepType.Tent] := 1/5;
      HealthPlus[SleepType.Street] := -1;
      
      //HotelPriceatminute0 := 5/12;
      //HotelPriceatminute1 := 35/48;
      //HotelPriceatminute2 := 1;
      
      with _90100 do
      begin
        min := 0.9;
        max := 1;
        color := ConsoleColor.DarkBlue;
      end;
      with _7590 do
      begin
        min := 0.75;
        max := 0.9;
        color := ConsoleColor.DarkGreen;
      end;
      with _5075 do
      begin
        min := 0.5;
        max := 0.75;
        color := ConsoleColor.DarkYellow;
      end;
      with _2550 do
      begin
        min := 0.25;
        max := 0.5;
        color := ConsoleColor.DarkRed;
      end;
      with _025 do
      begin
        min := 0;
        max:= 0.25;
        color:= ConsoleColor.Red;
      end;
    end;
    
    with BreakCardEffection do
    begin
      with VBrake do
      begin
        minimal := 750000;
        lvladd := 75000;
        maxlvl := 10;
      end;
      with DiskMechanic do
      begin
        minimal := 2500000;
        lvladd := 250000;
        maxlvl := 10;
      end;
      with DiskHydravlic do
      begin
        minimal := 5000000;
        lvladd := 500000;
        maxlvl := 10;
      end;
    end;
    
    with NEWGAME do
    begin
      maxveight := 15000;
      maxwater := 2500;
      maxfood := 1000;
      maxenergy := 60000;
    end;
        
    with levelup do
    begin
      plusmveight := 3000;
      plusmwater := 500;
      plusmfood := 300;
      plusmenergy := 7500;
      expmin := 500;
      expk := 500;
      expmaxlevel := 10;//Макс уровень левелапов, уровень продолжит повышаться
    end;
    
    with shopmaxlevels do
    begin
      type0 := 6;
      type1 := 8;
      type2 := 10;
    end;
    
    with economic do
    begin
      with town0 do
      begin
        max := 1.06;
        min := 0.9;
      end;
      with town1 do
      begin
        max := 1.18;
        min := 1.06;
      end;
      with town2 do
      begin
        max := 1.25;
        min := 1.18;
      end;
      infochance := 0.33;
      infoprice := 1000;
      infok := 250;
      infomaxlevel := 9999;
    end;
    
    with status do
    begin
      with _verybad do
      begin
        min := 0;
        max := 100000;
        color := ConsoleColor.Red;
      end;
      with _bad do
      begin
        min := 100000;//BALANCE.CriticalHP
        max := 0.4;
        color := ConsoleColor.DarkRed;
      end;
      with _normal do
      begin
        min := 0.4;
        max := 0.6;
        color := ConsoleColor.DarkYellow;
      end;
      with _good do
      begin
        min := 0.6;
        max := 0.9;
        color := ConsoleColor.DarkGreen;
      end;
      with _verygood do
      begin
        min := 0.9;
        max := 1;
        color := ConsoleColor.DarkBlue;
      end;
    end;
    
    with bk do
    begin
      ///Рама
      mincostG := 1-1/9;
      mincostB := 1+3/7;
      with frame do
      begin
        with material do
        begin
          with steel do
          begin
            minlevel := 0;
            roadg := +0.06;
            roadb := +0.04;
            hitpoints := 12000000;
          end;
          with steelplus do
          begin
            minlevel := 1;
            roadg := 0;
            roadb := 0;
            hitpoints := 15000000;//метров
          end;
          with alu6061 do
          begin
            minlevel := 3;
            roadg := -0.03;
            roadb := -0.02;
            hitpoints := 10000000;//метров
          end;
          with alu7075 do
          begin
            minlevel := 4;
            roadg := -0.06;
            roadb := -0.04;
            hitpoints := 10000000;//метров
          end;
          with titan do
          begin
            minlevel := 6;
            roadg := -0.1;
            roadb := -0.08;
            hitpoints := 20000000;//метров
          end;
        end;
        with hp do
        begin
          average := 0.5;
          minimal := +0.2;
          maximum := -0.1;
        end;
      end;
      with fork do
      begin
        with suspension do
        begin
          with steel do
          begin
            minlevel := 2;
            roadg := 0;
            roadb := -0.02;
            hitpoints := 800000;
          end;
          with steelplus do
          begin
            minlevel := 3;
            roadg := 0;
            roadb := -0.04;
            hitpoints := 1000000;
          end;
          with pneumatic do
          begin
            minlevel := 4;
            roadg := 0;
            roadb := -0.08;
            hitpoints := 4000000;
          end;
          with pneumaticplus do
          begin
            minlevel := 10;
            roadg := 0;
            roadb := -0.15;
            hitpoints := 10000000;
          end;
          with oil do
          begin
            minlevel := 6;
            roadg := 0;
            roadb := -0.12;
            hitpoints := 8000000;
          end;
          with oilplus do
          begin
            minlevel := 8;
            roadg := 0;
            roadb := -0.12;
            hitpoints := 8000000;
          end;
          with flag0 do
          begin
            minlevel := 0;
            roadg := 0;
            roadb := +0.1;
          end;
          with flag1 do
          begin
            minlevel := 2;
            roadg := +0.25;
            roadb := 0;
          end;
        end;
        with hp do
        begin
          average := 0.5;
          minimal := +0.2;
          maximum := -0.1;
        end;
        with susptravel1 do
        begin
          min := 0;
          max := 50;
          value := -0.0005;
        end;
        with susptravel2 do
        begin
          min := 50;
          max := 100;
          value := -0.001;
        end;
        with susptravel3 do
        begin
          min := 100;
          max := 300;
          value := -0.0005;
        end;
        with block do
        begin
          minlevel := 5;
          roadg := -0.2;
          roadb := 0;
        end;
      end;
      with bsusp do
      begin
        with suspension do
        begin
          with steel do
          begin
            minlevel := 2;
            roadg := 0;
            roadb := -0.03;
            hitpoints := 1000000;
          end;
          with steelplus do
          begin
            minlevel := 3;
            roadg := 0;
            roadb := -0.05;
            hitpoints := 1500000;
          end;
          with pneumatic do
          begin
            minlevel := 4;
            roadg := 0;
            roadb := -0.08;
            hitpoints := 5000000;
          end;
          with pneumaticplus do
          begin
            minlevel := 10;
            roadg := 0;
            roadb := -0.15;
            hitpoints := 10000000;
          end;
          with oil do
          begin
            minlevel := 6;
            roadg := 0;
            roadb := -0.12;
            hitpoints := 8000000;
          end;
          with flag0 do
          begin
            minlevel := 0;
            roadg := 0;
            roadb := 0;
          end;
          with flag1 do
          begin
            minlevel := 4;
            roadg := +0.25;
            roadb := 0;
          end;
        end;
        with block do
        begin
          minlevel := 5;
          roadg := -0.2;
          roadb := 0;
        end;
        with susptravel1 do
        begin
          min := 0;
          max := 50;
          value := -0.0005;
        end;
        with susptravel2 do
        begin
          min := 50;
          max := 100;
          value := -0.001;
        end;
        with susptravel3 do
        begin
          min := 100;
          max := 300;
          value := -0.0005;
        end;
        with hp do
        begin
          average := 0.5;
          minimal := +0.1;
          maximum := -0.1;
        end;
      end;
      with transmission do
      begin
        with backs0 do
        begin
          minlevel := 0;
          roadG := +0.15;
          roadB := +0.1;
        end;
        with backs1 do
        begin
          minlevel := 2;
          roadG := 0;
          roadB := 0;
        end;
        with fores0 do
        begin
          minlevel := 0;
          roadG := 0;
          roadB := 0;
        end;
        with fores1 do
        begin
          minlevel := 4;
          roadG := -0.05;
          roadB := -0.15;
        end;
        with count6 do
        begin
          minlevel := 2;
          speedG := 5;
          speedB := 3;
          hitpoints := 3000000;
        end;
        with count7 do
        begin
          minlevel := 3;
          speedG := 6;
          speedB := 4;
          hitpoints := 3000000;
        end;
        with count8 do
        begin
          minlevel := 5;
          speedG := 8;
          speedB := 5;
          hitpoints := 3000000;
        end;
        with count9 do
        begin
          minlevel := 7;
          speedG := 10;
          speedB := 6;
          hitpoints := 3000000;
        end;
        with count10 do
        begin
          minlevel := 8;
          speedG := 12;
          speedB := 7;
          hitpoints := 3000000;
        end;
        with count11 do
        begin
          minlevel := 10;
          speedG := 14;
          speedB := 8;
          hitpoints := 3000000;
        end;
        with hp do
        begin
          average := 0.5;
          minimal := +0.4;
          maximum := -0.1;
        end;
      end;
      with rudder do
      begin
        with sort1 do
        begin
          minlevel := 0;
          speedg := 0;
          speedb := 0;
          hitpoints := 5000000;
        end;
        with sort2 do
        begin
          minlevel := 2;
          speedg := 1;
          speedb := 2;
          hitpoints := 15000000;
        end;
        with sort3 do
        begin
          minlevel := 5;
          speedg := 3;
          speedb := 0;
          hitpoints := 10000000;
        end;
        with hp do
        begin
          average := 0.5;
          minimal := +0.1;
          maximum := -0.01;
        end;
      end;
      with backbreak do
      begin
        with none do
        begin
          crashchance := 0.085;
        end;
        with vbrake do
        begin
          crashchance := 0.003;
          hitpoints := 3000000;
        end;
        with dm do
        begin
          crashchance := 0.002;
          hitpoints := 10000000;
        end;
        with dh do
        begin
          crashchance := 0.001;
          hitpoints := 15000000;
        end;
        with hp do
        begin
          average := 0.7;
          crahsminimum := +0.1;//при меньше авераге
          crahsmaximum := 0;//при больше авераге
        end;
      end;
      with frontbreak do
      begin
        with none do
        begin
          crashchance := 0.085;
        end;
        with vbrake do
        begin
          crashchance := 0.003;
          hitpoints := 3000000;
        end;
        with dm do
        begin
          crashchance := 0.002;
          hitpoints := 10000000;
        end;
        with dh do
        begin
          crashchance := 0.001;
          hitpoints := 15000000;
        end;
        with hp do
        begin
          average := 0.7;
          crahsminimum := +0.1;//при меньше авераге
          crahsmaximum := 0;//при больше авераге
        end;
      end;
      with wheel do
      begin
        hitpoints := 2500;
        with pressure do
        begin
          average := 2;
          minimum := 0.5;
          maximum := 3.5;
          minimumG := +(1/3);
          minimumB := -(1/12);
          maximumG := -(1/12);
          maximumB := +(1/3);
          permeter := 0.0000067;
        end;
        with hp do
        begin
          average := 0.95;
          minimumchance := 0;
          maximumchance := 0.01;
          chance := 0.05;
        end;
        with needle do
        begin
          minimum := 16;//меньше - сразу прокол
          average := 28;
          maximum := 32;
          minimumchance := 0.03;
          chancek := 2;
          maximumchance := 27;
        end;
      end;
      with allbreak do
      begin
        crashchancemax := 0.33;
        crashchancemin := 0.001;
        crashchance1 := 0.02;
        minimal := 0.1;
        _1maxeff := 1000000;
        _2maxeff := 2500000;
        _3maxeff := 5000000;
      end;
    end;
    end;
    with balance.timing do
    begin
    {$region BSUSP_DEMONTAGE}
    bsusp_demontage.maximum := 90;
    bsusp_demontage.levelmax := 10;
    bsusp_demontage.minimum := 60;
    bsusp_demontage.k :=3;
    bsusp_demontage.addcurrent := 10;
    bsusp_demontage.levelk := 1;
    bsusp_demontage.addcurrentmax := 20;
    bsusp_demontage.addcurrentlevelmax := 10;
    bsusp_demontage.pause := 50;
    bsusp_demontage.energy := 4000;
    {$endregion}
    
    {$region BREAK_DEMONTAGE}
    break_demontage.maximum := 60;
    break_demontage.levelmax := 10;
    break_demontage.minimum := 30;
    break_demontage.k := 3;
    break_demontage.addcurrent := 10;
    break_demontage.levelk := 1;
    break_demontage.addcurrentmax := 20;
    break_demontage.addcurrentlevelmax := 10;
    break_demontage.pause := 50;
    break_demontage.energy := 6000;
    {$endregion}
    
    {$region CAMERING}
    camering.maximum := 20;
    camering.levelmax := 10;
    camering.minimum := 10;
    camering.k := 1;
    camering.addcurrent := 10;
    camering.levelk := 1;
    camering.addcurrentmax := 20;
    camering.addcurrentlevelmax := 10;
    camering.pause := 50;
    camering.energy := 2000;
    {$endregion}
      
    {$region NEEDLING}
    needling.maximum := 120;
    needling.levelmax := 10;
    needling.minimum := 60;
    needling.k := 6;
    needling.addcurrent := 10;
    needling.levelk := 1;
    needling.addcurrentmax := 20;
    needling.addcurrentlevelmax := 10;
    needling.pause := 50;
    needling.energy := 8000;
    {$endregion}
      
    {$region PUMPING}
    pumping.maximum := 300;
    pumping.levelmax := 10;
    pumping.minimum := 60;
    pumping.k := 24;
    pumping.addcurrent := 10;
    pumping.levelk := 4;
    pumping.addcurrentmax := 80;
    pumping.addcurrentlevelmax := 40;
    pumping.pause := 20;
    pumping.energy := 100;
    {$endregion}
    
    {$region IT_FRAMING}
    it_framing.maximum := 600;
    it_framing.levelmax := 10;
    it_framing.minimum := 300;
    it_framing.k := 20;
    it_framing.addcurrent := 5;
    it_framing.levelk := 0;
    it_framing.addcurrentmax := 5;
    it_framing.addcurrentlevelmax := 0;
    it_framing.pause := 50;
    it_framing.energy := 30000;
    {$endregion}
      
    {$region IT_FORKING}
    it_forking.maximum := 150;
    it_forking.levelmax := 10;
    it_forking.minimum := 60;
    it_forking.k := 9;
    it_forking.addcurrent := 9;
    it_forking.levelk := 0;
    it_forking.addcurrentmax := 9;
    it_forking.addcurrentlevelmax := 0;
    it_forking.pause := 50;
    it_forking.energy := 15000;
    {$endregion}
    
    {$region IT_BSUSPING}
    it_bsusping.maximum := 90;
    it_bsusping.levelmax := 10;
    it_bsusping.minimum := 60;
    it_bsusping.k := 3;
    it_bsusping.addcurrent := 10;
    it_bsusping.levelk := 1;
    it_bsusping.addcurrentmax := 20;
    it_bsusping.addcurrentlevelmax := 10;
    it_bsusping.pause := 50;
    it_bsusping.energy := 4000;
    {$endregion}
    
    {$region IT_TRANSING}
    it_transing.maximum := 180;
    it_transing.levelmax := 10;
    it_transing.minimum := 90;
    it_transing.k := 9;
    it_transing.addcurrent := 7;
    it_transing.levelk := 0;
    it_transing.addcurrentmax := 7;
    it_transing.addcurrentlevelmax := 0;
    it_transing.pause := 50;
    it_transing.energy := 19000;
    {$endregion}
    
    {$region IT_RUDDERING}
    it_ruddering.maximum := 20;
    it_ruddering.levelmax := 10;
    it_ruddering.minimum := 10;
    it_ruddering.k := 1;
    it_ruddering.addcurrent := 10;
    it_ruddering.levelk := 1;
    it_ruddering.addcurrentmax := 20;
    it_ruddering.addcurrentlevelmax := 10;
    it_ruddering.pause := 40;
    it_ruddering.energy := 5000;
    {$endregion}
    
    {$region IT_BREAKING}
    it_breaking.maximum := 90;
    it_breaking.levelmax := 10;
    it_breaking.minimum := 60;
    it_breaking.k := 3;
    it_breaking.addcurrent := 10;
    it_breaking.levelk := 1;
    it_breaking.addcurrentmax := 20;
    it_breaking.addcurrentlevelmax := 10;
    it_breaking.pause := 50;
    it_breaking.energy := 10000;
    {$endregion}
      
    {$region IT_WHEELING}
    it_wheeling.maximum := 5;
    it_wheeling.levelmax := 3;
    it_wheeling.minimum := 2;
    it_wheeling.k := 1;
    it_wheeling.addcurrent := 10;
    it_wheeling.levelk := 1;
    it_wheeling.addcurrentmax := 20;
    it_wheeling.addcurrentlevelmax := 10;
    it_wheeling.pause := 50;
    it_wheeling.energy := 2500;
    {$endregion}
      
    {$region IT_BREAKSCARDING}
    it_breakcarding.maximum := 30;
    it_breakcarding.levelmax := 5;
    it_breakcarding.minimum := 20;
    it_breakcarding.k := 2;
    it_breakcarding.addcurrent := 10;
    it_breakcarding.levelk := 1;
    it_breakcarding.addcurrentmax := 20;
    it_breakcarding.addcurrentlevelmax := 10;
    it_breakcarding.pause := 50;
    it_breakcarding.energy := 4000;
    {$endregion}
      
    {$region IT_SENDING}
    it_sending.maximum := 2;
    it_sending.levelmax := 1;
    it_sending.minimum := 1;
    it_sending.k := 1;
    it_sending.addcurrent := 50;
    it_sending.levelk := 0;
    it_sending.addcurrentmax := 50;
    it_sending.addcurrentlevelmax := 0;
    it_sending.pause := 20;
    it_sending.energy := 0;
    {$endregion}
      
    {$region IT_REPLACING}
    it_replacing.maximum := 6;
    it_replacing.levelmax := 1;
    it_replacing.minimum := 5;
    it_replacing.k := 1;
    it_replacing.addcurrent := 30;
    it_replacing.levelk := 0;
    it_replacing.addcurrentmax := 30;
    it_replacing.addcurrentlevelmax := 0;
    it_replacing.pause := 40;
    it_replacing.energy := 1000;
    {$endregion}
    
    {$region AP_BUY}
    ap_buy.maximum := 91;
    ap_buy.levelmax := 1;
    ap_buy.minimum := 90;
    ap_buy.k := 1;
    ap_buy.addcurrent := 10;
    ap_buy.levelk := 0;
    ap_buy.addcurrentmax := 10;
    ap_buy.addcurrentlevelmax := 0;
    ap_buy.pause := 60;
    ap_buy.energy := 0;
    {$endregion}
    
    {$region AP_SELL}
    ap_sell.maximum := 120;
    ap_sell.levelmax := 10;
    ap_sell.minimum := 90;
    ap_sell.k := 3;
    ap_sell.addcurrent := 10;
    ap_sell.levelk := 0;
    ap_sell.addcurrentmax := 10;
    ap_sell.addcurrentlevelmax := 0;
    ap_sell.pause := 60;
    ap_sell.energy := 0;
    {$endregion}
  end;
  
  LOG.Add('FINISH Balancing');
end;

{$endregion}

{$region Console}

  function Left(self: string; s: string): boolean; extensionmethod;
  begin
    Result:=(self.Left(s.Length)=s);
  end;

  {include console.pas}
  ///Представляет консоль
  procedure Con(a: string);
  const
    Separator = ';';
    Passwords: array of string = (
    'ROCKER','SBIKER',
    'COOLER','COCK','SHIT',
    'GANGSTER','MAKAROV'
    );
    
  begin
    var s:=a;
    
    var R:=Separator;
    var Many:=s.Any(x->x=r);
    
    var c: array of string;
    if Many then c:=s.ToWords(Separator)
    else
    begin
      c:=new string[1];
      c[0]:=s;
    end;
    
    var Security: boolean = true;
    
    if TEST then Security:=false;
    
    var first: boolean;
    
    for var i:=0 to c.Length-1 do
    begin
    
      {$region World Edit Commands}
      if (c[i].Left('//')) and (not Security) then
      begin
        if c[i].ToLower.Left('//save') then Save;
        if c[i].ToLower.Left('//load') then Load;
        
        {$region Editor}
        if c[i].ToLower.Left('//set') then
        begin
          var _ed:=c[i].ToWords(' ');
          if _ed.Length>1 then
          begin
            if _ed[0].ToLower='//setmoney' then Con($'//set player.money {_ed[1]}');
            {$region Player}
            if _ed[1].ToLower.Left('player.') then
            begin
              var _Pl:=_ed[1].ToWords('.');
              if _Pl.Length>1 then
              begin
                if _ed.Length>2 then
                case _Pl[1].ToLower of
                  {$region (energy,water,food,level,luck,money)}
                  'energy',string('e'):
                  begin
                    if _ed[2].Any(x -> x='%') then
                    begin
                      _ed[2]:=_ed[2].Remove('%');
                      var k: integer; 
                      if (integer.TryParse(_ed[2],k)) and (k<=100) and (k>=0) then
                      begin
                        player.energy:=Round((k/100)*player.maxenergy);
                      end;
                    end
                    else
                    begin
                      var k: integer; 
                      if (integer.TryParse(_ed[2],k)) and (k<=player.maxenergy) and (k>=0) then player.energy:=k;
                    end;
                  end;
                  
                  'maxenergy','me':
                  begin
                    var k: integer; 
                    if (integer.TryParse(_ed[2],k)) and (k>0) then
                    begin
                      player.maxenergy:=k;
                      if player.maxenergy>player.energy then player.energy:=player.maxenergy;
                    end;
                  end;
                  
                  'water',string('w'):
                  begin
                    if _ed[2].Any(x -> x='%') then
                    begin
                      _ed[2]:=_ed[2].Remove('%');
                      var k: integer; 
                      if (integer.TryParse(_ed[2],k)) and (k<=100) and (k>=0) then
                      begin
                        player.water:=Round((k/100)*player.maxwater);
                      end;
                    end
                    else
                    begin
                      var k: integer; 
                      if (integer.TryParse(_ed[2],k)) and (k<=player.maxwater) and (k>=0) then player.water:=k;
                    end;
                  end;
                  
                  'maxwater','mw':
                  begin
                    var k: integer; 
                    if (integer.TryParse(_ed[2],k)) and (k>0) then
                    begin
                      player.maxwater:=k;
                      if player.maxwater>player.water then player.water:=player.maxwater;
                    end;
                  end;
                  
                  'food',string('f'):
                  begin
                    if _ed[2].Any(x -> x='%') then
                    begin
                      _ed[2]:=_ed[2].Remove('%');
                      var k: integer; 
                      if (integer.TryParse(_ed[2],k)) and (k<=100) and (k>=0) then
                      begin
                        player.food:=Round((k/100)*player.maxfood);
                      end;
                    end
                    else
                    begin
                      var k: integer; 
                      if (integer.TryParse(_ed[2],k)) and (k<=player.maxfood) and (k>=0) then player.food:=k;
                    end;
                  end;
                  
                  'maxfood','mf':
                  begin
                    var k: integer; 
                    if (integer.TryParse(_ed[2],k)) and (k>0) then
                    begin
                      player.maxfood:=k;
                      if player.maxfood>player.food then player.food:=player.maxfood;
                    end;
                  end;
                  
                  'all':
                  begin
                    if _ed[2].Count(x-> x='%')<=1 then
                    begin
                      _ed[2]:=_ed[2].Remove('%');
                      var k: integer; 
                      if (integer.TryParse(_ed[2],k)) and (k<=100) and (k>=0) then
                      begin
                        player.energy:=Round((k/100)*player.maxenergy);
                        player.water:=Round((k/100)*player.maxwater);
                        player.food:=Round((k/100)*player.maxfood);
                      end
                      else
                      begin
                        if _ed[2].ToLower='max' then
                        begin
                          player.energy:=player.maxenergy;
                          player.water:=player.maxwater;
                          player.food:=player.maxfood;
                        end;
                        if _ed[2].ToLower='min' then
                        begin
                          player.energy:=0;
                          player.water:=0;
                          player.food:=0;
                        end;
                      end;
                      
                    end;
                  end;
                  
                  'level','lvl',string('l'):
                  begin
                    var k: integer; 
                    if (integer.TryParse(_ed[2],k)) and (k>=0) then
                    begin
                      player.level:=k;
                    end;
                  end;
                  
                  'money',string('m'):
                  begin
                    var k: uint64; 
                    if (uint64.TryParse(_ed[2],k)) then
                    begin
                      player.money:=k;
                    end;
                  end;
                  
                  'luck':
                  begin
                    if (_ed[2].Any(x->x='%')) then
                    begin
                      var k: real; 
                      if (real.TryParse(_ed[2],k)) and (k>=0) and (k<=1) then
                      begin
                        player.luck:=k;
                      end;
                    end
                    else
                    begin
                      if ((_ed[2].Any(x->x='%')) and (_ed[2].Count(x -> x='%')=1)) then
                      begin
                        var k: real; 
                        _ed[2]:=_ed[2].Remove('%');
                        if (real.TryParse(_ed[2],k)) and (k>=0) and (k<=100) then
                        begin
                          player.luck:=k/100;
                        end;
                        
                      end;
                    end;
                  end;
                  {$endregion}
                
                end;
              end;
            end;
            {$endregion}
          end;
        end;
        
        if c[i].ToLower.Left('//get') then
        begin
          var _ed:=c[i].ToWords;
          if _ed.Length>1 then
          begin
            if _ed[1].ToLower = 'object254' then AddItem(QuestAwardItem.Object254);
            if _ed[1].ToLower = 'testsuperfork' then AddItem(QuestAwardItem.TestSuperFork);
          end;
        end;
        
        {$endregion}
        
        if c[i].ToLower.Left('//getcamera') then
        begin
          var sw: TItem;
          sw.tpsort:=9;
          sw.veight:=balance.cameraveight;
          AddItem(sw);
        end;
        if c[i].ToLower.Left('//getneedle') then
        begin
          var sw: TItem;
          sw.tpsort:=12;
          sw.veight:=balance.needleveight;
          AddItem(sw);
        end;
      end;
      {$endregion}
      
      {$region Security Commands}
      if c[i].ToLower.Left('///') then
      begin
        if c[i].ToLower.Left('///security') then
        begin
          var k:=c[i].ToWords(' ');
          if k<>nil then
          begin
            if k.length>1 then
            begin
              if k[1].ToLower='off' then
              begin
                first:=true;
              end;
            end;
          end;
        end;
        if c[i].ToLower.Left('///unlock') and first then
        begin
          var k:=c[i].ToWords(' ');
          if k<>nil then
          begin
            if k.length>1 then
            begin
              var _Pass := k[1];
              for var j:=0 to Passwords.Length-1 do
              begin
                if _Pass = Passwords[j] then
                begin
                  if security then security:=false;
                end;
              end;
            end;
          end;
        end;
      end;
      {$endregion}
      
      {$region Other Commands}
      if c[i].ToLower.Left('/save') then save;
      if c[i].ToLower.Left('/load') then load;
      if c[i].ToLower.Left('/dumplog') then
      begin
        var _dl:=c[i].ToWords(' ');
        if _dl<>nil then
        begin
          if _dl.Length>1 then
          begin
            LOG.Dump(_dl[1]);
          end;
        end;
      end;
      {$endregion}
    end;
  end;

  function ReplaceDirectives(s: string): string;
  begin
    Result := s;
    Result := Result.Replace('#spdstdb',Balance.minspeedonb.ToString);
    Result := Result.Replace('#spdstdg',Balance.minspeedong.ToString);
    Result := Result.Replace('#minpressure',Balance.bk.wheel.pressure.minimum.ToString);
    Result := Result.Replace('#avgpressure',Balance.bk.wheel.pressure.average.ToString);
    Result := Result.Replace('#maxpressure',Balance.bk.wheel.pressure.maximum.ToString);
  end;
  
  function ReplaceDirectives(s: array of string): array of string;
  begin
    Result := Copy(s);
    for var i:=0 to Result.Length-1 do
    begin
      Result[i] := ReplaceDirectives(Result[i]);
    end;
  end;
{$endregion}

{$region New Game}
procedure DoNewGame;
var IsAppear: boolean;
begin
  var ng: TBlock;
  ng.status:=true;
  if svg.available then
  while ng.status do
  begin
    KTX.resize;OutNull(ng.input,ng.output);
    
    Console.SetCursorPosition(1,1);write(inter[41].face[0],'?');
    Console.SetCursorPosition(1,2);write(inter[41].face[1]);
    
    Console.SetCursorPosition(1,4);write('(1) ',inter[41].face[2]);
    Console.SetCursorPosition(1,5);write('(0) ',inter[41].face[3]);
    
    KTX.read_1;
    while (ng.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx)) do
    begin
      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
      readln(ng.input);
    end;
    KTX.read_0;
    
    if ng.input='0' then ng.status:=false;
    
    if ng.input='1' then
    begin
      save; load;
      if not System.IO.Directory.Exists('backups') then MkDir('backups');
      var ss:=$'{svg.date.Year mod 100}{svg.date.Month.ToString.PadLeft(2,''0'')}{svg.date.Day.ToString.PadLeft(2,''0'')}{svg.date.Hour.ToString.PadLeft(2,''0'')}{svg.date.Minute.ToString.PadLeft(2,''0'')}{svg.date.Second.ToString.PadLeft(2,''0'')}';
      System.IO.File.Copy('save.dat',$'backups/save{ss}.dat');
      if DeleteFile('save.dat') then ng.status:=false;
      IsAppear:=true;
    end;
    
  end else IsAppear:=true;
  
  if IsAppear then
  begin
    svg.autosave:=true;
    svg.available:=false;
    svg.animspeed:=4;
    svg.levelvisible:=false;
    svg.time_type:=0;
    svg.wrspeed:=30;
    shop.olds:=true;
    
    ResetRandomStreetPlace;
    ReEco();
    player.itemcount:=0;
    player.items:=nil;
    player.tent:=false;
    
    tutorial:=0;
    player.position:=0;
    player.experience:=0;
    player.level:=0;
    player.luck:=0.5;
    player.maxenergy:=Balance.NEWGAME.maxenergy;
    player.maxveight:=Balance.NEWGAME.maxveight;
    player.maxfood:=Balance.NEWGAME.maxfood;
    player.maxwater:=Balance.NEWGAME.maxwater;
    player.maxhealth:=100000;
    player.respect:=Balance.Send.minrespect;
    player.money:=0;
    player.time:=new System.DateTime(2012,05,10,18,00,00);
    
    player.energy:=player.maxenergy;
    player.water:=player.maxwater;
    player.food:=player.maxfood;
    player.health:=player.maxhealth;
    
    player.bike.name:='Name';
    player.bike.odo:=0;
    player.bike.light:=false;
    
    for var i:=0 to quests.Length-1 do quests[i].stage:=0;
    
    {$region Setup First Bike}
    begin
      player.bike.frame.name:='Start H100';
      player.bike.frame.veight:=3300;
      player.bike.frame.suspensionflag:=false;
      player.bike.frame.price:=8300;
      player.bike.frame.material:=0;
      player.bike.frame.maxhitpoints:=Balance.bk.Frame.material.steel.hitpoints;
      player.bike.frame.hitpoints:=Round(player.bike.frame.maxhitpoints*(1-PABCSystem.Random*0.125));
      
      player.bike.fork.name:='Start R300';
      player.bike.fork.veight:=1300;
      player.bike.fork.price:=3900;
      player.bike.fork.suspensionflag:=false;
      player.bike.fork.suspension:=0;
      player.bike.fork.travel:=0;
      player.bike.fork.block:=false;
      player.bike.fork.blocks:=false;
      player.bike.fork.maxhitpoints:=Balance.bk.fork.suspension.steel.hitpoints;
      player.bike.fork.hitpoints:=Round(player.bike.fork.maxhitpoints*(1-PABCSystem.Random*0.125));
      
      player.bike.bsusp.flag:=false;
      player.bike.bsusp.blocks:=false;
      
      player.bike.transmission.name:='Start K10';
      player.bike.transmission.count:=1;
      player.bike.transmission.fores:=false;
      player.bike.transmission.maxhitpoints:=Balance.bk.transmission.count6.hitpoints;
      player.bike.transmission.hitpoints:=Round(player.bike.transmission.maxhitpoints*(1-PABCSystem.Random*0.125));
      player.bike.transmission.veight:=1800;
      player.bike.transmission.price:=2900;
      
      player.bike.rudder.name:='Start Y10';
      player.bike.rudder.sort:=0;
      player.bike.rudder.maxhitpoints:=Balance.bk.rudder.sort1.hitpoints;
      player.bike.rudder.hitpoints:=Round(player.bike.rudder.maxhitpoints*(1-PABCSystem.Random*0.125));
      player.bike.rudder.veight:=1400;
      player.bike.rudder.price:=1200;
      
      player.bike.backbreak.flag:=true;
      player.bike.backbreak.name:='Start V100';
      player.bike.backbreak.cardname:='Start V100';
      player.bike.backbreak.sort:=1;
      player.bike.backbreak.maxhitpoints:=Balance.bk.backbreak.vbrake.hitpoints;
      player.bike.backbreak.hitpoints:=Round(player.bike.backbreak.maxhitpoints*(1-PABCSystem.Random*0.125));
      player.bike.backbreak.veight:=800;
      player.bike.backbreak.price:=1000;
      player.bike.backbreak.maxeffection:=balance.BreakCardEffection.VBrake.minimal;
      player.bike.backbreak.effection:=player.bike.backbreak.maxeffection;
      
      player.bike.frontbreak.flag:=false;
      
      player.bike.backwheel.name:='Circle F10';
      player.bike.backwheel.needles:=balance.bk.wheel.needle.maximum;
      player.bike.backwheel.maxhitpoints:=1000000;
      player.bike.backwheel.hitpoints:=Round(player.bike.backwheel.maxhitpoints*(1-PABCSystem.Random*0.125));
      player.bike.backwheel.eight:=false;
      player.bike.backwheel.camerahit:=false;
      player.bike.backwheel.pressure:=2;
      player.bike.backwheel.veight:=2400;
      player.bike.backwheel.price:=2300;
      
      player.bike.frontwheel.name:='Circle F10';
      player.bike.frontwheel.needles:=balance.bk.wheel.needle.maximum;
      player.bike.frontwheel.maxhitpoints:=1000000;
      player.bike.frontwheel.hitpoints:=Round(player.bike.frontwheel.maxhitpoints*(1-PABCSystem.Random*0.125));
      player.bike.frontwheel.eight:=false;
      player.bike.frontwheel.camerahit:=false;
      player.bike.frontwheel.pressure:=2;
      player.bike.frontwheel.veight:=2400;
      player.bike.frontwheel.price:=2300;
      
    end;
    {$endregion}
    
    for var i:=0 to map.Length-1 do
    begin
      map[i].apartment.apartment:=false;
      map[i].apartment.itemcount:=0;
      map[i].apartment.items:=nil;
    end;
    
    Alarm.Status:=false;
    
    map[0].apartment.apartment:=true;
  
    ng.status:=true;
    var _22: boolean;
    while ng.status do
    begin
      KTX.resize;OutNull(ng.input,ng.output);
      
      Console.SetCursorPosition(1,1);
      write(inter[41].face[4]);
      
      KTX.read_1;
      while (ng.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx)) do
      begin
        Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
        readln(ng.input);
      end;
      KTX.read_0;
      
      if (not ng.input.Any(x -> x.IsDigit)) and (ng.input.Length>=balance.minnicksize) and (ng.input.Length<=balance.maxnicksize) then
      begin
        ng.status:=false;
        _22:=true;
      end;
    end;
    if _22 then
    begin
      Console.BackgroundColor:=ConsoleColor.Black;
      Console.ForegroundColor:=ConsoleColor.White;
      Console.Clear;
      sleep(1000);
      loop 2 do
      begin
        for var i:=0 to 10 do
        begin
          Console.BackgroundColor:=ConsoleColor.Black;
          Console.ForegroundColor:=ConsoleColor.White;
          Console.Clear;
          Sleep(71-7*i);
          KTX.A_kotov;
          KTX.A_projects(ConsoleColor.White);
          sleep(25+2*i);
        end;
        sleep(333);
      end;
      Console.Clear;
      sleep(500);
      KTX.A_biker(ConsoleColor.White,ConsoleColor.White);
      sleep(2000);
      
      player.nickname:=ng.input;
      svg.available:=true;
      menu.output:=2;
      Console.ForegroundColor:=ConsoleColor.Black;
      Console.BackgroundColor:=ConsoleColor.White;
      Console.Clear;
      sleep(2000);
    end;
  end; 
end;
{$endregion}

begin
  System.Environment.CurrentDirectory := System.IO.Path.GetDirectoryName(GetEXEFileName);
  LowLoader.ToString;
  LowLoader := nil;
  LOG.Add('Biker 2 | Log information');
  {$region BALANCING}
  begin
    Balancing();
  end;
 {$endregion}
  {$region MAP LOAD}
  begin
    var mapfile: TextFile;
    var mapid1: integer;
    var mapid2: integer;
    var mapinput: string;
    var typeid: integer;
    LOG.Add('Check for file map.dat');
    if FileExists('map.dat') then
    begin
      LOG.Add('Opening to read map.dat');
      reset(mapfile,'map.dat',encoding.UTF8);
      LOG.Add('START reading map.dat');
      while not mapfile.Eof do
      begin
        try
        readln(mapfile,mapinput);
        if mapinput.left(4)='map=' then
        begin
          mapname:=Copy(mapinput,5,64);
        end;
        if mapinput.left(8)='version=' then
        begin
          mapversion:=Copy(mapinput,9,16);
        end;
        if mapinput.left(7)='update=' then
        begin
          mapupdate:=Copy(mapinput,8,16);
        end;
        if mapinput.left(6)='towns=' then
        begin
          SetLength(map,Copy(mapinput,7,16).ToInteger);
        end;
        if mapinput.left(8)='newtype=' then
        begin
          typeid+=1;
          SetLength(types,typeid);
          types[typeid-1]:=Copy(mapinput,9,32);
        end;
        if mapinput.left(5)='town=' then
        begin
          mapid1:=StrToInt(Copy(mapinput,6,32));
          mapid2:=0;
        end;
        if mapinput.left(5)='name=' then
        begin
          map[mapid1].name:=Copy(mapinput,6,64);
        end;
        if mapinput.left(5)='type=' then
        begin
          map[mapid1].sort:=StrToInt(Copy(mapinput,6,32));
        end;
        if mapinput.left(5)='posx=' then
        begin
          map[mapid1].x:=StrToFloat(Copy(mapinput,6,64));
        end;
        if mapinput.left(5)='posy=' then
        begin
          map[mapid1].y:=StrToFloat(Copy(mapinput,6,64));
        end;
        if mapinput.left(5)='road=' then
        begin
          mapid2+=1;
          SetLength(map[mapid1].road,mapid2);
          map[mapid1].road[mapid2-1].id:=StrToInt(mapinput.ToWords[1])-1;
          map[mapid1].road[mapid2-1].tp:=mapinput.ToWords[2];
        end;
        except
          on System.Exception do block:=true;
        end;
      end;
      LOG.Add('FINISH reading map.dat');
      close(mapfile);
      LOG.Add('Close map.dat');
    end
    else block:=true;
  end;
  {$endregion}
  {$region INTERFACE LOAD}
  begin
    var interfacefile: TextFile;
    var interfaceid1: integer;
    var interfaceid2: integer;
    var interfaceinput: string;
    LOG.Add('Check for file interface.dat');
    if FileExists('interface.dat') then
    begin
      LOG.Add('Opening to read interface.dat');
      reset(interfacefile,'interface.dat',encoding.UTF8);
      LOG.Add('START reading interface.dat');
      while not interfacefile.Eof do
      begin
        try
          readln(interfacefile,interfaceinput);
          if interfaceinput.Left(2)<>'//' then
          begin
            if interfaceinput.Left(8).ToLower='newblock' then
            begin
              interfaceid1+=1;interfaceid2:=0;
              SetLength(inter,interfaceid1);
            end
            else
            begin
              interfaceid2+=1;
              SetLength(inter[interfaceid1-1].face,interfaceid2);
              inter[interfaceid1-1].face[interfaceid2-1]:=interfaceinput;
            end;
          end;
        except
          on System.Exception do block:=true;
        end;
      end;
      LOG.Add('FINISH reading interface.dat');
      close(interfacefile);
      LOG.Add('Close interface.dat');
    end
    else block:=true;
  end;
  SetLength(month,12);
  for var i:=0 to month.Length-1 do
  begin
    month[i]:=inter[3].face[i];
  end;
  
  
  
  {$endregion}
  {$region HELP LOAD}
    begin
    var helpfile: TextFile;
    var helpid1: integer;
    var helpid2: integer;
    var helpinput: string;
    LOG.Add('Check for file help.dat');
    if FileExists('help.dat') then
    begin
      help_available:=true;
      LOG.Add('Opening to read help.dat');
      reset(helpfile,'help.dat',encoding.UTF8);
      LOG.Add('START reading help.dat');
      while not helpfile.Eof do
      begin
        try
          readln(helpfile,helpinput);
          if helpinput.Left(2)<>'//' then
          begin
            if helpinput.Left(8).ToLower='newblock' then
            begin
              helpid1+=1;helpid2:=0;
              SetLength(helps,helpid1);
            end
            else
            begin
              helpid2+=1;
              SetLength(helps[helpid1-1].value,helpid2);
              helps[helpid1-1].value[helpid2-1]:=helpinput;
            end;
          end;
        except
          on System.Exception do help_available:=false;
        end;
      end;
      LOG.Add('FINISH reading help.dat');
      close(helpfile);
      LOG.Add('Close help.dat');
    end
    else help_available:=false;
  end;{$endregion}
  {$region BIKE LOAD}
  begin
    var bikefile: TextFile;
    var bikeid1: integer;
    var bikeid2: integer;
    var bikeinput: string;
    LOG.Add('Check for file bike.dat');
    if FileExists('bike.dat') then
    begin
      LOG.Add('Opening to read bike.dat');
      reset(bikefile,'bike.dat',encoding.UTF8);
      LOG.Add('START reading bike.dat');
      while not bikefile.Eof do
      begin
        try
          readln(bikefile,bikeinput);
          if bikeinput.Left(2)<>'//' then
          begin
            if bikeinput.Left(8).ToLower='newblock' then
            begin
              bikeid1+=1;bikeid2:=0;
              SetLength(bikes,bikeid1);
            end
            else
            begin
              bikeid2+=1;
              SetLength(bikes[bikeid1-1].value,bikeid2);
              bikes[bikeid1-1].value[bikeid2-1]:=bikeinput;
            end;
          end;
        except
          on System.Exception do block:=true;
        end;
      end;
      LOG.Add('FINISH reading bike.dat');
      close(bikefile);
      LOG.Add('Close bike.dat');
    end
    else block:=true;
  end;  
  {$endregion}
  {$region ITEMS LOAD}
  begin
    var itemsfile: TextFile;
    var itemsid1: integer;
    var itemsid2: integer;
    var itemsinput: string;
    LOG.Add('Check for file items.dat');
    if FileExists('items.dat') then
    begin
      LOG.Add('Opening to read items.dat');
      reset(itemsfile,'items.dat',encoding.UTF8);
      LOG.Add('START reading items.dat');
      while not itemsfile.Eof do
      begin
        try
          readln(itemsfile,itemsinput);
          if itemsinput.Left(2)<>'//' then
          begin
            if itemsinput.Left(8).ToLower='newblock' then
            begin
              itemsid1+=1;itemsid2:=0;
              SetLength(items,itemsid1);
            end
            else
            begin
              itemsid2+=1;
              SetLength(items[itemsid1-1].value,itemsid2);
              items[itemsid1-1].value[itemsid2-1]:=itemsinput;
            end;
          end;
        except
          on System.Exception do block:=true;
        end;
      end;
      LOG.Add('FINISH reading items.dat');
      close(itemsfile);
      LOG.Add('Close items.dat');
    end
    else block:=true;
  end;  
  {$endregion}
  {$region SHOP LOAD}
  begin
    var shoptype: string;
    var shopframes: array of TFrame;
    var shopforks: array of TFork;
    var shopbacks: array of TBack;
    var shoptrans: array of TTrans;
    var shoprudders: array of TRudder;
    var shopbrakes: array of TBrake;
    var shopwheels: array of TWheel;
    var shopcards: array of TCard;
    LOG.Add('Check for file shop.dat');
    if FileExists('shop.dat') then
    begin
      LOG.Add('Opening to read shop.dat');
      LOG.Add('START reading shop.dat');
      var shophard:=ReadAllLines('shop.dat',encoding.UTF8);
      LOG.Add('FINISH reading shop.dat');
      LOG.Add('Close shop.dat');
      LOG.Add('START analizing shop.dat');
      if shophard<>nil then
      begin
        {$region Analizing}
        for var i:=0 to shophard.Length-1 do
        begin
          case shophard[i].ToLower of
            '[frames]': shoptype:='frames';
            '[forks]': shoptype:='forks';
            '[backs]': shoptype:='backs';
            '[trans]': shoptype:='trans';
            '[rudders]': shoptype:='rudders';
            '[brakes]': shoptype:='brakes';
            '[wheels]': shoptype:='wheels';
            '[cards]': shoptype:='cards';
            '[end]': shoptype:='null';
          end;
          if (shophard[i].ToLower<>'[frames]')
          and (shophard[i].ToLower<>'[forks]')
          and (shophard[i].ToLower<>'[backs]')
          and (shophard[i].ToLower<>'[trans]')
          and (shophard[i].ToLower<>'[rudders]')
          and (shophard[i].ToLower<>'[brakes]')
          and (shophard[i].ToLower<>'[wheels]')
          and (shophard[i].ToLower<>'[cards]')
          and (shophard[i].ToLower<>'[end]') then
          begin
            if shoptype='frames' then
            begin
              var KSTA:=shophard[i].ToWords('	');
              if shopframes<>nil then SetLength(shopframes,shopframes.Length+1)
              else SetLength(shopframes,1);
              shopframes[shopframes.Length-1].lvl:=StrToInt(ksta[0]);
              shopframes[shopframes.Length-1].maxlvl:=StrToInt(ksta[1]);
              if shopframes[shopframes.Length-1].maxlvl>=10 then shopframes[shopframes.Count-1].maxlvl:=integer.MaxValue;
              shopframes[shopframes.Length-1].name:=ksta[2].Replace('_',' ');
              shopframes[shopframes.Length-1].material:=StrToInt(ksta[3]);
              shopframes[shopframes.Length-1].susp:=IntToBool(StrToInt(ksta[4]));
              shopframes[shopframes.Length-1].price:=StrToInt(ksta[5]);
              shopframes[shopframes.Length-1].veight:=StrToInt(ksta[6]);
            end;
            if shoptype='forks' then
            begin
              var KSTA:=shophard[i].ToWords('	');
              if shopforks<>nil then SetLength(shopforks,shopforks.Length+1)
              else SetLength(shopforks,1);
              shopforks[shopforks.Length-1].lvl:=StrToInt(ksta[0]);
              shopforks[shopforks.Length-1].maxlvl:=StrToInt(ksta[1]);
              if shopforks[shopforks.Length-1].maxlvl>=10 then shopforks[shopforks.Count-1].maxlvl:=integer.MaxValue;
              shopforks[shopforks.Length-1].name:=ksta[2].Replace('_',' ');
              shopforks[shopforks.Length-1].susp:=IntToBool(StrToInt(ksta[3]));
              shopforks[shopforks.Length-1].sort:=StrToInt(ksta[4]);
              shopforks[shopforks.Length-1].travel:=StrToInt(ksta[5]);
              shopforks[shopforks.Length-1].block:=IntToBool(StrToInt(ksta[6]));
              shopforks[shopforks.Length-1].price:=StrToInt(ksta[7]);
              shopforks[shopforks.Length-1].veight:=StrToInt(ksta[8]);
            end;
            if shoptype='backs' then
            begin
              var KSTA:=shophard[i].ToWords('	');
              if shopbacks<>nil then SetLength(shopbacks,shopbacks.Length+1)
              else SetLength(shopbacks,1);
              shopbacks[shopbacks.Length-1].lvl:=StrToInt(ksta[0]);
              shopbacks[shopbacks.Length-1].maxlvl:=StrToInt(ksta[1]);
              if shopbacks[shopbacks.Length-1].maxlvl>=10 then shopbacks[shopbacks.Count-1].maxlvl:=integer.MaxValue;
              shopbacks[shopbacks.Length-1].name:=ksta[2].Replace('_',' ');
              shopbacks[shopbacks.Length-1].sort:=StrToInt(ksta[3]);
              shopbacks[shopbacks.Length-1].travel:=StrToInt(ksta[4]);
              shopbacks[shopbacks.Length-1].block:=IntToBool(StrToInt(ksta[5]));
              shopbacks[shopbacks.Length-1].price:=StrToInt(ksta[6]);
              shopbacks[shopbacks.Length-1].veight:=StrToInt(ksta[7]);
            end;
            if shoptype='trans' then
            begin
              var KSTA:=shophard[i].ToWords('	');
              if shoptrans<>nil then SetLength(shoptrans,shoptrans.Length+1)
              else SetLength(shoptrans,1);
              shoptrans[shoptrans.Length-1].lvl:=StrToInt(ksta[0]);
              shoptrans[shoptrans.Length-1].maxlvl:=StrToInt(ksta[1]);
              if shoptrans[shoptrans.Length-1].maxlvl>=10 then shoptrans[shoptrans.Count-1].maxlvl:=integer.MaxValue;
              shoptrans[shoptrans.Length-1].name:=ksta[2].Replace('_',' ');
              shoptrans[shoptrans.Length-1].count:=StrToInt(ksta[3]);
              shoptrans[shoptrans.Length-1].fores:=IntToBool(StrToInt(ksta[4]));
              shoptrans[shoptrans.Length-1].price:=StrToInt(ksta[5]);
              shoptrans[shoptrans.Length-1].veight:=StrToInt(ksta[6]);
            end;
            if shoptype='rudders' then
            begin
              var KSTA:=shophard[i].ToWords('	');
              if shoprudders<>nil then SetLength(shoprudders,shoprudders.Length+1)
              else SetLength(shoprudders,1);
              shoprudders[shoprudders.Length-1].lvl:=StrToInt(ksta[0]);
              shoprudders[shoprudders.Length-1].maxlvl:=StrToInt(ksta[1]);
              if shoprudders[shoprudders.Length-1].maxlvl>=10 then shoprudders[shoprudders.Count-1].maxlvl:=integer.MaxValue;
              shoprudders[shoprudders.Length-1].name:=ksta[2].Replace('_',' ');
              shoprudders[shoprudders.Length-1].sort:=StrToInt(ksta[3]);
              shoprudders[shoprudders.Length-1].price:=StrToInt(ksta[4]);
              shoprudders[shoprudders.Length-1].veight:=StrToInt(ksta[5]);
            end;
            if shoptype='brakes' then
            begin
              var KSTA:=shophard[i].ToWords('	');
              if shopbrakes<>nil then SetLength(shopbrakes,shopbrakes.Length+1)
              else SetLength(shopbrakes,1);
              shopbrakes[shopbrakes.Length-1].lvl:=StrToInt(ksta[0]);
              shopbrakes[shopbrakes.Length-1].maxlvl:=StrToInt(ksta[1]);
              if shopbrakes[shopbrakes.Length-1].maxlvl>=10 then shopbrakes[shopbrakes.Count-1].maxlvl:=integer.MaxValue;
              shopbrakes[shopbrakes.Length-1].name:=ksta[2].Replace('_',' ');
              shopbrakes[shopbrakes.Length-1].sort:=StrToInt(ksta[3]);
              shopbrakes[shopbrakes.Length-1].price:=StrToInt(ksta[4]);
              shopbrakes[shopbrakes.Length-1].veight:=StrToInt(ksta[5]);
            end;
            if shoptype='wheels' then
            begin
              var KSTA:=shophard[i].ToWords('	');
              if shopwheels<>nil then SetLength(shopwheels,shopwheels.Length+1)
              else SetLength(shopwheels,1);
              shopwheels[shopwheels.Length-1].lvl:=StrToInt(ksta[0]);
              shopwheels[shopwheels.Length-1].maxlvl:=StrToInt(ksta[1]);
              if shopwheels[shopwheels.Length-1].maxlvl>=10 then shopwheels[shopwheels.Count-1].maxlvl:=integer.MaxValue;
              shopwheels[shopwheels.Length-1].name:=ksta[2].Replace('_',' ');
              shopwheels[shopwheels.Length-1].maxhp:=StrToInt(ksta[3])*1000;
              shopwheels[shopwheels.Length-1].price:=StrToInt(ksta[4]);
              shopwheels[shopwheels.Length-1].veight:=StrToInt(ksta[5]);
            end;
            if shoptype='cards' then
            begin
              var KSTA:=shophard[i].ToWords('	');
              if shopcards<>nil then SetLength(shopcards,shopcards.Length+1)
              else SetLength(shopcards,1);
              shopcards[shopcards.Length-1].lvl:=StrToInt(ksta[0]);
              shopcards[shopcards.Length-1].maxlvl:=StrToInt(ksta[1]);
              if shopcards[shopcards.Length-1].maxlvl>=10 then shopcards[shopcards.Count-1].maxlvl:=integer.MaxValue;
              shopcards[shopcards.Length-1].name:=ksta[2].Replace('_',' ');
              shopcards[shopcards.Length-1].sort:=StrToInt(ksta[3]);
              shopcards[shopcards.Length-1].maxeff:=StrToInt(ksta[4])*1000;
              shopcards[shopcards.Length-1].price:=StrToInt(ksta[5]);
              //shopcards[shopcards.Length-1].veight:=0;
            end;
          end;
        end;{$endregion}
        
        if shopbacks<>nil then
        begin
          balance.MinLevel.BackSusps:=integer.MaxValue;
          for var i:=0 to shopbacks.Length-1 do
          begin
            if shopbacks[i].lvl<balance.MinLevel.BackSusps then balance.MinLevel.BackSusps:=shopbacks[i].lvl;
          end;
        end;
        
        shop.frames:=shopframes;
        shop.forks:=shopforks;
        shop.backs:=shopbacks;
        shop.trans:=shoptrans;
        shop.rudders:=shoprudders;
        shop.brakes:=shopbrakes;
        shop.wheels:=shopwheels;
        shop.cards:=shopcards;
      end
      else
      begin
        block:=true;
        LOG.Add('E! Shop.dat is empty');
      end;
      LOG.Add('FINISH analizing shop.dat');
    end
    else block:=true;
  end;
  {$endregion}
  {$region LOAD QUESTS}
  begin
    quests:=new TQuest[questcount];
    var questid1: integer;
    var questid2: integer;
    LOG.Add('Check for file quest.dat');
    if FileExists('quest.dat') then
    begin
      LOG.Add('Opening to read quest.dat');
      LOG.Add('START reading quest.dat');
      var queststring: array of string;
      queststring:=ReadAllLines('quest.dat',encoding.UTF8);
      LOG.Add('FINISH reading quest.dat');
      LOG.Add('Close quest.dat');
      LOG.Add('START analizing quest.dat');
      if queststring<>nil then
      begin
        var questtype: string = 'null';
        for var i:=0 to queststring.Length-1 do
        begin
          case queststring[i].ToLower of
            '[quest]': questtype:='quest';
            '[interface]': questtype:='int';
            '[end]': questtype:='null';
          end;
          if (queststring[i].ToLower<>'[quest]')
          and (queststring[i].ToLower<>'[interface]')
          and (queststring[i].ToLower<>'[end]') then
          begin
            if questtype='quest' then
            begin
              var _ss_ := queststring[i].Replace('@',' ').Replace('_',' ').Replace('(',' ').Replace(')',' ');
              //var tn := queststring[i].ToWords('()'.ToArray);
              var ttp := _ss_.ToWords;
              var tp := queststring[i].ToWords('=');
              if ttp[1].Left(4)='name' then
              begin
                quests[StrToInt(ttp[0])].name:=tp[1];
              end;
              if ttp[1]='stage' then
              begin
                if quests[StrToInt(ttp[0])].stagesname = nil then
                begin
                  SetLength(quests[StrToInt(ttp[0])].stagesname,1);
                end
                else
                begin
                  SetLength(quests[StrToInt(ttp[0])].stagesname,quests[StrToInt(ttp[0])].stagesname.Length+1);
                end;
                quests[StrToInt(ttp[0])].stagesname[quests[StrToInt(ttp[0])].stagesname.Length-1].id:=StrToInt(ttp[2]);
                quests[StrToInt(ttp[0])].stagesname[quests[StrToInt(ttp[0])].stagesname.Length-1].purpose:=tp[1];
              end;
            end;
            if questtype='int' then
            begin
              try
                if queststring[i].Left(2)<>'//' then
                begin
                  if queststring[i].Left(8).ToLower='newblock' then
                  begin
                    questid1+=1;questid2:=0;
                    SetLength(interquest,questid1);
                  end
                  else
                  begin
                    questid2+=1;
                    SetLength(interquest[questid1-1].value,questid2);
                    interquest[questid1-1].value[questid2-1]:=queststring[i];
                  end;
                end;
              except
                on System.Exception do block:=true;
              end;
            end;
          end;
        end;
      end
      else
      begin
        block:=true;
        LOG.Add('E! quest.dat is empty');
      end;
      LOG.Add('FINISH analizing quest.dat');
    end
    else block:=true;
  end;
  {$endregion}
  {$region LOAD VERSIONS}
  begin
    var filename:='version.dat';
    LOG.Add('Check for file ',filename);
    if System.IO.File.Exists(filename) then
    begin
      LOG.Add('opening to read ',filename);
      LOG.Add('START reading ',filename);
      var s:=ReadAllLines(filename);
      LOG.Add('FINISH reading ',filename);
      LOG.Add('Close ',filename);
      LOG.Add('START analizing ',filename);
      if s<>nil then
      begin
        var id1, id2: integer;
        for var i:=0 to s.Length-1 do
        begin
          try
            if s[i].Left(2)<>'//' then
            begin
              if s[i].Left(8).ToLower='newblock' then
              begin
                id1+=1;id2:=-1;
                SetLength(VersionInfo.Versions,id1);
              end
              else
              begin
                id2+=1;
                if id2>0 then SetLength(VersionInfo.Versions[id1-1].Description,id2);
                if id2=0 then VersionInfo.Versions[id1-1].Name:=s[i]
                else VersionInfo.Versions[id1-1].Description[id2-1]:=s[i];
              end;
            end;
          except
            on System.Exception do block:=true;
          end;
        end;
      end;
      LOG.Add('FINISH analizing ',filename);
    end;
  end;
  {$endregion}
  {$region START GAME}
  if block then
  begin
    LOG.Add('FATAL ERROR');
    exit;
  end;
  LOG.Add('');LOG.Add('START GAME');LOG.Add('');
  load;
  if A_B1 then
  begin
    LOG.Add('START Animation B1');
    KTX.B1;
    LOG.Add('FINISH Animation B1');
    Console.Clear;
  end;
  begin
    LOG.Add('START loading music');
    if FileExists('sound.wav') then
    begin
      SOUND.SoundLocation:='sound.wav';
      if svg.sound then SOUND.PlayLooping;
      LOG.Add(concat('Loadind sound.wav success, time: ',Round(sound.LoadTimeout/TimeSpan.TicksPerMillisecond).ToString,' ms'));
      soundavailable:=true;
    end
    else
    begin
      LOG.Add('Failed loading sound.wav (Not critical)');
      soundavailable:=false;
    end;
    LOG.Add('FINISH loading music');
  end;{$endregion}
  menu.status:=true;
  while menu.status do
  begin
    KTX.resize;
    outnull(menu.output, menu.input);
    Console.SetCursorPosition(1,1);write('(1) ',inter[0].face[0]);
    if not svg.available then Console.ForegroundColor:=consolecolor.Gray;
    Console.SetCursorPosition(1,2);write('(2) ',inter[0].face[1]);
    if not svg.available then Console.ForegroundColor:=consolecolor.Black;
    if not help_available then Console.ForegroundColor:=consolecolor.Gray;
    Console.SetCursorPosition(1,3);write('(3) ',inter[0].face[2]);
    if not help_available then Console.ForegroundColor:=consolecolor.Black;
    Console.SetCursorPosition(1,4);write('(4) ',inter[0].face[3]);
    Console.SetCursorPosition(1,5);write('(0) ',inter[0].face[4]);
    
    KTX.read_1;
    while (menu.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx)) do
    begin
      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
      readln(menu.input);
    end;
    KTX.read_0;
    
    if menu.input.Left(1)='/' then con(menu.input);
    if menu.input='0' then
    begin
      menu.output:=0;
    end;
    if (menu.input='1') then
    begin
      menu.output:=1;
    end;
    if (menu.input='2') and (svg.available) then
    begin
      menu.output:=2;
    end;
    if (menu.input='3') and (help_available) then
    begin
      menu.output:=3;
    end;
    if menu.input='4' then
    begin
      menu.output:=4;
    end;
    if (menu.input.ToLower='v') then Versions;
    if menu.output=0 then
    begin
      menu.status:=false;
    end;
    
    if menu.output=1 then DoNewGame;
    
    {$region GAME}
    if menu.output=2 then
    begin
      game.status:=true;
      while game.status do
      begin
        Console.Clear;KTX.resize;
        outnull(game.output, game.input);upface;
        
        Console.SetCursorPosition(KTX.maxx-5-inter[8].face[0].Length-inter[8].face[toweekday(player.time.DayOfWeek)].Length,2);write(inter[8].face[0],': ');
        if toweekday(player.time.DayOfWeek)>5 then console.ForegroundColor:=consolecolor.Red;
        write(inter[8].face[toweekday(player.time.DayOfWeek)]);
        Console.ForegroundColor:=consolecolor.Black;
        
        Console.SetCursorPosition(1,2);
        if System.IO.File.Exists('mapview.exe') then
        begin
          write('(1) ',inter[4].face[0]);
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(1) ',inter[4].face[0]);
        end;
        if tutorial=0 then
        begin
          Console.ForegroundColor:=ConsoleColor.Red;
          write(' <- ',inter[42].face[1]);
        end;
        Console.ForegroundColor:=consolecolor.Black;
        
        Console.SetCursorPosition(1,3);
        if (bikeiscrash) then
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(2) ',inter[4].face[1]);
          Console.ForegroundColor:=consolecolor.Red;
          write(' (',inter[4].face[2],')');
        end
        else if (tutorial>=0) and (tutorial<8) then
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(2) ',inter[4].face[1]);
        end
        else if tutorial=8 then
        begin
          write('(2) ',inter[4].face[1]);
          Console.ForegroundColor:=ConsoleColor.Red;
          write(' <- ',inter[42].face[9]);
        end
        else
        begin
          write('(2) ',inter[4].face[1]);
        end;
        Console.ForegroundColor:=consolecolor.Black;
        
        Console.SetCursorPosition(1,4);
        if (tutorial>=0) and (tutorial<1) then
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(3) ',inter[4].face[3]);
        end
        else
        begin
          write('(3) ',inter[4].face[3]);
        end;
        if tutorial=1 then
        begin
          Console.ForegroundColor:=ConsoleColor.Red;
          write(' <- ',inter[42].face[2]);
        end;
        Console.ForegroundColor:=consolecolor.Black;
        
        Console.SetCursorPosition(1,5);
        if (tutorial>=0) and (tutorial<2) then
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(4) ',inter[4].face[4],' ');
        end
        else
        begin
          write('(4) ',inter[4].face[4],' ');
        end;
        if tutorial=2 then
        begin
          Console.ForegroundColor:=ConsoleColor.Red;
          write(' <- ',inter[42].face[3]);
        end;
        Console.ForegroundColor:=consolecolor.Black;
        
        Console.SetCursorPosition(1,6);
        if (tutorial>=0) and (tutorial<3) then
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(5) ',inter[4].face[5]);
        end
        else
        begin
          write('(5) ',inter[4].face[5]);
        end;
        if tutorial=3 then
        begin
          Console.ForegroundColor:=ConsoleColor.Red;
          write(' <- ',inter[42].face[4]);
        end;
        Console.ForegroundColor:=consolecolor.Black;
        
        
        Console.SetCursorPosition(1,7);
        if (tutorial>=0) and (tutorial<4) then
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(6) ',inter[4].face[7]);
        end
        else
        begin
          write('(6) ',inter[4].face[7]);
        end;
        if tutorial=4 then
        begin
          Console.ForegroundColor:=ConsoleColor.Red;
          write(' <- ',inter[42].face[5]);
        end;
        Console.ForegroundColor:=consolecolor.Black;
        
        Console.SetCursorPosition(1,8);
        if (tutorial>=0) and (tutorial<5) then
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(7) ',inter[4].face[8]);
        end
        else
        begin
          write('(7) ',inter[4].face[8]);
        end;
        if tutorial=5 then
        begin
          Console.ForegroundColor:=ConsoleColor.Red;
          write(' <- ',inter[42].face[6]);
        end;
        Console.ForegroundColor:=consolecolor.Black;
        
        Console.SetCursorPosition(1,9);
        if (tutorial>=0) and (tutorial<6) then
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(8) ',inter[4].face[9]);
        end
        else
        begin
          write('(8) ',inter[4].face[9]);
        end;
        if tutorial=6 then
        begin
          Console.ForegroundColor:=ConsoleColor.Red;
          write(' <- ',inter[42].face[7]);
        end;
        Console.ForegroundColor:=consolecolor.Black;
        
        Console.SetCursorPosition(1,10);
        if (tutorial>=0) and (tutorial<7) then
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write('(9) ',inter[4].face[10]);
        end
        else
        begin
          write('(9) ',inter[4].face[10]);
        end;
        if tutorial=7 then
        begin
          Console.ForegroundColor:=ConsoleColor.Red;
          write(' <- ',inter[42].face[8]);
        end;
        Console.ForegroundColor:=consolecolor.Black;
        
        Console.SetCursorPosition(1,11);write('(0) ',inter[0].face[5]);
        
        if not ((tutorial>=0) and (tutorial<=Balance.maxtutorial)) then
        begin
          var _x := GetInformation;
          if _x <> nil then
          begin
            Console.ForegroundColor:=ConsoleColor.DarkGray;
            _x := _x.Sorted.ToArray;
            for var i:=0 to _x.Length-1 do
            begin
              Console.SetCursorPosition(KTX.maxx-_x[i].Length-3,4+i);write(_x[i]);
            end;
            Console.ForegroundColor:=ConsoleColor.Black;
          end;
        end
        else
        begin
          var _x:='(X) '+inter[42].face[0];
          Console.SetCursorPosition(KTX.maxx-_x.Length-3,4);write(_x);
        end;
        
        KTX.read_1;
        while (game.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
        begin
          Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
          readln(game.input);
        end;
        KTX.read_0;
        
        if game.input.Left(1)='/' then con(game.input);
        if (game.input='0') then
        begin
          game.output:=0;
        end;
        if (game.input='1') or (game.input.ToLower='m') then
        begin
          if tutorial=0 then tutorial:=1;
          game.output:=1;
        end;
        if ((game.input='2') or (game.input.ToLower='e')) and (not bikeiscrash) then
        begin
          if tutorial=8 then tutorial:=-1;
          game.output:=2;
        end;
        if (game.input='3') or (game.input.ToLower='b') then
        begin
          if tutorial=1 then tutorial:=2;
          game.output:=3;
        end;
        if (game.input='4') or (game.input.ToLower='s') then
        begin
          if tutorial=2 then tutorial:=3;
          game.output:=4;
        end;
        if ((game.input='5') or (game.input.ToLower='i')) then
        begin
          if tutorial=3 then tutorial:=4;
          game.output:=5;
        end;
        if (game.input='6') or (game.input.ToLower='a') then
        begin
          if tutorial=4 then tutorial:=5;
          game.output:=6;
        end;
        if (game.input='7') or (game.input.ToLower='j') then
        begin
          if tutorial=5 then tutorial:=6;
          game.output:=7;
        end;
        if (game.input='8') or (game.input.ToLower='t') then
        begin
          if tutorial=6 then tutorial:=7;
          game.output:=8;
        end;
        if (game.input='9') or (game.input.ToLower='y') then
        begin
          if tutorial=7 then tutorial:=8;
          game.output:=9;
        end;
        if (game.input.ToLower='x') and (tutorial>=0) then
        begin
          tutorial:=-1;
        end;
        
        if game.output=0 then
        begin
          game.status:=false;
        end;
        
        if game.output=1 then
        begin
          var s:=player.position+' '+mapviewer.minscalable+' '+mapviewer.maxscalable+' '+mapviewer.stepscalable;
          if FileExists('mapview.exe') then exec('mapview.exe',s);
        end;
        
        if game.output=2 then
        {$region GAME.ROAD}
        begin
          game.road.status:=true;
          while game.road.status do
          begin
            Console.Clear;KTX.resize;
            outnull(game.road.output, game.road.input);upface;
            SetLength(game.road.arr,0);
            SetLength(game.road.arr,map[player.position].road.Length);
            for var i:=0 to map[player.position].road.Length-1 do
            begin
              game.road.arr[i].id:=map[player.position].road[i].id;
              game.road.arr[i].tp:=map[player.position].road[i].tp.ToLower[1];
              if not (Round(distance(map[player.position],map[game.road.arr[i].id])*energycost(game.road.arr[i].tp.ToLower)*1000)>=player.energy) then game.road.arr[i].energy:=true;
              if not (Round(distance(map[player.position],map[game.road.arr[i].id])*balance.wateronmeter*1000)>=player.water) then game.road.arr[i].water:=true;
              if not (Round(distance(map[player.position],map[game.road.arr[i].id])*balance.foodonmeter*1000)>=player.food) then game.road.arr[i].food:=true;
              if (not game.road.arr[i].energy)
              or (not game.road.arr[i].water)
              or (not game.road.arr[i].food)
              then game.road.arr[i].block:=true;
            end;
            
            for var i:=0 to game.road.arr.Length-1 do
            begin
              Console.SetCursorPosition(1,2+(i*2));
              if game.road.arr[i].block then Console.ForegroundColor:=consolecolor.Gray;
              write('(',i+1,') ',types[map[game.road.arr[i].id].sort],' ',map[game.road.arr[i].id].name,' (',Round(distance(map[player.position],map[game.road.arr[i].id])),' ',inter[0].face[8],') ');
              if game.road.arr[i].energy then Console.ForegroundColor:=consolecolor.Red
              else Console.ForegroundColor:=consolecolor.Gray;
              write('-',Round(((distance(map[player.position],map[game.road.arr[i].id])*energycost(game.road.arr[i].tp.ToLower))/player.maxenergy)*100*1000),'% ');
              if game.road.arr[i].water then Console.ForegroundColor:=consolecolor.DarkBlue
              else Console.ForegroundColor:=consolecolor.Gray;
              write('-',Round(((distance(map[player.position],map[game.road.arr[i].id])*balance.wateronmeter)/player.maxwater)*100*1000),'% ');
              if game.road.arr[i].food then Console.ForegroundColor:=consolecolor.DarkYellow
              else Console.ForegroundColor:=consolecolor.Gray;
              write('-',Round(((distance(map[player.position],map[game.road.arr[i].id])*balance.foodonmeter)/player.maxfood)*100*1000),'% ');
              Console.ForegroundColor:=consolecolor.Black;
              if game.road.arr[i].block then Console.ForegroundColor:=consolecolor.Gray;
              Console.SetCursorPosition(5,3+(i*2));
              write(inter[9].face[0],': ');
              if game.road.arr[i].tp.ToLower='g' then
              begin
                if not game.road.arr[i].block then Console.ForegroundColor := ConsoleColor.DarkGray;
                write(inter[9].face[1]);
              end
              else
              begin
                if not game.road.arr[i].block then Console.ForegroundColor := ConsoleColor.DarkYellow;
                write(inter[9].face[2]);
              end;
              Console.ForegroundColor:=consolecolor.Black;
            end;
            Console.SetCursorPosition(1,(game.road.arr.Length*2)+2);
            write('(0) ',inter[0].face[5]);
            
            KTX.read_1;
            while (game.road.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
              readln(game.road.input);
            end;
            KTX.read_0;
            
            if game.road.input.Left(1)='/' then con(game.road.input);
            if game.road.input='0' then game.road.output:=0;
            if game.road.input<>'0' then
            begin
              var a,e: integer;
              val(game.road.input,a,e);
              if e=0 then game.road.output:=a;
            end;
            if game.road.output=0 then
            begin
              game.road.status:=false;
            end;
            if (game.road.output>0) and (game.road.output<=game.road.arr.Length) then
            begin
              if not game.road.arr[game.road.output-1].block then
              begin
                game.road.roader.maxdist:=Distance(map[player.position],map[game.road.arr[game.road.output-1].id]);
                game.road.roader.currentdist:=0;
                game.road.roader.odometer:=player.bike.odo;
                game.road.roader.starttime:=player.time;
                game.road.roader.currenttime:=player.time;
                game.road.roader.currentenergy:=player.energy;
                game.road.roader.currentwater:=player.water;
                game.road.roader.currentfood:=player.food;
                game.road.roader.maxspeed:=0;
                player.luck:=PABCSystem.Random;
                Console.Clear;
                var looper: integer = 0;
                while game.road.roader.currentdist<game.road.roader.maxdist do
                begin
                  //if looper mod Round(svg.animspeed*(1000/balance.animKFspeed)) = 0 then
                  //begin
                  //  Console.Clear;KTX.resize;
                  //  looper:=1;
                  //end;
                  if looper mod Round(svg.animspeed*(5/3)) = 0 then
                  game.road.roader.currentspeed:=curspeed(game.road.arr[game.road.output-1].tp.ToLower);
                  var substr: string;
                  var subint: integer;
                  substr:=spcf(4)+Round(game.road.roader.currentdist/game.road.roader.maxdist*100)+'%'+spcf(4);
                  //Console.Clear;KTX.resize;
                  
                  Console.SetCursorPosition(Round((KTX.maxx/2)-(substr.Length/2)),1);
                  write(substr);
                  
                  Console.SetCursorPosition(1,1);
                  write(types[map[player.position].sort],' ',map[player.position].name);
                  substr:=types[map[game.road.arr[game.road.output-1].id].sort]+' '+map[game.road.arr[game.road.output-1].id].name;
                  Console.SetCursorPosition((KTX.maxx-substr.Length-1),1);
                  write(substr);
                  Console.SetCursorPosition(1,2);
                  
                  loop Round((game.road.roader.currentdist/game.road.roader.maxdist)*(KTX.maxx-2)) do
                  begin
                    write(KTX.subgraph_a[1]);
                  end;
                  loop Round((1-(game.road.roader.currentdist/game.road.roader.maxdist))*(KTX.maxx-2)) do
                  begin
                    write(KTX.subgraph_a[3]);
                  end;
                  
                  subint:=Round((game.road.roader.currentenergy/player.maxenergy)*(KTX.maxx-50));
                  substr:=spcf(4)+Round(game.road.roader.currentenergy/player.maxenergy*100)+'%'+spcf(4);
                  Console.SetCursorPosition(Round(((KTX.maxx-50)/2)-(substr.Length/2))+49,4);
                  write(substr);spc(4);
                  Console.SetCursorPosition(49,5);Console.ForegroundColor:=consolecolor.Red;
                  loop subint do
                  begin
                    write(KTX.subgraph_a[1]);
                  end;
                  loop (KTX.maxx-50)-subint do
                  begin
                    write(KTX.subgraph_a[3]);
                  end;
                  
                  Console.ForegroundColor:=consolecolor.Black;
                  subint:=Round((game.road.roader.currentwater/player.maxwater)*(KTX.maxx-50));
                  substr:=spcf(4)+Round(game.road.roader.currentwater/player.maxwater*100)+'%'+spcf(4);
                  Console.SetCursorPosition(Round(((KTX.maxx-50)/2)-(substr.Length/2))+49,7);
                  write(substr);spc(4);
                  Console.SetCursorPosition(49,8);Console.ForegroundColor:=consolecolor.Blue;
                  loop subint do
                  begin
                    write(KTX.subgraph_a[1]);
                  end;
                  loop (KTX.maxx-50)-subint do
                  begin
                    write(KTX.subgraph_a[3]);
                  end;
                  Console.ForegroundColor:=consolecolor.Black;
                  
                  subint:=Round((game.road.roader.currentfood/player.maxfood)*(KTX.maxx-50));
                  substr:=spcf(4)+Round(game.road.roader.currentfood/player.maxfood*100)+'%'+spcf(4);
                  Console.SetCursorPosition(Round(((KTX.maxx-50)/2)-(substr.Length/2))+49,10);
                  write(substr);spc(4);
                  Console.SetCursorPosition(49,11);Console.ForegroundColor:=consolecolor.DarkYellow;
                  loop subint do
                  begin
                    write(KTX.subgraph_a[1]);
                  end;
                  loop (KTX.maxx-50)-subint do
                  begin
                    write(KTX.subgraph_a[3]);
                  end;
                  
                  Console.ForegroundColor:=consolecolor.Black;
                  var subtime1, subtime2: string;
                  var deltatime: DateTime = new DateTime(game.road.roader.currenttime.Ticks-game.road.roader.starttime.Ticks);
                  if game.road.roader.currenttime.Minute>=10 then subtime1:=game.road.roader.currenttime.Hour+':'+game.road.roader.currenttime.Minute
                  else subtime1:=game.road.roader.currenttime.Hour+':0'+game.road.roader.currenttime.Minute;
                  if deltatime.minute>=10 then subtime2:=deltatime.Hour+':'+deltatime.Minute
                  else subtime2:=deltatime.Hour+':0'+deltatime.Minute;
                  if deltatime.Second>=10 then subtime2:=subtime2+':'+deltatime.Second
                  else subtime2:=subtime2+':0'+deltatime.Second;
                  if game.road.roader.currentspeed>game.road.roader.maxspeed then game.road.roader.maxspeed:=game.road.roader.currentspeed;
                  Console.SetCursorPosition(1,4);write(inter[10].face[0],': ',subtime1);spc(5);
                  Console.SetCursorPosition(1,6);write(inter[10].face[1],': ',game.road.roader.currentspeed,' ',inter[0].face[9]);spc(5);
                  Console.SetCursorPosition(1,8);write(inter[10].face[2],': ',Round(game.road.roader.currentdist*100)/100,' ',inter[0].face[8]);spc(5);
                  Console.SetCursorPosition(1,10);write(inter[10].face[3],': ',subtime2);spc(5);
                  Console.SetCursorPosition(1,12);
                  if deltatime.Ticks>0 then
                  write(inter[10].face[4],': ',Round((game.road.roader.currentdist/(deltatime.Ticks/10000000/3600))*10)/10,' ',inter[0].face[9])
                  else write(inter[10].face[4],': 0 ',inter[0].face[9]);spc(5);
                  Console.SetCursorPosition(1,14);write(inter[10].face[5],': ',game.road.roader.maxspeed,' ',inter[0].face[9]);spc(5);
                  Console.SetCursorPosition(1,16);write(inter[10].face[6],': ',Round((game.road.roader.odometer+game.road.roader.currentdist)*10)/10,' ',inter[0].face[8]);spc(5);
                  game.road.roader.currenttime:=game.road.roader.currenttime.AddSeconds(Round(balance.animKFseconds/svg.animspeed));
                  game.road.roader.currentdist:=game.road.roader.currentdist+(game.road.roader.currentspeed/3600)*Round(balance.animKFseconds/svg.animspeed);
                  game.road.roader.currentwater:=player.water-Round((game.road.roader.currentdist*1000)*balance.wateronmeter);
                  game.road.roader.currentfood:=player.food-Round((game.road.roader.currentdist*1000)*balance.foodonmeter);
                  game.road.roader.currentenergy:=player.energy-Round((game.road.roader.currentdist*1000)*energycost(game.road.arr[game.road.output-1].tp.ToLower));
                  sleep(Round(balance.animKFspeed/svg.animspeed));
                  looper+=1;
                end;
                player.position:=game.road.arr[game.road.output-1].id;
                player.energy:=player.energy-Round((game.road.roader.maxdist*1000)*energycost(game.road.arr[game.road.output-1].tp.ToLower));
                player.water:=player.water-Round((game.road.roader.maxdist*1000)*balance.wateronmeter);
                player.food:=player.food-Round((game.road.roader.maxdist*1000)*balance.foodonmeter);
                player.time:=new DateTime((game.road.roader.currenttime.Ticks div 600000000)*600000000);
                player.bike.frame.hitpoints-=Round(game.road.roader.maxdist*1000);
                player.bike.fork.hitpoints-=Round(game.road.roader.maxdist*1000);
                if player.bike.bsusp.flag then
                player.bike.bsusp.hitpoints-=Round(game.road.roader.maxdist*1000);
                player.bike.rudder.hitpoints-=Round(game.road.roader.maxdist*1000);
                player.bike.transmission.hitpoints-=Round(game.road.roader.maxdist*1000);
                
                player.bike.backwheel.pressure-=balance.bk.wheel.pressure.permeter*(game.road.roader.maxdist*1000);
                player.bike.frontwheel.pressure-=balance.bk.wheel.pressure.permeter*(game.road.roader.maxdist*1000);
                
                if player.bike.backbreak.flag then
                begin
                  player.bike.backbreak.hitpoints-=Round(game.road.roader.maxdist*1000);
                  player.bike.backbreak.effection-=Round(game.road.roader.maxdist*1000);
                end;
                if player.bike.frontbreak.flag then
                begin
                  player.bike.frontbreak.hitpoints-=Round(game.road.roader.maxdist*1000);
                  player.bike.frontbreak.effection-=Round(game.road.roader.maxdist*1000);
                end;
                
                player.bike.backwheel.hitpoints-=Round(game.road.roader.maxdist*1000);
                player.bike.frontwheel.hitpoints-=Round(game.road.roader.maxdist*1000);
                
                if player.bike.backwheel.needles>=balance.bk.wheel.needle.average then
                begin
                  if balance.bk.wheel.needle.minimumchance>pabcsystem.Random() then
                  begin
                    player.bike.backwheel.needles-=1;
                  end;
                end
                else
                begin
                  if balance.bk.wheel.needle.maximumchance+(balance.bk.wheel.needle.chancek*(balance.bk.wheel.needle.average-player.bike.backwheel.needles))>pabcsystem.Random() then
                  begin
                    player.bike.backwheel.needles-=1;
                  end;
                end;
                
                if player.bike.frontwheel.needles>=balance.bk.wheel.needle.average then
                begin
                  if balance.bk.wheel.needle.minimumchance>pabcsystem.Random() then
                  begin
                    player.bike.frontwheel.needles-=1;
                  end;
                end
                else
                begin
                  if balance.bk.wheel.needle.maximumchance+(balance.bk.wheel.needle.chancek*(balance.bk.wheel.needle.average-player.bike.frontwheel.needles))>pabcsystem.Random() then
                  begin
                    player.bike.frontwheel.needles-=1;
                  end;
                end;
                
                if backwheelhitchance>pabcsystem.Random() then
                begin
                  player.bike.backwheel.camerahit:=true;
                end;
                if frontwheelhitchance>pabcsystem.Random() then
                begin
                  player.bike.frontwheel.camerahit:=true;
                end;
                
                player.bike.odo+=game.road.roader.maxdist;
                if svg.autosave then save;
                
                if bikeiscrash then game.road.status:=false;
                
                ResetRandomStreetPlace();
                
                //Crash System
                if (quests[0].stage<0) and (PABCSystem.Random<crashchance) then
                begin
                  game.road.crash.lst.framehp:=0;
                  game.road.crash.lst.forkhp:=0;
                  game.road.crash.lst.bsusphp:=0;
                  game.road.crash.lst.transhp:=0;
                  game.road.crash.lst.bbreak:=0;
                  game.road.crash.lst.bbeff:=0;
                  game.road.crash.lst.fbreak:=0;
                  game.road.crash.lst.fbeff:=0;
                  game.road.crash.lst.fwheel:=0;
                  game.road.crash.lst.bwheel:=0;
                  game.road.crash.lst.fneedles:=0;
                  game.road.crash.lst.bneedles:=0;
                  game.road.crash.lst.first:=false;
                  
                  var maxcrashhealth: integer;
                  if player.level>balance.Crash.dechpmaxlvl then maxcrashhealth:=balance.Crash.minimumdechp+balance.Crash.dechpadd*balance.Crash.dechpmaxlvl
                  else maxcrashhealth:=balance.Crash.minimumdechp+balance.Crash.dechpadd*player.level;
                  var crashhealth: integer = PABCSystem.Random(maxcrashhealth);
                  
                  game.road.crash.lst.framehp:=Round(player.bike.frame.hitpoints*(PABCSystem.Random/3));
                  game.road.crash.lst.forkhp:=Round(player.bike.fork.hitpoints*(PABCSystem.Random/3));
                  if player.bike.bsusp.flag then
                  game.road.crash.lst.bsusphp:=Round(player.bike.bsusp.hitpoints*(PABCSystem.Random/3));
                  game.road.crash.lst.transhp:=Round(player.bike.transmission.hitpoints*(PABCSystem.Random/3));
                  game.road.crash.lst.rudderhp:=Round(player.bike.rudder.hitpoints*(PABCSystem.Random/3));
                  if player.bike.backbreak.flag then
                  begin
                    game.road.crash.lst.bbreak:=Round(player.bike.backbreak.hitpoints*(PABCSystem.Random/3));
                    game.road.crash.lst.bbeff:=Round(player.bike.backbreak.effection*(PABCSystem.Random/2));
                  end;
                  if player.bike.frontbreak.flag then
                  begin
                    game.road.crash.lst.fbreak:=Round(player.bike.frontbreak.hitpoints*(PABCSystem.Random/3));
                    game.road.crash.lst.fbeff:=Round(player.bike.frontbreak.effection*(PABCSystem.Random/2));
                  end;
                  game.road.crash.lst.fwheel:=Round(player.bike.frontwheel.hitpoints*(PABCSystem.Random/3));
                  game.road.crash.lst.bwheel:=Round(player.bike.backwheel.hitpoints*(PABCSystem.Random/3));
                  game.road.crash.lst.fneedles:=PABCSystem.Random(balance.bk.wheel.needle.minimum)+1;
                  game.road.crash.lst.bneedles:=PABCSystem.Random(balance.bk.wheel.needle.minimum)+1;
                  
                  player.bike.frame.hitpoints-=game.road.crash.lst.framehp;
                  player.bike.fork.hitpoints-=game.road.crash.lst.forkhp;
                  player.bike.bsusp.hitpoints-=game.road.crash.lst.bsusphp;
                  player.bike.transmission.hitpoints-=game.road.crash.lst.transhp;
                  player.bike.rudder.hitpoints-=game.road.crash.lst.rudderhp;
                  player.bike.backbreak.hitpoints-=game.road.crash.lst.bbreak;
                  player.bike.backbreak.effection-=game.road.crash.lst.bbeff;
                  player.bike.frontbreak.hitpoints-=game.road.crash.lst.fbreak;
                  player.bike.frontbreak.effection-=game.road.crash.lst.fbeff;
                  player.bike.backwheel.hitpoints-=game.road.crash.lst.bwheel;
                  player.bike.frontwheel.hitpoints-=game.road.crash.lst.fwheel;
                  player.bike.backwheel.needles-=game.road.crash.lst.bneedles;
                  player.bike.frontwheel.needles-=game.road.crash.lst.fneedles;
                  player.energy:=0;
                  player.water:=0;
                  player.food:=0;
                  player.health-=crashhealth;
                  
                  save;
                  game.road.crash.status:=true;
                  while game.road.crash.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(game.road.crash.output, game.road.crash.input);upface;
                    
                    if not game.road.crash.lst.first then sleep(1000);
                    
                    Console.ForegroundColor:=consolecolor.Red;
                    Console.SetCursorPosition(1,2);
                    write('    ',inter[11].face[16],'!');
                    Console.ForegroundColor:=consolecolor.Black;
                    
                    if not game.road.crash.lst.first then sleep(500);
                    Console.SetCursorPosition(1,4);
                    if game.road.crash.lst.framehp>0 then
                    begin
                      write('(-) ',inter[11].face[0],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.framehp/player.bike.frame.maxhitpoints*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[0],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,5);
                    if game.road.crash.lst.forkhp>0 then
                    begin
                      write('(-) ',inter[11].face[1],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.forkhp/player.bike.fork.maxhitpoints*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[1],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,6);
                    if game.road.crash.lst.bsusphp>0 then
                    begin
                      write('(-) ',inter[11].face[2],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.bsusphp/player.bike.bsusp.maxhitpoints*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[2],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,7);
                    if game.road.crash.lst.transhp>0 then
                    begin
                      write('(-) ',inter[11].face[3],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.transhp/player.bike.transmission.maxhitpoints*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[3],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,8);
                    if game.road.crash.lst.transhp>0 then
                    begin
                      write('(-) ',inter[11].face[4],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.rudderhp/player.bike.rudder.maxhitpoints*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[4],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,9);
                    if game.road.crash.lst.bwheel>0 then
                    begin
                      write('(-) ',inter[11].face[5],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.bwheel/player.bike.backwheel.maxhitpoints*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[5],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,10);
                    if game.road.crash.lst.bbreak>0 then
                    begin
                      write('(-) ',inter[11].face[6],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.bbreak/player.bike.backbreak.maxhitpoints*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[6],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,11);
                    if game.road.crash.lst.bbeff>0 then
                    begin
                      write('(-) ',inter[11].face[7],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.bbeff/player.bike.backbreak.maxeffection*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[7],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,12);
                    if game.road.crash.lst.fwheel>0 then
                    begin
                      write('(-) ',inter[11].face[8],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.fwheel/player.bike.frontwheel.maxhitpoints*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[8],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,13);
                    if game.road.crash.lst.fbreak>0 then
                    begin
                      write('(-) ',inter[11].face[9],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.fbreak/player.bike.frontbreak.maxhitpoints*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[9],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,14);
                    if game.road.crash.lst.fbeff>0 then
                    begin
                      write('(-) ',inter[11].face[10],': ');
                      Console.ForegroundColor:=consolecolor.Red;
                      write('-',Round(game.road.crash.lst.fbeff/player.bike.frontbreak.maxeffection*1000)/10,'%');
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write('(-) ',inter[11].face[10],': ');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,16);
                    write('(-) ',inter[11].face[11],': ');
                    Console.ForegroundColor:=consolecolor.Red;
                    write('-',game.road.crash.lst.bneedles);
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,17);
                    write('(-) ',inter[11].face[12],': ');
                    Console.ForegroundColor:=consolecolor.Red;
                    write('-',game.road.crash.lst.fneedles);
                    Console.ForegroundColor:=consolecolor.Black;
                    if not game.road.crash.lst.first then sleep(500);
                    
                    Console.SetCursorPosition(1,KTX.maxy-6);
                    write('(1) ',inter[11].face[13]);
                    Console.SetCursorPosition(1,KTX.maxy-5);
                    write('(2) ',inter[11].face[14]);
                    Console.SetCursorPosition(1,KTX.maxy-4);
                    write('(3) ',inter[11].face[15]);
                    
                    KTX.read_1;
                    while (game.road.crash.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(game.road.crash.input);
                    end;
                    KTX.read_0;
                    
                    if game.road.crash.input.Left(1)='/' then con(game.road.crash.input);
                    if (game.road.crash.input='1')
                    or (game.road.crash.input='2')
                    or (game.road.crash.input='3') then game.road.crash.output:=0;
                    
                    game.road.crash.lst.first:=true;
                    
                    if game.road.crash.output=0 then game.road.crash.status:=false;
                    
                  end;
                end;
                if player.bike.backbreak.hitpoints<0 then player.bike.backbreak.hitpoints:=0;
                if player.bike.frontbreak.hitpoints<0 then player.bike.frontbreak.hitpoints:=0;
              end;
            end;
            
          end;
          
        end;{$endregion}
        
        if game.output=3 then
        {$region GAME.BIKE}
        begin
          game.bike.status:=true;
          while game.bike.status do
          begin
            Console.Clear;KTX.resize;
            outnull(game.bike.output, game.bike.input);upface;
            var percent, percent2: real;
            
            {$region bike interface}
            percent:=player.bike.frame.hitpoints/player.bike.frame.maxhitpoints;
            if player.bike.bsusp.flag then
            percent2:=player.bike.bsusp.hitpoints/player.bike.bsusp.maxhitpoints;
            var marker0: real;
            
            Console.SetCursorPosition(1,2);write('(1) ',bikes[0].value[0],' ');
            //if not player.bike.bsusp.flag then
            begin
              marker0 := player.bike.frame.hitpoints/player.bike.frame.maxhitpoints;
              if (marker0>=balance.status._verygood.min) and (marker0<=balance.status._verygood.max) then
              begin
                Console.ForegroundColor:=balance.status._verygood.color;
                write(player.bike.frame.name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._good.min) and (marker0<balance.status._good.max) then
              begin
                Console.ForegroundColor:=balance.status._good.color;
                write(player.bike.frame.name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._normal.min) and (marker0<balance.status._normal.max) then
              begin
                Console.ForegroundColor:=balance.status._normal.color;
                write(player.bike.frame.name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.frame.hitpoints>balance.criticalhp) and (marker0<balance.status._bad.max) then
              begin
                Console.ForegroundColor:=balance.status._bad.color;
                write(player.bike.frame.name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.frame.hitpoints<=balance.criticalhp) then
              begin
                Console.ForegroundColor:=balance.status._verybad.color;
                write(player.bike.frame.name,' ',Round((marker0)*1000)/10,'%');
              end;
              
              if (player.bike.bsusp.hitpoints<=balance.criticalhp) and (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) then
              begin
                Console.ForegroundColor:=consolecolor.Red;
                write(' (',bikes[1].value[4],')');
              end;
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,3);write('(2) ',bikes[0].value[1],' ');
            begin
              var name:=player.bike.fork.name;
              marker0 := player.bike.fork.hitpoints/player.bike.fork.maxhitpoints;
              if (marker0>=balance.status._verygood.min) and (marker0<=balance.status._verygood.max) then
              begin
                Console.ForegroundColor:=balance.status._verygood.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._good.min) and (marker0<balance.status._good.max) then
              begin
                Console.ForegroundColor:=balance.status._good.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._normal.min) and (marker0<balance.status._normal.max) then
              begin
                Console.ForegroundColor:=balance.status._normal.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.fork.hitpoints>balance.criticalhp) and (marker0<balance.status._bad.max) then
              begin
                Console.ForegroundColor:=balance.status._bad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.fork.hitpoints<=balance.criticalhp) then
              begin
                Console.ForegroundColor:=balance.status._verybad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,4);write('(3) ',bikes[0].value[3],' ');
            begin
              var name:=player.bike.transmission.name;
              marker0 := player.bike.transmission.hitpoints/player.bike.transmission.maxhitpoints;
              if (marker0>=balance.status._verygood.min) and (marker0<=balance.status._verygood.max) then
              begin
                Console.ForegroundColor:=balance.status._verygood.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._good.min) and (marker0<balance.status._good.max) then
              begin
                Console.ForegroundColor:=balance.status._good.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._normal.min) and (marker0<balance.status._normal.max) then
              begin
                Console.ForegroundColor:=balance.status._normal.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.transmission.hitpoints>balance.criticalhp) and (marker0<balance.status._bad.max) then
              begin
                Console.ForegroundColor:=balance.status._bad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.transmission.hitpoints<=balance.criticalhp) then
              begin
                Console.ForegroundColor:=balance.status._verybad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,5);write('(4) ',bikes[0].value[4],' ');
            begin
              var name:=player.bike.rudder.name;
              marker0 := player.bike.rudder.hitpoints/player.bike.rudder.maxhitpoints;
              if (marker0>=balance.status._verygood.min) and (marker0<=balance.status._verygood.max) then
              begin
                Console.ForegroundColor:=balance.status._verygood.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._good.min) and (marker0<balance.status._good.max) then
              begin
                Console.ForegroundColor:=balance.status._good.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._normal.min) and (marker0<balance.status._normal.max) then
              begin
                Console.ForegroundColor:=balance.status._normal.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.rudder.hitpoints>balance.criticalhp) and (marker0<balance.status._bad.max) then
              begin
                Console.ForegroundColor:=balance.status._bad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.rudder.hitpoints<=balance.criticalhp) then
              begin
                Console.ForegroundColor:=balance.status._verybad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,6);write('(5) ');
            if player.bike.backbreak.flag then
            begin
              write(bikes[0].value[5],' ');
              percent:=player.bike.backbreak.hitpoints/player.bike.backbreak.maxhitpoints;
              percent2:=player.bike.backbreak.effection/player.bike.backbreak.maxeffection;
              var name:=player.bike.backbreak.name;
              if (player.bike.backbreak.hitpoints<balance.criticalhp) or (percent2<=balance.bk.allbreak.minimal) then
              begin
                Console.ForegroundColor:=balance.status._verybad.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end
              else if ((percent>balance.criticalhp) and (percent<balance.status._bad.max)) 
              or ((percent2>balance.minimaleff) and (percent2<balance.status._bad.max)) then
              begin
                Console.ForegroundColor:=balance.status._bad.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end
              else if ((percent>=balance.status._normal.min) and (percent<balance.status._normal.max)) 
              or ((percent2>=balance.status._normal.min) and (percent2<balance.status._normal.max)) then
              begin
                Console.ForegroundColor:=balance.status._normal.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end
              else if ((percent>=balance.status._good.min) and (percent<balance.status._good.max)) 
              or ((percent2>=balance.status._good.min) and (percent2<balance.status._good.max)) then
              begin
                Console.ForegroundColor:=balance.status._good.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end
              else if ((percent>=balance.status._verygood.min) and (percent<=balance.status._verygood.max)) 
              or ((percent2>=balance.status._verygood.min) and (percent2<=balance.status._verygood.max)) then
              begin
                Console.ForegroundColor:=balance.status._verygood.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end;
            end
            else
            begin
              Console.ForegroundColor:=consolecolor.Gray;
              write(bikes[0].value[5]);
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,7);write('(6) ');
            if player.bike.frontbreak.flag then
            begin
              write(bikes[0].value[6],' ');
              percent:=player.bike.frontbreak.hitpoints/player.bike.frontbreak.maxhitpoints;
              percent2:=player.bike.frontbreak.effection/player.bike.frontbreak.maxeffection;
              var name:=player.bike.frontbreak.name;
              if (player.bike.frontbreak.hitpoints<balance.criticalhp) or (percent2<=balance.bk.allbreak.minimal) then
              begin
                Console.ForegroundColor:=balance.status._verybad.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end
              else if ((percent>balance.criticalhp) and (percent<balance.status._bad.max)) 
              or ((percent2>balance.minimaleff) and (percent2<balance.status._bad.max)) then
              begin
                Console.ForegroundColor:=balance.status._bad.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end
              else if ((percent>=balance.status._normal.min) and (percent<balance.status._normal.max)) 
              or ((percent2>=balance.status._normal.min) and (percent2<balance.status._normal.max)) then
              begin
                Console.ForegroundColor:=balance.status._normal.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end
              else if ((percent>=balance.status._good.min) and (percent<balance.status._good.max)) 
              or ((percent2>=balance.status._good.min) and (percent2<balance.status._good.max)) then
              begin
                Console.ForegroundColor:=balance.status._good.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end
              else if ((percent>=balance.status._verygood.min) and (percent<=balance.status._verygood.max)) 
              or ((percent2>=balance.status._verygood.min) and (percent2<=balance.status._verygood.max)) then
              begin
                Console.ForegroundColor:=balance.status._verygood.color;
                write(name,' ',Round((percent)*1000)/10,'% ',Round((percent2)*1000)/10,'%');
                Console.ForegroundColor:=consolecolor.Black;
              end;
            end
            else
            begin
              Console.ForegroundColor:=consolecolor.Gray;
              write(bikes[0].value[6]);
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,8);write('(7) ',bikes[0].value[7],' ');
            percent:=player.bike.backwheel.hitpoints/player.bike.backwheel.maxhitpoints;
            if (player.bike.backwheel.hitpoints<balance.criticalhp) or (player.bike.backwheel.camerahit) or (player.bike.backwheel.pressure<balance.bk.wheel.pressure.minimum)
            or (player.bike.backwheel.pressure>balance.bk.wheel.pressure.maximum) then
            begin
              Console.ForegroundColor:=consolecolor.Red;
              write(player.bike.backwheel.name,' ',Round(percent*1000)/10,'%');
              if (player.bike.backwheel.camerahit) then
              write(' (',bikes[1].value[0],')')
              else if (player.bike.backwheel.pressure<balance.bk.wheel.pressure.minimum) then
              write(' (',bikes[1].value[1],')')
              else if (player.bike.backwheel.pressure>balance.bk.wheel.pressure.maximum) then
              write(' (',bikes[1].value[2],')');
              Console.ForegroundColor:=consolecolor.Black;
            end
            else
            begin
              var name:=player.bike.backwheel.name;
              marker0 := player.bike.backwheel.hitpoints/player.bike.backwheel.maxhitpoints;
              if (marker0>=balance.status._verygood.min) and (marker0<=balance.status._verygood.max) then
              begin
                Console.ForegroundColor:=balance.status._verygood.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._good.min) and (marker0<balance.status._good.max) then
              begin
                Console.ForegroundColor:=balance.status._good.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._normal.min) and (marker0<balance.status._normal.max) then
              begin
                Console.ForegroundColor:=balance.status._normal.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.backwheel.hitpoints>balance.criticalhp) and (marker0<balance.status._bad.max) then
              begin
                Console.ForegroundColor:=balance.status._bad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.backwheel.hitpoints<=balance.criticalhp) then
              begin
                Console.ForegroundColor:=balance.status._verybad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,9);write('(8) ',bikes[0].value[8],' ');
            percent:=player.bike.frontwheel.hitpoints/player.bike.frontwheel.maxhitpoints;
            if (player.bike.frontwheel.hitpoints<balance.criticalhp) or (player.bike.frontwheel.camerahit) or (player.bike.frontwheel.pressure<balance.bk.wheel.pressure.minimum)
            or (player.bike.frontwheel.pressure>balance.bk.wheel.pressure.maximum) then
            begin
              Console.ForegroundColor:=consolecolor.Red;
              write(player.bike.frontwheel.name,' ',Round(percent*1000)/10,'%');
              if (player.bike.frontwheel.camerahit) then
              write(' (',bikes[1].value[0],')')
              else if (player.bike.frontwheel.pressure<balance.bk.wheel.pressure.minimum) then
              write(' (',bikes[1].value[1],')')
              else if (player.bike.frontwheel.pressure>balance.bk.wheel.pressure.maximum) then
              write(' (',bikes[1].value[2],')');
              Console.ForegroundColor:=consolecolor.Black;
            end
            else
            begin
              var name:=player.bike.frontwheel.name;
              marker0 := player.bike.frontwheel.hitpoints/player.bike.frontwheel.maxhitpoints;
              if (marker0>=balance.status._verygood.min) and (marker0<=balance.status._verygood.max) then
              begin
                Console.ForegroundColor:=balance.status._verygood.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._good.min) and (marker0<balance.status._good.max) then
              begin
                Console.ForegroundColor:=balance.status._good.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (marker0>=balance.status._normal.min) and (marker0<balance.status._normal.max) then
              begin
                Console.ForegroundColor:=balance.status._normal.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.frontwheel.hitpoints>balance.criticalhp) and (marker0<balance.status._bad.max) then
              begin
                Console.ForegroundColor:=balance.status._bad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              if (player.bike.frontwheel.hitpoints<=balance.criticalhp) then
              begin
                Console.ForegroundColor:=balance.status._verybad.color;
                write(name,' ',Round((marker0)*1000)/10,'%');
              end;
              Console.ForegroundColor:=consolecolor.Black;
            end;
            {$endregion}
            
            Console.SetCursorPosition(1,11);
            if player.bike.odo>0 then
            begin
              write('(9) ',bikes[10].value[2]);
            end
            else
            begin
              Console.ForegroundColor:=consolecolor.Gray;
              write('(9) ',bikes[10].value[2]);
              Console.ForegroundColor:=consolecolor.Black;
            end;
            Console.SetCursorPosition(1,12);
            write('(0) ',inter[0].face[5]);
            Console.SetCursorPosition(1,14);
            write(bikes[10].value[0],': ',BikeVeight div 10 / 100,' ',inter[0].face[10]);
            Console.SetCursorPosition(1,15);
            write(bikes[10].value[1],': ',Round(player.bike.odo * 10)/10,' ',inter[0].face[8]);
            
            {$region RoadBonus}
            System.Globalization.NumberFormatInfo.CurrentInfo.PercentDecimalDigits := 0;
            //Frame & BackSuspension
            var sttp := 80;
            var lbtp := 4 + balance.distancebetweenroadbonuses;
            
            Console.SetCursorPosition(sttp, 2);
            if (player.bike.frame.hitpoints <= balance.criticalhp) then
            begin
              Console.ForegroundColor := ConsoleColor.Red;
              write('0%'.PadLeft(lbtp), '0%'.PadLeft(lbtp));
            end
            else
            begin
              Console.ForegroundColor := ConsoleColor.DarkGray;
              write(Concat('+',(EnergyCosts.GetCBFrame('g')+EnergyCosts.GetCBBack('g')).ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
              Console.ForegroundColor := ConsoleColor.DarkYellow;
              write(Concat('+',(EnergyCosts.GetCBFrame('b')+EnergyCosts.GetCBBack('b')).ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
            end;
            
            //Fork
            Console.SetCursorPosition(sttp, 3);
            if (player.bike.fork.hitpoints <= balance.criticalhp) then
            begin
              Console.ForegroundColor := ConsoleColor.Red;
              write('0%'.PadLeft(lbtp), '0%'.PadLeft(lbtp));
            end
            else
            begin
              Console.ForegroundColor := ConsoleColor.DarkGray;
              write(Concat('+',EnergyCosts.GetCBFork('g').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
              Console.ForegroundColor := ConsoleColor.DarkYellow;
              write(Concat('+',EnergyCosts.GetCBFork('b').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
            end;
            
            //Transmission
            Console.SetCursorPosition(sttp, 4);
            if (player.bike.transmission.hitpoints <= balance.criticalhp) then
            begin
              Console.ForegroundColor := ConsoleColor.Red;
              write('0%'.PadLeft(lbtp), '0%'.PadLeft(lbtp));
            end
            else
            begin
              Console.ForegroundColor := ConsoleColor.DarkGray;
              write(Concat('+',EnergyCosts.GetCBTransmission('g').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
              Console.ForegroundColor := ConsoleColor.DarkYellow;
              write(Concat('+',EnergyCosts.GetCBTransmission('b').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
            end;
            
            //Rudder
            Console.SetCursorPosition(sttp, 5);
            if (player.bike.rudder.hitpoints <= balance.criticalhp) then
            begin
              Console.ForegroundColor := ConsoleColor.Red;
              write('0%'.PadLeft(lbtp), '0%'.PadLeft(lbtp));
            end
            else
            begin
              Console.ForegroundColor := ConsoleColor.DarkGray;
              write(Concat('+',EnergyCosts.GetCBRudder('g').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
              Console.ForegroundColor := ConsoleColor.DarkYellow;
              write(Concat('+',EnergyCosts.GetCBRudder('b').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
            end;
            
            //BackWheel
            Console.SetCursorPosition(sttp, 8);
            if (Player.bike.Backwheel.camerahit) or (player.bike.backwheel.pressure < balance.bk.wheel.pressure.minimum) or (player.bike.backwheel.hitpoints <= balance.criticalhp) then
            begin
              Console.ForegroundColor := ConsoleColor.Red;
              write('0%'.PadLeft(lbtp), '0%'.PadLeft(lbtp));
            end
            else
            begin
              Console.ForegroundColor := ConsoleColor.DarkGray;
              write(Concat('+',EnergyCosts.GetCBBackWheel('g').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
              Console.ForegroundColor := ConsoleColor.DarkYellow;
              write(Concat('+',EnergyCosts.GetCBBackWheel('b').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
            end;
            
            //FrontWheel
            Console.SetCursorPosition(sttp, 9);
            if (player.bike.frontwheel.camerahit) or (player.bike.frontwheel.pressure < balance.bk.wheel.pressure.minimum) or (player.bike.frontwheel.hitpoints <= balance.criticalhp) then
            begin
              Console.ForegroundColor := ConsoleColor.Red;
              write('0%'.PadLeft(lbtp), '0%'.PadLeft(lbtp));
            end
            else
            begin
              Console.ForegroundColor := ConsoleColor.DarkGray;
              write(Concat('+',EnergyCosts.GetCBFrontWheel('g').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
              Console.ForegroundColor := ConsoleColor.DarkYellow;
              write(Concat('+',EnergyCosts.GetCBFrontWheel('b').ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
            end;
            
            //ALL
            Console.SetCursorPosition(sttp, 11);
            if (bikeiscrash) then
            begin
              Console.ForegroundColor := ConsoleColor.Red;
              write('0%'.PadLeft(lbtp), '0%'.PadLeft(lbtp));
            end
            else
            begin
              Console.ForegroundColor := ConsoleColor.DarkGray;
              write(Concat('+',(EnergyCosts.GetEnergyCost('g')-balance.bk.mincostG).ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
              Console.ForegroundColor := ConsoleColor.DarkYellow;
              write(Concat('+',(EnergyCosts.GetEnergyCost('b')-balance.bk.mincostB).ToString('P')).Remove(' ').Replace('+-', '-').PadLeft(lbtp,' '));
            end;
            
            Console.ForegroundColor:= ConsoleColor.Black;
            {$endregion}
            
            
            KTX.read_1;
            while (game.bike.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
              readln(game.bike.input);
            end;
            KTX.read_0;
            
            if game.bike.input.Left(1)='/' then con(game.bike.input);
            if game.bike.input='0' then game.bike.output:=0;
            if (game.bike.input='1') then game.bike.output:=1;
            if (game.bike.input='2') then game.bike.output:=2;
            if (game.bike.input='3') then game.bike.output:=3;
            if (game.bike.input='4') then game.bike.output:=4;
            if (game.bike.input='5') and (player.bike.backbreak.flag) then game.bike.output:=5;
            if (game.bike.input='6') and (player.bike.frontbreak.flag) then game.bike.output:=6;
            if (game.bike.input='7') then game.bike.output:=7;
            if (game.bike.input='8') then game.bike.output:=8;
            if (game.bike.input='9') and (player.bike.odo>0) then game.bike.output:=9;
            
            if game.bike.output=0 then
            begin
              game.bike.status:=false;
            end;
            
            if game.bike.output=1 then
            {$region GB/Frame}
            begin
              game.bike.frame.status:=true;
              while game.bike.frame.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.bike.frame.output, game.bike.frame.input);upface;
                var marker: real;
                Console.SetCursorPosition(1,2);write(bikes[0].value[0],' ',player.bike.frame.name);
                Console.SetCursorPosition(1,4);write(bikes[2].value[0],': ');
                
                marker := player.bike.frame.hitpoints/player.bike.frame.maxhitpoints;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.frame.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.frame.hitpoints<=balance.criticalhp) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,5);write(bikes[2].value[6],': ',dgt(Round(player.bike.frame.price*marker)),' ',rub(Round(player.bike.frame.price*marker)));
                Console.SetCursorPosition(1,6);write(bikes[2].value[7],': ',Round(player.bike.frame.veight/100)/10,' ',inter[0].face[10]);
                
                if player.bike.bsusp.flag then
                begin
                  Console.SetCursorPosition(Round(KTX.maxx/2),2);write(bikes[0].value[2],' ',player.bike.bsusp.name);
                  Console.SetCursorPosition(Round(KTX.maxx/2),4);write(bikes[2].value[0],': ');
                  
                  marker := player.bike.bsusp.hitpoints/player.bike.bsusp.maxhitpoints;
                  if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                  begin
                    Console.ForegroundColor:=balance.status._verygood.color;
                    write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                  end;
                  if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                  begin
                    Console.ForegroundColor:=balance.status._good.color;
                    write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                  end;
                  if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                  begin
                    Console.ForegroundColor:=balance.status._normal.color;
                    write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                  end;
                  if (player.bike.bsusp.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                  begin
                    Console.ForegroundColor:=balance.status._bad.color;
                    write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                  end;
                  if (player.bike.bsusp.hitpoints<=balance.criticalhp) then
                  begin
                    Console.ForegroundColor:=balance.status._verybad.color;
                    write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                  end;
                  Console.ForegroundColor:=consolecolor.Black;
                  Console.SetCursorPosition(Round(KTX.maxx/2),5);write(bikes[2].value[6],': ',dgt(Round(player.bike.bsusp.price*marker)),' ',rub(Round(player.bike.bsusp.price*marker)));
                  Console.SetCursorPosition(Round(KTX.maxx/2),6);write(bikes[2].value[7],': ',Round(player.bike.bsusp.veight/100)/10,' ',inter[0].face[10]);
                end;
                
                Console.SetCursorPosition(1,8);write(bikes[3].value[0],': ');
                if (player.bike.frame.material>=0) and (player.bike.frame.material<=4) then
                begin
                  case player.bike.frame.material of
                    0: Console.ForegroundColor:=balance.IFace.framematerial.Steel;
                    1: Console.ForegroundColor:=balance.IFace.framematerial.SteelPlus;
                    2: Console.ForegroundColor:=balance.IFace.framematerial.Alu6061;
                    3: Console.ForegroundColor:=balance.IFace.framematerial.Alu7075;
                    4: Console.ForegroundColor:=balance.IFace.framematerial.Titan;
                  end;
                  write(bikes[3].value[player.bike.frame.material+1]);
                  Console.ForegroundColor:=ConsoleColor.Black;
                end;
                
                Console.SetCursorPosition(1,9);write(bikes[3].value[6],': ');
                if (player.bike.frame.suspensionflag) then
                begin
                  Console.ForegroundColor:=consolecolor.DarkGreen;
                  write(bikes[3].value[7]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Red;
                  write(bikes[3].value[8]);
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,10);
                write(bikes[5].value[1],': ');
                if player.bike.bsusp.flag then
                begin
                  Console.ForegroundColor:=consolecolor.DarkGreen;
                  write(bikes[5].value[2]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Red;
                  write(bikes[5].value[3]);
                end;
                Console.ForegroundColor := ConsoleColor.Black;
                
                if (player.bike.frame.suspensionflag) then
                begin
                  if (player.bike.bsusp.flag) then
                  begin
                    Console.ForegroundColor:=consolecolor.Black;
                    Console.SetCursorPosition(1,11);write(bikes[4].value[3],': ');
                    if (player.bike.bsusp.suspension>=0) and (player.bike.bsusp.suspension<=4) then
                    begin
                      case player.bike.bsusp.suspension of
                        0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                        1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                        2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                        3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                        4: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                      end;
                      write(bikes[5].value[player.bike.bsusp.suspension+4]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end;
                    Console.SetCursorPosition(1,12);write(bikes[4].value[10],': ');
                    
                    if (player.bike.bsusp.travel>=balance.IFace.susptravel._0.min) and (player.bike.bsusp.travel<=balance.IFace.susptravel._0.max)
                      then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                    if (player.bike.bsusp.travel>=balance.IFace.susptravel._1.min) and (player.bike.bsusp.travel<=balance.IFace.susptravel._1.max)
                      then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                    if (player.bike.bsusp.travel>=balance.IFace.susptravel._2.min) and (player.bike.bsusp.travel<=balance.IFace.susptravel._2.max)
                      then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                    if (player.bike.bsusp.travel>=balance.IFace.susptravel._3.min) and (player.bike.bsusp.travel<=balance.IFace.susptravel._3.max)
                      then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                    
                    write(player.bike.bsusp.travel,' ',inter[0].face[11]);
                    
                    Console.ForegroundColor:=ConsoleColor.Black;
                    
                    Console.SetCursorPosition(1,13);write(bikes[4].value[11],': ');
                    if player.bike.bsusp.block then
                    begin
                      Console.ForegroundColor:=consolecolor.DarkGreen;
                      write(bikes[4].value[12]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Red;
                      write(bikes[4].value[13]);
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    Console.SetCursorPosition(1,14);write(bikes[4].value[14],': ');
                    if player.bike.bsusp.block then
                    begin
                      if player.bike.bsusp.blocks then
                      begin
                        Console.ForegroundColor:=consolecolor.DarkGray;
                        write(bikes[4].value[16]);
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.DarkYellow;
                        write(bikes[4].value[17]);
                      end;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      write(bikes[4].value[15]);
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    Console.SetCursorPosition(1,11);write(bikes[4].value[3],': ');
                    Console.SetCursorPosition(1,12);write(bikes[4].value[10],': ');
                    Console.SetCursorPosition(1,13);write(bikes[4].value[11],': ');
                    Console.SetCursorPosition(1,14);write(bikes[4].value[14],': ');
                    Console.ForegroundColor:=consolecolor.Black;
                  end;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,11);write(bikes[4].value[3],': ');
                  Console.SetCursorPosition(1,12);write(bikes[4].value[10],': ');
                  Console.SetCursorPosition(1,13);write(bikes[4].value[11],': ');
                  Console.SetCursorPosition(1,14);write(bikes[4].value[14],': ');
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,16);
                if (player.bike.bsusp.block) and (player.bike.bsusp.flag) and (player.bike.frame.suspensionflag) then
                begin
                  write('(1) ');
                  if player.bike.bsusp.blocks then write(bikes[4].value[18])
                  else write(bikes[4].value[19]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(1) ',bikes[4].value[19]);
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                Console.SetCursorPosition(1,17);
                if (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) and (allveight(player.bike.bsusp.veight)<=player.maxveight) and (player.energy>=balance.timing.bsusp_demontage.energy) then
                begin
                  write('(2) ',bikes[5].value[9])
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(2) ',bikes[5].value[9]);
                  Console.ForegroundColor:=consolecolor.Red;
                  if (allveight(player.bike.bsusp.veight)>player.maxveight) then write(' (',items[0].value[0],')')
                  else if player.energy<balance.timing.bsusp_demontage.energy then write(' (',bikes[1].value[3],')');
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                Console.SetCursorPosition(1,18);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (game.bike.frame.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.bike.frame.input);
                end;
                KTX.read_0;
                
                if game.bike.frame.input.Left(1)='/' then con(game.bike.frame.input);
                if game.bike.frame.input='0' then game.bike.frame.output:=0;
                if (game.bike.frame.input='1') and (player.bike.bsusp.block) and (player.bike.bsusp.flag) and (player.bike.frame.suspensionflag) then game.bike.frame.output:=1;
                if (game.bike.frame.input='2') and (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) and (allveight(player.bike.bsusp.veight)<=player.maxveight) and (player.energy>=balance.timing.bsusp_demontage.energy) then game.bike.frame.output:=2;
                
                if game.bike.frame.output=0 then
                begin
                  game.bike.frame.status:=false;
                end;
                
                if game.bike.frame.output=1 then
                begin
                  change(player.bike.bsusp.blocks);
                  if svg.autosave then save;
                end;
                
                if game.bike.frame.output=2 then
                begin
                  looping(balance.timing.bsusp_demontage,bikes[5].value[10]);
                  
                  var subtp: TItem;
                  subtp.tpsort:=3;
                  subtp.name:=player.bike.bsusp.name;
                  subtp.suspension:=player.bike.bsusp.suspension;
                  subtp.block:=player.bike.bsusp.block;
                  subtp.travel:=player.bike.bsusp.travel;
                  subtp.hitpoints:=player.bike.bsusp.hitpoints;
                  subtp.maxhitpoints:=player.bike.bsusp.maxhitpoints;
                  subtp.price:=player.bike.bsusp.price;
                  subtp.veight:=player.bike.bsusp.veight;
                  AddItem(subtp);
                  player.bike.bsusp.flag:=false;
                  if svg.autosave then save;
                end;
                
              end;
            end;{$endregion}
            
            if game.bike.output=2 then
            {$region GB/Fork}
            begin
              game.bike.fork.status:=true;
              while game.bike.fork.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.bike.fork.output, game.bike.fork.input);upface;
                
                Console.SetCursorPosition(1,2);write(bikes[0].value[1],' ',player.bike.fork.name);
                Console.SetCursorPosition(1,4);write(bikes[2].value[0],': ');
                
                var marker: real = player.bike.fork.hitpoints/player.bike.fork.maxhitpoints;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.fork.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.fork.hitpoints<=balance.criticalhp) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,5);write(bikes[2].value[6],': ',dgt(Round(player.bike.fork.price*marker)),' ',rub(Round(player.bike.fork.price*marker)));
                Console.SetCursorPosition(1,6);write(bikes[2].value[7],': ',Round(player.bike.fork.veight/100)/10,' ',inter[0].face[10]);
                
                Console.SetCursorPosition(1,8);write(bikes[4].value[0],': ');
                if player.bike.fork.suspensionflag then
                begin
                  Console.ForegroundColor:=consolecolor.DarkGreen;
                  write(bikes[4].value[1]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Red;
                  write(bikes[4].value[2]);
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                if player.bike.fork.suspensionflag then
                begin
                  Console.SetCursorPosition(1,9);write(bikes[4].value[3],': ');
                  
                  if (player.bike.fork.suspension>=0) and (player.bike.fork.suspension<=5) then
                  begin
                    case player.bike.fork.suspension of
                      0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                      1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                      2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                      3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                      4: Console.ForegroundColor:=Balance.IFace.susptype.OilPlus;
                      5: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                    end;
                    write(bikes[4].value[player.bike.fork.suspension+4]);
                    Console.ForegroundColor:=ConsoleColor.Black;
                  end;
                  Console.SetCursorPosition(1,10);write(bikes[4].value[10],': ');
                  
                  if (player.bike.fork.travel>=balance.IFace.susptravel._0.min) and (player.bike.fork.travel<=balance.IFace.susptravel._0.max)
                      then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                    if (player.bike.fork.travel>=balance.IFace.susptravel._1.min) and (player.bike.fork.travel<=balance.IFace.susptravel._1.max)
                      then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                    if (player.bike.fork.travel>=balance.IFace.susptravel._2.min) and (player.bike.fork.travel<=balance.IFace.susptravel._2.max)
                      then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                    if (player.bike.fork.travel>=balance.IFace.susptravel._3.min) and (player.bike.fork.travel<=balance.IFace.susptravel._3.max)
                      then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                      
                  write(player.bike.fork.travel,' ',inter[0].face[11]);
                  Console.ForegroundColor:=ConsoleColor.Black;
                  
                  Console.SetCursorPosition(1,11);write(bikes[4].value[11],': ');
                  if player.bike.fork.block then
                  begin
                    Console.ForegroundColor:=consolecolor.DarkGreen;
                    write(bikes[4].value[12]);
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Red;
                    write(bikes[4].value[13]);
                  end;
                  Console.ForegroundColor:=consolecolor.Black;
                  Console.SetCursorPosition(1,12);write(bikes[4].value[14],': ');
                  if player.bike.fork.block then
                  begin
                    if player.bike.fork.blocks then
                    begin
                      Console.ForegroundColor:=consolecolor.DarkGray;
                      write(bikes[4].value[16]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(bikes[4].value[17]);
                    end;
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    write(bikes[4].value[15]);
                  end;
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,9);write(bikes[4].value[3],': ');
                  Console.SetCursorPosition(1,10);write(bikes[4].value[10],': ');
                  Console.SetCursorPosition(1,11);write(bikes[4].value[11],': ');
                  Console.SetCursorPosition(1,12);write(bikes[4].value[14],': ');
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                
                Console.SetCursorPosition(1,14);
                if (player.bike.fork.block) and (player.bike.fork.suspensionflag) then
                begin
                  write('(1) ');
                  if player.bike.fork.blocks then write(bikes[4].value[18])
                  else write(bikes[4].value[19]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(1) ',bikes[4].value[19]);
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                Console.SetCursorPosition(1,15);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (game.bike.fork.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.bike.fork.input);
                end;
                KTX.read_0;
                
                if game.bike.fork.input.Left(1)='/' then con(game.bike.fork.input);
                if game.bike.fork.input='0' then game.bike.fork.output:=0;
                if (game.bike.fork.input='1') and (player.bike.fork.block) and (player.bike.fork.suspensionflag) then game.bike.fork.output:=1;
                
                if game.bike.fork.output=0 then
                begin
                  game.bike.fork.status:=false;
                end;
                
                if game.bike.fork.output=1 then
                begin
                  change(player.bike.fork.blocks);
                  if svg.autosave then save;
                end;
                
              end;
            end;{$endregion}
            
            if game.bike.output=3 then
            {$region GB/Transmission}
            begin
              game.bike.transmission.status:=true;
              while game.bike.transmission.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.bike.transmission.output, game.bike.transmission.input);upface;
                
                Console.SetCursorPosition(1,2);write(bikes[0].value[3],' ',player.bike.transmission.name);
                Console.SetCursorPosition(1,4);write(bikes[2].value[0],': ');
                
                var marker: real = player.bike.transmission.hitpoints/player.bike.transmission.maxhitpoints;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.transmission.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.transmission.hitpoints<=balance.criticalhp) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,5);write(bikes[2].value[6],': ',dgt(Round(player.bike.transmission.price*marker)),' ',rub(Round(player.bike.transmission.price*marker)));
                Console.SetCursorPosition(1,6);write(bikes[2].value[7],': ',Round(player.bike.transmission.veight/100)/10,' ',inter[0].face[10]);
                
                Console.SetCursorPosition(1,8);write(bikes[6].value[0],': ');
                case player.bike.transmission.count of
                  1: Console.ForegroundColor:=Balance.IFace.backcount._1;
                  6: Console.ForegroundColor:=Balance.IFace.backcount._6;
                  7: Console.ForegroundColor:=Balance.IFace.backcount._7;
                  8: Console.ForegroundColor:=Balance.IFace.backcount._8;
                  9: Console.ForegroundColor:=Balance.IFace.backcount._9;
                  10: Console.ForegroundColor:=Balance.IFace.backcount._10;
                  11..9999: Console.ForegroundColor:=Balance.IFace.backcount._11;
                end;
                
                write(player.bike.transmission.count,' ');
                case player.bike.transmission.count mod 100 of
                  1,21,31,41,51,61,71,81,91: write(bikes[6].value[2]);
                  2..4,22..24,32..34,42..44,52..54,62..64,72..74,82..84,92..94: write(bikes[6].value[3]);
                  5..20,25..30,35..40,45..50,55..60,65..70,75..80,85..90,95..99: write(bikes[6].value[4]);
                end;
                
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,9);write(bikes[6].value[1],': ');
                if not player.bike.transmission.fores then
                begin
                  Console.ForegroundColor:=Balance.IFace.forecount._1;
                  write('1 ',bikes[6].value[2]);
                end
                else
                begin
                  Console.ForegroundColor:=Balance.IFace.forecount._3;
                  write('3 ',bikes[6].value[3]);
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,11);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (game.bike.transmission.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.bike.transmission.input);
                end;
                KTX.read_0;
                
                if game.bike.transmission.input.Left(1)='/' then con(game.bike.transmission.input);
                if game.bike.transmission.input='0' then game.bike.transmission.output:=0;
                
                if game.bike.transmission.output=0 then
                begin
                  game.bike.transmission.status:=false;
                end;
                
              end;
            end;{$endregion}
            
            if game.bike.output=4 then
            {$region GB/Rudder}
            begin
              game.bike.rudder.status:=true;
              while game.bike.rudder.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.bike.rudder.output, game.bike.rudder.input);upface;
                
                Console.SetCursorPosition(1,2);write(bikes[0].value[4],' ',player.bike.rudder.name);
                Console.SetCursorPosition(1,4);write(bikes[2].value[0],': ');
                
                var marker: real = player.bike.rudder.hitpoints/player.bike.rudder.maxhitpoints;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.rudder.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.rudder.hitpoints<=balance.criticalhp) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,5);write(bikes[2].value[6],': ',dgt(Round(player.bike.rudder.price*marker)),' ',rub(Round(player.bike.rudder.price*marker)));
                Console.SetCursorPosition(1,6);write(bikes[2].value[7],': ',Round(player.bike.rudder.veight/100)/10,' ',inter[0].face[10]);
                
                Console.SetCursorPosition(1,8);write(bikes[7].value[0],': ');
                if (player.bike.rudder.sort>=0) and (player.bike.rudder.sort<=2) then
                begin
                  case player.bike.rudder.sort of
                    0: Console.ForegroundColor:=balance.IFace.ruddertype._0;
                    1: Console.ForegroundColor:=balance.IFace.ruddertype._1;
                    2: Console.ForegroundColor:=balance.IFace.ruddertype._2;
                  end;
                  write(bikes[7].value[player.bike.rudder.sort+1]);
                  Console.ForegroundColor:=ConsoleColor.Black;
                end;
                
                Console.SetCursorPosition(1,10);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (game.bike.rudder.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.bike.rudder.input);
                end;
                KTX.read_0;
                
                if game.bike.rudder.input.Left(1)='/' then con(game.bike.rudder.input);
                if game.bike.rudder.input='0' then game.bike.rudder.output:=0;
                
                if game.bike.rudder.output=0 then
                begin
                  game.bike.rudder.status:=false;
                end;
                
              end;
            end;{$endregion}
            
            if game.bike.output=5 then
            {$region GB/BackBreak}
            begin
              game.bike.backbreak.status:=true;
              while game.bike.backbreak.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.bike.backbreak.output, game.bike.backbreak.input);upface;
                var marker: real = 0;
                
                Console.SetCursorPosition(1,2);write(bikes[0].value[5],' ',player.bike.backbreak.name);
                Console.SetCursorPosition(1,4);write(bikes[2].value[0],': ');
                
                marker:= player.bike.backbreak.hitpoints/player.bike.backbreak.maxhitpoints;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.backbreak.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.backbreak.hitpoints<=balance.criticalhp) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,5);write(bikes[2].value[6],': ',dgt(Round(player.bike.backbreak.price*marker)),' ',rub(Round(player.bike.backbreak.price*marker)));
                Console.SetCursorPosition(1,6);write(bikes[2].value[7],': ',Round(player.bike.backbreak.veight/100)/10,' ',inter[0].face[10]);
                
                Console.SetCursorPosition(1,8);write(bikes[8].value[0],': ');
                if (player.bike.backbreak.sort>=1) and (player.bike.backbreak.sort<=3) then
                begin
                  case player.bike.backbreak.sort of
                    1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                    2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                    3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                  end;
                  write(bikes[8].value[player.bike.backbreak.sort]);
                  Console.ForegroundColor:=ConsoleColor.Black;
                end;
                
                Console.SetCursorPosition(1,9);write(bikes[8].value[4],': ');
                marker:= player.bike.backbreak.effection/player.bike.backbreak.maxeffection;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>balance.bk.allbreak.minimal) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker<=balance.bk.allbreak.minimal) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                if (allveight(player.bike.backbreak.veight)<=player.maxveight) and (player.energy>=balance.timing.break_demontage.energy) then
                begin
                  Console.SetCursorPosition(1,11);write('(1) ',bikes[8].value[5]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,11);write('(1) ',bikes[8].value[5]);
                  if (allveight(player.bike.backbreak.veight)>player.maxveight) then
                  begin
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',items[0].value[0],')');
                  end
                  else if (player.energy<balance.timing.break_demontage.energy) then
                  begin
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',bikes[1].value[3],')');
                  end;
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                
                Console.SetCursorPosition(1,12);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (game.bike.backbreak.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.bike.backbreak.input);
                end;
                KTX.read_0;
                
                if game.bike.backbreak.input.Left(1)='/' then con(game.bike.backbreak.input);
                if game.bike.backbreak.input='0' then game.bike.backbreak.output:=0;
                if (game.bike.backbreak.input='1') and (allveight(player.bike.backbreak.veight)<=player.maxveight) and (player.energy>=balance.timing.break_demontage.energy) then game.bike.backbreak.output:=1;
                
                if game.bike.backbreak.output=0 then
                begin
                  game.bike.backbreak.status:=false;
                end;
                
                if game.bike.backbreak.output=1 then
                begin
                  looping(balance.timing.break_demontage,bikes[8].value[6]);
                  
                  var subtp: TItem;
                  subtp.tpsort:=6;
                  subtp.name:=player.bike.backbreak.name;
                  subtp.sort:=player.bike.backbreak.sort;
                  subtp.effection:=player.bike.backbreak.effection;
                  subtp.maxeffection:=player.bike.backbreak.maxeffection;
                  subtp.hitpoints:=player.bike.backbreak.hitpoints;
                  subtp.maxhitpoints:=player.bike.backbreak.maxhitpoints;
                  subtp.price:=player.bike.backbreak.price;
                  subtp.veight:=player.bike.backbreak.veight;
                  AddItem(subtp);
                  player.bike.backbreak.flag:=false;
                  if svg.autosave then save;
                  game.bike.backbreak.status:=false;
                end;
                
              end;
            end;{$endregion}
            
            if game.bike.output=6 then
            {$region GB/FrontBreak}
            begin
              game.bike.frontbreak.status:=true;
              while game.bike.frontbreak.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.bike.frontbreak.output, game.bike.frontbreak.input);upface;
                var marker: real = 0;
                
                Console.SetCursorPosition(1,2);write(bikes[0].value[6],' ',player.bike.frontbreak.name);
                Console.SetCursorPosition(1,4);write(bikes[2].value[0],': ');
                
                marker:= player.bike.frontbreak.hitpoints/player.bike.frontbreak.maxhitpoints;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.frontbreak.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.frontbreak.hitpoints<=balance.criticalhp) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,5);write(bikes[2].value[6],': ',dgt(Round(player.bike.frontbreak.price*marker)),' ',rub(Round(player.bike.frontbreak.price*marker)));
                Console.SetCursorPosition(1,6);write(bikes[2].value[7],': ',Round(player.bike.frontbreak.veight/100)/10,' ',inter[0].face[10]);
                
                Console.SetCursorPosition(1,8);write(bikes[8].value[0],': ');
                if (player.bike.frontbreak.sort>=1) and (player.bike.frontbreak.sort<=3) then
                begin
                  case player.bike.frontbreak.sort of
                    1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                    2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                    3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                  end;
                  write(bikes[8].value[player.bike.frontbreak.sort]);
                  Console.ForegroundColor:=ConsoleColor.Black;
                end;
                
                Console.SetCursorPosition(1,9);write(bikes[8].value[4],': ');
                marker:= player.bike.frontbreak.effection/player.bike.frontbreak.maxeffection;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>balance.bk.allbreak.minimal) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker<=balance.bk.allbreak.minimal) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                if (allveight(player.bike.frontbreak.veight)<=player.maxveight) and (player.energy>=balance.timing.break_demontage.energy) then
                begin
                  Console.SetCursorPosition(1,11);write('(1) ',bikes[8].value[5]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,11);write('(1) ',bikes[8].value[5]);
                  if (allveight(player.bike.frontbreak.veight)>player.maxveight) then
                  begin
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',items[0].value[0],')');
                  end
                  else if (player.energy<balance.timing.break_demontage.energy) then
                  begin
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',bikes[1].value[3],')');
                  end;
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                
                Console.SetCursorPosition(1,12);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (game.bike.frontbreak.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.bike.frontbreak.input);
                end;
                KTX.read_0;
                
                if game.bike.frontbreak.input.Left(1)='/' then con(game.bike.frontbreak.input);
                if game.bike.frontbreak.input='0' then game.bike.frontbreak.output:=0;
                if (game.bike.frontbreak.input='1') and (allveight(player.bike.frontbreak.veight)<=player.maxveight) and (player.energy>=balance.timing.break_demontage.energy) then game.bike.frontbreak.output:=1;
                
                if game.bike.frontbreak.output=0 then
                begin
                  game.bike.frontbreak.status:=false;
                end;
                
                if game.bike.frontbreak.output=1 then
                begin
                  looping(balance.timing.break_demontage,bikes[8].value[7]);
                  
                  var subtp: TItem;
                  subtp.tpsort:=6;
                  subtp.name:=player.bike.frontbreak.name;
                  subtp.sort:=player.bike.frontbreak.sort;
                  subtp.effection:=player.bike.frontbreak.effection;
                  subtp.maxeffection:=player.bike.frontbreak.maxeffection;
                  subtp.hitpoints:=player.bike.frontbreak.hitpoints;
                  subtp.maxhitpoints:=player.bike.frontbreak.maxhitpoints;
                  subtp.price:=player.bike.frontbreak.price;
                  subtp.veight:=player.bike.frontbreak.veight;
                  AddItem(subtp);
                  player.bike.frontbreak.flag:=false;
                  if svg.autosave then save;
                  game.bike.frontbreak.status:=false;
                end;
                
              end;
            end;{$endregion}
            
            if game.bike.output=7 then
            {$region GB/BackWheel}
            begin
              game.bike.backwheel.status:=true;
              while game.bike.backwheel.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.bike.backwheel.output, game.bike.backwheel.input);upface;
                var marker: real = 0;
                
                Console.SetCursorPosition(1,2);write(bikes[0].value[7],' ',player.bike.backwheel.name);
                Console.SetCursorPosition(1,4);write(bikes[2].value[0],': ');
                
                marker:= player.bike.backwheel.hitpoints/player.bike.backwheel.maxhitpoints;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.backwheel.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.backwheel.hitpoints<=balance.criticalhp) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,5);write(bikes[2].value[6],': ',dgt(Round(player.bike.backwheel.price*marker)),' ',rub(Round(player.bike.backwheel.price*marker)));
                Console.SetCursorPosition(1,6);write(bikes[2].value[7],': ',Round(player.bike.backwheel.veight/100)/10,' ',inter[0].face[10]);
                
                Console.SetCursorPosition(1,8);write(bikes[9].value[0],': ');
                if player.bike.backwheel.needles=balance.bk.wheel.needle.maximum then Console.ForegroundColor:=consolecolor.DarkBlue
                else if player.bike.backwheel.needles>=balance.bk.wheel.needle.average then Console.ForegroundColor:=consolecolor.DarkGreen
                else if player.bike.backwheel.needles>=balance.bk.wheel.needle.minimum then Console.ForegroundColor:=consolecolor.DarkYellow
                else Console.ForegroundColor:=consolecolor.Red;
                write(player.bike.backwheel.needles,' ');
                case player.bike.backwheel.needles mod 100 of
                  1,21,31: write(bikes[9].value[1]);
                  2..4,22..24,32: write(bikes[9].value[2]);
                  0,5..20,25..30: write(bikes[9].value[3]);
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,9);write(bikes[9].value[4],': ');
                if (player.bike.backwheel.pressure>=balance.bk.wheel.pressure.minimum)
                and (player.bike.backwheel.pressure<=balance.bk.wheel.pressure.maximum)
                and (not player.bike.backwheel.camerahit) then
                begin
                  if abs(player.bike.backwheel.pressure-balance.bk.wheel.pressure.average)<=0.5 then Console.ForegroundColor:=consolecolor.DarkYellow
                  else if abs(player.bike.backwheel.pressure-balance.bk.wheel.pressure.average)<=1 then Console.ForegroundColor:=consolecolor.DarkGreen
                  else Console.ForegroundColor:=consolecolor.DarkBlue;
                  write(Round(player.bike.backwheel.pressure*10)/10,' ',inter[0].face[12]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Red;
                  if player.bike.backwheel.camerahit then
                  begin
                    write(bikes[9].value[5]);
                  end
                  else write(Round(player.bike.backwheel.pressure*10)/10,' ',inter[0].face[12]);
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,11);
                if player.bike.backwheel.camerahit then
                begin
                  if (cameraavailable) and (player.energy>=balance.timing.camering.energy) then
                  begin
                    write('(1) ',bikes[9].value[6],' (',bikes[9].value[7],': ',cameracount,')');
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    write('(1) ',bikes[9].value[6]);
                    if (not cameraavailable) then
                    begin
                      Console.ForegroundColor:=consolecolor.Red;
                      write(' (',bikes[9].value[8],')');
                    end
                    else if (player.energy<balance.timing.camering.energy) then
                    begin
                      Console.ForegroundColor:=consolecolor.Red;
                      write(' (',bikes[1].value[3],')');
                    end;
                  end;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(1) ',bikes[9].value[6]);
                end;
                
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,12);
                if player.bike.backwheel.needles<balance.bk.wheel.needle.maximum then
                begin
                  if (needleavailable) and (player.energy>=balance.timing.needling.energy) then
                  begin
                    write('(2) ',bikes[9].value[9],' (',bikes[9].value[10],': ',needlecount,')');
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    write('(2) ',bikes[9].value[9]);
                    if not needleavailable then
                    begin
                      Console.ForegroundColor:=consolecolor.Red;
                      write(' (',bikes[9].value[11],')');
                    end
                    else if (player.energy<balance.timing.needling.energy) then
                    begin
                      Console.ForegroundColor:=consolecolor.Red;
                      write(' (',bikes[1].value[3],')');
                    end;
                  end;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(2) ',bikes[9].value[9]);
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,13);
                if (not player.bike.backwheel.camerahit) and (player.energy>=balance.timing.pumping.energy) then
                begin
                  write('(3) ',bikes[9].value[12]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(3) ',bikes[9].value[12]);
                  if player.bike.backwheel.camerahit then
                  begin
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',bikes[9].value[5],')');
                  end
                  else if (player.energy<balance.timing.pumping.energy) then
                  begin
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',bikes[1].value[3],')');
                  end;
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,14);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (game.bike.backwheel.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.bike.backwheel.input);
                end;
                KTX.read_0;
                
                if game.bike.backwheel.input.Left(1)='/' then con(game.bike.backwheel.input);
                if game.bike.backwheel.input='0' then game.bike.backwheel.output:=0;
                if (game.bike.backwheel.input='1') and (player.bike.backwheel.camerahit) and (cameraavailable) and (player.energy>=balance.timing.camering.energy) then game.bike.backwheel.output:=1;
                if (game.bike.backwheel.input='2') and (player.bike.backwheel.needles<balance.bk.wheel.needle.maximum) and (needleavailable) and (player.energy>=balance.timing.needling.energy) then game.bike.backwheel.output:=2;
                if (game.bike.backwheel.input='3') and (not player.bike.backwheel.camerahit) and (player.energy>=balance.timing.pumping.energy) then game.bike.backwheel.output:=3;
                
                if game.bike.backwheel.output=0 then
                begin
                  game.bike.backwheel.status:=false;
                end;
                
                if game.bike.backwheel.output=1 then
                begin
                  looping(balance.timing.camering,bikes[9].value[13]);
                  
                  var ints: integer;
                  for var i:=player.items.Length-1 downto 0 do
                  begin
                    if player.items[i].tpsort=9 then ints:=i;
                  end;
                  
                  RemoveItem(ints);
                  player.bike.backwheel.camerahit:=false;
                  player.bike.backwheel.pressure:=0;
                  if svg.autosave then save;
                end;
                
                if game.bike.backwheel.output=2 then
                begin
                  looping(balance.timing.needling,bikes[9].value[14]);
                  
                  var ints: integer;
                  for var i:=player.items.Length-1 downto 0 do
                  begin
                    if player.items[i].tpsort=12 then ints:=i;
                  end;
                  RemoveItem(ints);
                  player.bike.backwheel.needles:=balance.bk.wheel.needle.maximum;
                  player.bike.backwheel.pressure:=0;
                  if svg.autosave then save;
                  
                end;
                
                if game.bike.backwheel.output=3 then
                begin
                  game.bike.backwheel.pressure.status:=true;
                  while game.bike.backwheel.pressure.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(game.bike.backwheel.pressure.output, game.bike.backwheel.pressure.input);upface;
                            
                    Console.SetCursorPosition(1,2);write(bikes[9].value[15],' ',bikes[9].value[16],' ',balance.bk.wheel.pressure.minimum,' ',bikes[9].value[17],' ',balance.bk.wheel.pressure.maximum);
                    Console.SetCursorPosition(1,3);write(bikes[9].value[18],' 0');
                
                    KTX.read_1;
                    while (game.bike.backwheel.pressure.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(game.bike.backwheel.pressure.input);
                    end;
                    KTX.read_0;
                    
                    if game.bike.backwheel.pressure.input.Left(1)='/' then con(game.bike.backwheel.pressure.input)
                    else if game.bike.backwheel.pressure.input='0' then game.bike.backwheel.pressure.output:=0
                    else
                    begin
                      var e: integer; var a: real;
                      val(game.bike.backwheel.pressure.input,a,e);
                      if (e=0) and (a>=balance.bk.wheel.pressure.minimum) and (a<=balance.bk.wheel.pressure.maximum) then
                      begin
                        game.bike.backwheel.pressure.output:=1;
                        game.bike.backwheel.pressure.press:=a;
                      end;
                    end;
                    
                    if game.bike.backwheel.pressure.output=0 then
                    begin
                      game.bike.backwheel.pressure.status:=false;
                    end;
                    
                    if game.bike.backwheel.pressure.output=1 then
                    begin
                      looping_sec(balance.timing.pumping,bikes[9].value[19]);
                      
                      player.bike.backwheel.pressure:=game.bike.backwheel.pressure.press;
                      game.bike.backwheel.pressure.status:=false;
                      if svg.autosave then save;
                      
                    end;
                    
                  end;
                end;
                
              end;
            end;{$endregion}
            
            if game.bike.output=8 then
            {$region GB/FrontWheel}
            begin
              game.bike.frontwheel.status:=true;
              while game.bike.frontwheel.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.bike.frontwheel.output, game.bike.frontwheel.input);upface;
                var marker: real = 0;
                
                Console.SetCursorPosition(1,2);write(bikes[0].value[8],' ',player.bike.frontwheel.name);
                Console.SetCursorPosition(1,4);write(bikes[2].value[0],': ');
                
                marker:= player.bike.frontwheel.hitpoints/player.bike.frontwheel.maxhitpoints;
                if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                begin
                  Console.ForegroundColor:=balance.status._verygood.color;
                  write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                begin
                  Console.ForegroundColor:=balance.status._good.color;
                  write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                begin
                  Console.ForegroundColor:=balance.status._normal.color;
                  write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.frontwheel.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                begin
                  Console.ForegroundColor:=balance.status._bad.color;
                  write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                end;
                if (player.bike.frontwheel.hitpoints<=balance.criticalhp) then
                begin
                  Console.ForegroundColor:=balance.status._verybad.color;
                  write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                end;
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,5);write(bikes[2].value[6],': ',dgt(Round(player.bike.frontwheel.price*marker)),' ',rub(Round(player.bike.frontwheel.price*marker)));
                Console.SetCursorPosition(1,6);write(bikes[2].value[7],': ',Round(player.bike.frontwheel.veight/100)/10,' ',inter[0].face[10]);
                
                Console.SetCursorPosition(1,8);write(bikes[9].value[0],': ');
                if player.bike.frontwheel.needles=balance.bk.wheel.needle.maximum then Console.ForegroundColor:=consolecolor.DarkBlue
                else if player.bike.frontwheel.needles>=balance.bk.wheel.needle.average then Console.ForegroundColor:=consolecolor.DarkGreen
                else if player.bike.frontwheel.needles>=balance.bk.wheel.needle.minimum then Console.ForegroundColor:=consolecolor.DarkYellow
                else Console.ForegroundColor:=consolecolor.Red;
                write(player.bike.frontwheel.needles,' ');
                case player.bike.frontwheel.needles mod 100 of
                  1,21,31: write(bikes[9].value[1]);
                  2..4,22..24,32: write(bikes[9].value[2]);
                  0,5..20,25..30: write(bikes[9].value[3]);
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,9);write(bikes[9].value[4],': ');
                if (player.bike.frontwheel.pressure>=balance.bk.wheel.pressure.minimum)
                and (player.bike.frontwheel.pressure<=balance.bk.wheel.pressure.maximum)
                and (not player.bike.frontwheel.camerahit) then
                begin
                  if abs(player.bike.frontwheel.pressure-balance.bk.wheel.pressure.average)<=0.5 then Console.ForegroundColor:=consolecolor.DarkYellow
                  else if abs(player.bike.frontwheel.pressure-balance.bk.wheel.pressure.average)<=1 then Console.ForegroundColor:=consolecolor.DarkGreen
                  else Console.ForegroundColor:=consolecolor.DarkBlue;
                  write(Round(player.bike.frontwheel.pressure*10)/10,' ',inter[0].face[12]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Red;
                  if player.bike.frontwheel.camerahit then
                  begin
                    write(bikes[9].value[5]);
                  end
                  else write(Round(player.bike.frontwheel.pressure*10)/10,' ',inter[0].face[12]);
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,11);
                if player.bike.frontwheel.camerahit then
                begin
                  if (cameraavailable) and (player.energy>=balance.timing.camering.energy) then
                  begin
                    write('(1) ',bikes[9].value[6],' (',bikes[9].value[7],': ',cameracount,')');
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    write('(1) ',bikes[9].value[6]);
                    if (not cameraavailable) then
                    begin
                      Console.ForegroundColor:=consolecolor.Red;
                      write(' (',bikes[9].value[8],')');
                    end
                    else if (player.energy<balance.timing.camering.energy) then
                    begin
                      Console.ForegroundColor:=consolecolor.Red;
                      write(' (',bikes[1].value[3],')');
                    end;
                  end;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(1) ',bikes[9].value[6]);
                end;
                
                Console.ForegroundColor:=consolecolor.Black;
                Console.SetCursorPosition(1,12);
                if player.bike.frontwheel.needles<balance.bk.wheel.needle.maximum then
                begin
                  if (needleavailable) and (player.energy>=balance.timing.needling.energy) then
                  begin
                    write('(2) ',bikes[9].value[9],' (',bikes[9].value[10],': ',needlecount,')');
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    write('(2) ',bikes[9].value[9]);
                    if not needleavailable then
                    begin
                      Console.ForegroundColor:=consolecolor.Red;
                      write(' (',bikes[9].value[11],')');
                    end
                    else if (player.energy<balance.timing.needling.energy) then
                    begin
                      Console.ForegroundColor:=consolecolor.Red;
                      write(' (',bikes[1].value[3],')');
                    end;
                  end;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(2) ',bikes[9].value[9]);
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,13);
                if (not player.bike.frontwheel.camerahit) and (player.energy>=balance.timing.pumping.energy) then
                begin
                  write('(3) ',bikes[9].value[12]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(3) ',bikes[9].value[12]);
                  if player.bike.frontwheel.camerahit then
                  begin
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',bikes[9].value[5],')');
                  end
                  else if (player.energy<balance.timing.pumping.energy) then
                  begin
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',bikes[1].value[3],')');
                  end;
                end;
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,14);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (game.bike.frontwheel.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.bike.frontwheel.input);
                end;
                KTX.read_0;
                
                if game.bike.frontwheel.input.Left(1)='/' then con(game.bike.frontwheel.input);
                if game.bike.frontwheel.input='0' then game.bike.frontwheel.output:=0;
                if (game.bike.frontwheel.input='1') and (player.bike.frontwheel.camerahit) and (cameraavailable) and (player.energy>=balance.timing.camering.energy) then game.bike.frontwheel.output:=1;
                if (game.bike.frontwheel.input='2') and (player.bike.frontwheel.needles<balance.bk.wheel.needle.maximum) and (needleavailable) and (player.energy>=balance.timing.needling.energy) then game.bike.frontwheel.output:=2;
                if (game.bike.frontwheel.input='3') and (not player.bike.frontwheel.camerahit) and (player.energy>=balance.timing.pumping.energy) then game.bike.frontwheel.output:=3;
                
                if game.bike.frontwheel.output=0 then
                begin
                  game.bike.frontwheel.status:=false;
                end;
                
                if game.bike.frontwheel.output=1 then
                begin
                  looping(balance.timing.camering,bikes[9].value[13]);
                  
                  var ints: integer;
                  for var i:=player.items.Length-1 downto 0 do
                  begin
                    if player.items[i].tpsort=9 then ints:=i;
                  end;
                  RemoveItem(ints);
                  player.bike.frontwheel.camerahit:=false;
                  player.bike.frontwheel.pressure:=0;
                  if svg.autosave then save;
                end;
                
                if game.bike.frontwheel.output=2 then
                begin
                  looping(balance.timing.needling,bikes[9].value[14]);
                  
                  var ints: integer;
                  for var i:=player.items.Length-1 downto 0 do
                  begin
                    if player.items[i].tpsort=12 then ints:=i;
                  end;
                  RemoveItem(ints);
                  player.bike.frontwheel.needles:=balance.bk.wheel.needle.maximum;
                  player.bike.frontwheel.pressure:=0;
                  if svg.autosave then save;
                  
                end;
                
                if game.bike.frontwheel.output=3 then
                begin
                  game.bike.frontwheel.pressure.status:=true;
                  while game.bike.frontwheel.pressure.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(game.bike.frontwheel.pressure.output, game.bike.frontwheel.pressure.input);upface;
                            
                    Console.SetCursorPosition(1,2);write(bikes[9].value[15],' ',bikes[9].value[16],' ',balance.bk.wheel.pressure.minimum,' ',bikes[9].value[17],' ',balance.bk.wheel.pressure.maximum);
                    Console.SetCursorPosition(1,3);write(bikes[9].value[18],' 0');
                
                    KTX.read_1;
                    while (game.bike.frontwheel.pressure.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(game.bike.frontwheel.pressure.input);
                    end;
                    KTX.read_0;
                    
                    if game.bike.frontwheel.pressure.input.Left(1)='/' then con(game.bike.frontwheel.pressure.input)
                    else if game.bike.frontwheel.pressure.input='0' then game.bike.frontwheel.pressure.output:=0
                    else
                    begin
                      var e: integer; var a: real;
                      val(game.bike.frontwheel.pressure.input,a,e);
                      if (e=0) and (a>=balance.bk.wheel.pressure.minimum) and (a<=balance.bk.wheel.pressure.maximum) then
                      begin
                        game.bike.frontwheel.pressure.output:=1;
                        game.bike.frontwheel.pressure.press:=a;
                      end;
                    end;
                    
                    if game.bike.frontwheel.pressure.output=0 then
                    begin
                      game.bike.frontwheel.pressure.status:=false;
                    end;
                    
                    if game.bike.frontwheel.pressure.output=1 then
                    begin
                      looping_sec(balance.timing.pumping,bikes[9].value[19]);
                      
                      player.bike.frontwheel.pressure:=game.bike.frontwheel.pressure.press;
                      game.bike.frontwheel.pressure.status:=false;
                      if svg.autosave then save;
                      
                    end;
                    
                  end;
                end;
                
              end;
            end;{$endregion}
            
            if game.bike.output=9 then
            {$region GB/Odometer}
            begin
              game.bike.odometer.status:=true;
              while game.bike.odometer.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.bike.odometer.output, game.bike.odometer.input);
                
                Console.SetCursorPosition(1,1);write(bikes[10].value[3],'?');
                Console.SetCursorPosition(1,2);write(bikes[10].value[4]);
                
                Console.SetCursorPosition(1,4);write('(1) ',bikes[10].value[5]);
                Console.SetCursorPosition(1,5);write('(0) ',bikes[10].value[6]);
                
                KTX.read_1;
                while (game.bike.odometer.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.bike.odometer.input);
                end;
                KTX.read_0;
                
                if game.bike.odometer.input='0' then game.bike.odometer.output:=0;
                if game.bike.odometer.input='1' then game.bike.odometer.output:=1;
                
                if game.bike.odometer.output=0 then game.bike.odometer.status:=false;
                
                if game.bike.odometer.output=1 then
                begin
                  player.bike.odo:=0;
                  save;
                  game.bike.odometer.status:=false;
                end;
              end;
            end;
            {$endregion}
            
          end;
        end;{$endregion}
        
        if game.output=4 then
        {$region GAME.SHOP}
        begin
          shop.status:=true;
          while shop.status do
          begin
            Console.Clear;KTX.resize;
            outnull(shop.output, shop.input);upface;
            
            Console.SetCursorPosition(1,2);
            write('(1) ',inter[18].face[0]);
            
            Console.SetCursorPosition(1,3);
            write('(2) ',inter[18].face[1]);
            
            Console.SetCursorPosition(1,4);
            write('(3) ',inter[18].face[2]);
            
            Console.SetCursorPosition(1,5);
            write('(4) ',inter[18].face[3]);
            
            Console.SetCursorPosition(1,6);
            write('(5) ',inter[18].face[4]);
            
            var _IsIn1of7: boolean;
            if player.itemcount>0 then
              _IsIn1of7:=player.items.Where(x -> (x.tpsort>=1) and (x.tpsort<=7)).Count >= 1
            else _IsIn1of7:=false;
            
            Console.SetCursorPosition(1,7);
            if _IsIn1of7 then
            begin
              write('(6) ',inter[18].face[5]);
            end
            else
            begin
              Console.ForegroundColor:=consolecolor.Gray;
              write('(6) ',inter[18].face[5]);
              //Console.ForegroundColor:=consolecolor.Red;
              write(' (',inter[38].face[6],')');
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,8);
            write('(0) ',inter[0].face[5]);
            
            KTX.read_1;
            while (shop.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
              readln(shop.input);
            end;
            KTX.read_0;
            
            if shop.input.Left(1)='/' then con(shop.input);
            if shop.input='0' then shop.output:=0;
            if shop.input='1' then shop.output:=1;
            if shop.input='2' then shop.output:=2;
            if shop.input='3' then shop.output:=3;
            if shop.input='4' then shop.output:=4;
            if shop.input='5' then shop.output:=5;
            if (shop.input='6') and (_IsIn1of7) then shop.output:=6;
            
            if shop.output=0 then
            begin
              shop.status:=false;
            end;
            
            {$region WATER}
            if shop.output=1 then
            begin
              shop.water.status:=true;
              while shop.water.status do
              begin
                Console.Clear;KTX.resize;
                outnull(shop.water.output, shop.water.input);upface;
                
                var prc:=Round((player.maxwater-player.water)*balance.waterprice*map[player.position].kprice);
                
                Console.SetCursorPosition(1,2);write(inter[19].face[0],': ');
                Console.ForegroundColor:=consolecolor.Blue;
                write(player.water/1000,' / ',player.maxwater/1000,' ',inter[0].face[13]);
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,4);
                if player.water<player.maxwater then
                begin
                  if player.money>=prc then
                  begin
                    write('(1) ',inter[19].face[1],' (',dgt(prc),' ',rub(prc),')');
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    write('(1) ',inter[19].face[1],' (',dgt(prc),' ',rub(prc),')');
                    Console.ForegroundColor:=consolecolor.Black;
                  end;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(1) ',inter[19].face[1]);
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                
                if player.water<player.maxwater then
                begin
                  Console.SetCursorPosition(1,5);write('(2) ',inter[19].face[2]);
                  Console.SetCursorPosition(1,6);write('(3) ',inter[19].face[3]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,5);write('(2) ',inter[19].face[2]);
                  Console.SetCursorPosition(1,6);write('(3) ',inter[19].face[3]);
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                Console.SetCursorPosition(1,7);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (shop.water.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(shop.water.input);
                end;
                KTX.read_0;
                
                if shop.water.input.Left(1)='/' then con(shop.water.input);
                
                if shop.water.input='0' then shop.water.output:=0;
                
                if player.water<player.maxwater then
                begin
                  if (shop.water.input='1') and (player.money>=prc) then shop.water.output:=1;
                  if shop.water.input='2' then shop.water.output:=2;
                  if shop.water.input='3' then shop.water.output:=3;
                end;
                
                if shop.water.output=0 then
                begin
                  shop.water.status:=false;
                end;
                
                if shop.water.output=1 then
                begin
                  player.water:=player.maxwater;
                  player.money-=prc;
                  shop.water.status:=false;
                end;
                
                if shop.water.output=2 then
                begin
                  shop.water.onsize.status:=true;
                  while shop.water.onsize.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.water.onsize.output, shop.water.onsize.input);
                    
                    Console.SetCursorPosition(1,1);write(inter[19].face[4],' (',inter[0].face[15],'. ',player.maxwater-player.water,')');
                    Console.SetCursorPosition(1,2);write(inter[19].face[5]);
                    
                    KTX.read_1;
                    while (shop.water.onsize.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(shop.water.onsize.input);
                    end;
                    KTX.read_0;
                    
                    if shop.water.onsize.input.Left(1)='/' then con(shop.water.onsize.input);
                    var _e: integer;
                    val(shop.water.onsize.input,shop.water.onsize.output,_e);
                    
                    if shop.water.onsize.output=0 then shop.water.onsize.status:=false;
                    
                    if (shop.water.onsize.output>0) and (shop.water.onsize.output<=(player.maxwater-player.water)) then
                    begin
                      var prc2:=Round((shop.water.onsize.output)*balance.waterprice*map[player.position].kprice);
                      player.water+=shop.water.onsize.output;
                      player.money-=prc2;
                      shop.water.onsize.status:=false;
                      shop.water.status:=false;
                    end;
                  end;
                end;
                
                if shop.water.output=3 then
                begin
                  shop.water.onprice.status:=true;
                  while shop.water.onprice.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.water.onprice.output, shop.water.onprice.input);
                    
                    var prc2:=Round((player.maxwater-player.water)*(balance.waterprice*map[player.position].kprice));
                    
                    Console.SetCursorPosition(1,1);write(inter[19].face[6],' (',inter[0].face[15],'. ',dgt(prc2),' ',rub(prc2),')');
                    
                    Console.SetCursorPosition(1,2);write(inter[19].face[7]);
                    Console.SetCursorPosition(1,3);write(inter[19].face[8]);
                    
                    KTX.read_1;
                    while (shop.water.onprice.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(shop.water.onprice.input);
                    end;
                    KTX.read_0;
                    
                    if shop.water.onprice.input.Left(1)='/' then con(shop.water.onprice.input);
                    
                    var _e: integer;
                    val(shop.water.onprice.input,shop.water.onprice.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.water.onprice.output=0 then shop.water.onprice.status:=false;
                      if shop.water.output<prc2 then
                      begin
                        shop.water.onprice.status:=false;
                        shop.water.status:=false;
                        player.water+=Round((shop.water.onprice.output/(balance.waterprice*map[player.position].kprice)));
                        player.money-=shop.water.onprice.output;
                        if svg.autosave then save;
                      end
                      else
                      begin
                        shop.water.onprice.status:=false;
                        shop.water.status:=false;
                        player.water:=player.maxwater;
                        player.money-=prc2;
                        if svg.autosave then save;
                      end;
                    end;
                  end;
                end;
              end;
            end;
            {$endregion}
            
            {$region FOOD}
            if shop.output=2 then
            begin
              shop.food.status:=true;
              while shop.food.status do
              begin
                Console.Clear;KTX.resize;
                outnull(shop.food.output, shop.food.input);upface;
                
                var prc:=Round((player.maxfood-player.food)*balance.foodprice*map[player.position].kprice);
                
                Console.SetCursorPosition(1,2);write(inter[20].face[0],': ');
                Console.ForegroundColor:=consolecolor.DarkYellow;
                write(player.food/1000,' / ',player.maxfood/1000,' ',inter[0].face[10]);
                Console.ForegroundColor:=consolecolor.Black;
                
                Console.SetCursorPosition(1,4);
                if player.food<player.maxfood then
                begin
                  if player.money>=prc then
                  begin
                    write('(1) ',inter[20].face[1],' (',dgt(prc),' ',rub(prc),')');
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    write('(1) ',inter[20].face[1],' (',dgt(prc),' ',rub(prc),')');
                    Console.ForegroundColor:=consolecolor.Black;
                  end;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(1) ',inter[20].face[1]);
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                
                if player.food<player.maxfood then
                begin
                  Console.SetCursorPosition(1,5);write('(2) ',inter[20].face[2]);
                  Console.SetCursorPosition(1,6);write('(3) ',inter[20].face[3]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,5);write('(2) ',inter[20].face[2]);
                  Console.SetCursorPosition(1,6);write('(3) ',inter[20].face[3]);
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                Console.SetCursorPosition(1,7);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (shop.food.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(shop.food.input);
                end;
                KTX.read_0;
                
                if shop.food.input.Left(1)='/' then con(shop.food.input);
                
                if shop.food.input='0' then shop.food.output:=0;
                
                if player.food<player.maxfood then
                begin
                  if (shop.food.input='1') and (player.money>=prc) then shop.food.output:=1;
                  if shop.food.input='2' then shop.food.output:=2;
                  if shop.food.input='3' then shop.food.output:=3;
                end;
                
                if shop.food.output=0 then
                begin
                  shop.food.status:=false;
                end;
                
                if shop.food.output=1 then
                begin
                  player.food:=player.maxfood;
                  player.money-=prc;
                  shop.food.status:=false;
                end;
                
                if shop.food.output=2 then
                begin
                  shop.food.onsize.status:=true;
                  while shop.food.onsize.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.food.onsize.output, shop.food.onsize.input);
                    
                    Console.SetCursorPosition(1,1);write(inter[20].face[4],' (',inter[0].face[15],'. ',player.maxfood-player.food,')');
                    Console.SetCursorPosition(1,2);write(inter[20].face[5]);
                    
                    KTX.read_1;
                    while (shop.food.onsize.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(shop.food.onsize.input);
                    end;
                    KTX.read_0;
                    
                    if shop.food.onsize.input.Left(1)='/' then con(shop.food.onsize.input);
                    var _e: integer;
                    val(shop.food.onsize.input,shop.food.onsize.output,_e);
                    
                    if shop.food.onsize.output=0 then shop.food.onsize.status:=false;
                    
                    if (shop.food.onsize.output>0) and (shop.food.onsize.output<=(player.maxfood-player.food)) then
                    begin
                      var prc2:=Round((shop.food.onsize.output)*balance.foodprice*map[player.position].kprice);
                      player.food+=shop.food.onsize.output;
                      player.money-=prc2;
                      shop.food.onsize.status:=false;
                      shop.food.status:=false;
                    end;
                  end;
                end;
                
                if shop.food.output=3 then
                begin
                  shop.food.onprice.status:=true;
                  while shop.food.onprice.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.food.onprice.output, shop.food.onprice.input);
                    
                    var prc2:=Round((player.maxfood-player.food)*(balance.foodprice*map[player.position].kprice));
                    
                    Console.SetCursorPosition(1,1);write(inter[20].face[6],' (',inter[0].face[15],'. ',dgt(prc2),' ',rub(prc2),')');
                    
                    Console.SetCursorPosition(1,2);write(inter[20].face[7]);
                    Console.SetCursorPosition(1,3);write(inter[20].face[8]);
                    
                    KTX.read_1;
                    while (shop.food.onprice.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(shop.food.onprice.input);
                    end;
                    KTX.read_0;
                    
                    if shop.food.onprice.input.Left(1)='/' then con(shop.food.onprice.input);
                    
                    var _e: integer;
                    val(shop.food.onprice.input,shop.food.onprice.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.food.onprice.output=0 then shop.food.onprice.status:=false;
                      if shop.food.output<prc2 then
                      begin
                        shop.food.onprice.status:=false;
                        shop.food.status:=false;
                        player.food+=Round((shop.food.onprice.output/(balance.foodprice*map[player.position].kprice)));
                        player.money-=shop.food.onprice.output;
                        if svg.autosave then save;
                      end
                      else
                      begin
                        shop.food.onprice.status:=false;
                        shop.food.status:=false;
                        player.food:=player.maxfood;
                        player.money-=prc2;
                        if svg.autosave then save;
                      end;
                    end;
                  end;
                end;
              end;
            end;
            {$endregion}
            
            {$region Buy New Details}
            if shop.output=3 then
            begin
              shop.details.status:=true;
              while shop.details.status do
              begin
                Console.Clear;KTX.resize;
                outnull(shop.details.output, shop.details.input);upface;
                
                if shop.frames=nil then
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,2);write('(1) ',inter[21].face[0]);
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else
                begin
                  Console.SetCursorPosition(1,2);write('(1) ',inter[21].face[0]);
                end;
                if shop.forks=nil then
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,3);write('(2) ',inter[21].face[1]);
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else
                begin
                  Console.SetCursorPosition(1,3);write('(2) ',inter[21].face[1]);
                end;
                if (shop.backs=nil) or (player.level<balance.MinLevel.BackSusps) then
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,4);write('(3) ',inter[21].face[2]);
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else
                begin
                  Console.SetCursorPosition(1,4);write('(3) ',inter[21].face[2]);
                end;
                if shop.trans=nil then
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,5);write('(4) ',inter[21].face[3]);
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else
                begin
                  Console.SetCursorPosition(1,5);write('(4) ',inter[21].face[3]);
                end;
                if shop.rudders=nil then
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,6);write('(5) ',inter[21].face[4]);
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else
                begin
                  Console.SetCursorPosition(1,6);write('(5) ',inter[21].face[4]);
                end;
                if shop.brakes=nil then
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,7);write('(6) ',inter[21].face[5]);
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else
                begin
                  Console.SetCursorPosition(1,7);write('(6) ',inter[21].face[5]);
                end;
                if shop.wheels=nil then
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,8);write('(7) ',inter[21].face[6]);
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else
                begin
                  Console.SetCursorPosition(1,8);write('(7) ',inter[21].face[6]);
                end;
                if shop.cards=nil then
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,9);write('(8) ',inter[21].face[7]);
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else
                begin
                  Console.SetCursorPosition(1,9);write('(8) ',inter[21].face[7]);
                end;
                
                Console.SetCursorPosition(1,10);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (shop.details.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(shop.details.input);
                end;
                KTX.read_0;
                
                if shop.details.input.Left(1)='/' then con(shop.details.input);
                
                if shop.details.input='0' then shop.details.output:=0;
                
                if (shop.details.input='1') and (shop.frames<>nil) then shop.details.output:=1;
                if (shop.details.input='2') and (shop.forks<>nil) then shop.details.output:=2;
                if (shop.details.input='3') and (shop.backs<>nil) and (player.level>=balance.MinLevel.BackSusps) then shop.details.output:=3;
                if (shop.details.input='4') and (shop.trans<>nil) then shop.details.output:=4;
                if (shop.details.input='5') and (shop.rudders<>nil) then shop.details.output:=5;
                if (shop.details.input='6') and (shop.brakes<>nil) then shop.details.output:=6;
                if (shop.details.input='7') and (shop.wheels<>nil) then shop.details.output:=7;
                if (shop.details.input='8') then shop.details.output:=8;
                
                if shop.details.output=0 then
                begin
                  shop.details.status:=false;
                end;
                
                {$region FRAMES}
                if shop.details.output=1 then
                begin
                  shop.details.frames.status:=true;
                  while shop.details.frames.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.details.frames.output, shop.details.frames.input);upface;
                    
                    var SFrames: array of TFrame;
                    SFrames:=nil;
                    
                    for var i:=0 to shop.frames.Length-1 do
                    begin
                      var check: boolean = true;
                      if shop.frames[i].lvl>player.level then check:=false;
                      if (not shop.olds) and (shop.frames[i].maxlvl<player.level) then check:=false;
                      case map[player.position].sort of
                        0: if shop.frames[i].lvl>balance.shopmaxlevels.type0 then check:=false;
                        1: if shop.frames[i].lvl>balance.shopmaxlevels.type1 then check:=false;
                        2: if shop.frames[i].lvl>balance.shopmaxlevels.type2 then check:=false;
                      end;
                      if shop.details.frames.filter.onminprice then
                      begin
                        if Round(shop.frames[i].price*map[player.position].kprice)<shop.details.frames.filter.minprice then check:=false;
                      end;
                      if shop.details.frames.filter.onmaxprice then
                      begin
                        if Round(shop.frames[i].price*map[player.position].kprice)>shop.details.frames.filter.maxprice then check:=false;
                      end;
                      if shop.details.frames.filter.onminveight then
                      begin
                        if shop.frames[i].veight<shop.details.frames.filter.minveight then check:=false;
                      end;
                      if shop.details.frames.filter.onmaxveight then
                      begin
                        if shop.frames[i].veight>shop.details.frames.filter.maxveight then check:=false;
                      end;
                      if shop.details.frames.filter.onmaterial then
                      begin
                        if shop.frames[i].material<>shop.details.frames.filter.material then check:=false;
                      end;
                      if shop.details.frames.filter.onsuspension then
                      begin
                        if shop.frames[i].susp<>shop.details.frames.filter.suspension then check:=false;
                      end;
                      if check then
                      begin
                        if SFrames = nil then SetLength(SFrames,1) else SetLength(SFrames,SFrames.Length+1);
                        SFrames[SFrames.Length-1]:=shop.frames[i];
                      end;
                    end;
                    
                    var framesize: integer;
                    
                    if SFrames = nil then framesize:=1
                    else framesize:=SFrames.Length;
                    
                    if framesize>=(KTX.maxy-15) then Console.SetBufferSize(KTX.maxx,framesize+15);
                    
                    Console.SetCursorPosition(1,2);write(inter[21].face[8],':',spcf(5),'(D) ',inter[21].face[10]);
                    
                    Console.SetCursorPosition(1,3);write('(-1) ',inter[22].face[0],': ');
                    if shop.details.frames.filter.onminprice then
                    begin
                      write(dgt(shop.details.frames.filter.minprice),' ',rub(shop.details.frames.filter.minprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,4);write('(-2) ',inter[22].face[1],': ');
                    if shop.details.frames.filter.onmaxprice then
                    begin
                      write(dgt(shop.details.frames.filter.maxprice),' ',rub(shop.details.frames.filter.maxprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,5);write('(-3) ',inter[22].face[2],': ');
                    if shop.details.frames.filter.onminveight then
                    begin
                      write(shop.details.frames.filter.minveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,6);write('(-4) ',inter[22].face[3],': ');
                    if shop.details.frames.filter.onmaxveight then
                    begin
                      write(shop.details.frames.filter.maxveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,7);write('(-5) ',inter[22].face[4],': ');
                    if shop.details.frames.filter.onmaterial then
                    begin
                      case shop.details.frames.filter.material of
                        0: Console.ForegroundColor:=balance.IFace.framematerial.Steel;
                        1: Console.ForegroundColor:=balance.IFace.framematerial.SteelPlus;
                        2: Console.ForegroundColor:=balance.IFace.framematerial.Alu6061;
                        3: Console.ForegroundColor:=balance.IFace.framematerial.Alu7075;
                        4: Console.ForegroundColor:=balance.IFace.framematerial.Titan;
                      end;
                      write(bikes[3].value[shop.details.frames.filter.material+1]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,8);write('(-6) ',inter[22].face[5],': ');
                    if shop.details.frames.filter.onsuspension then
                    begin
                      if shop.details.frames.filter.suspension then
                      begin
                        Console.ForegroundColor:=ConsoleColor.DarkGreen;
                        write(bikes[3].value[7])
                      end
                      else
                      begin
                        Console.ForegroundColor:=ConsoleColor.Red;
                        write(bikes[3].value[8]);
                      end;
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,10);write(inter[22].face[6],': ');
                    if SFrames = nil then
                    begin
                      Console.SetCursorPosition(1,11);write(inter[22].face[7]);
                    end
                    else
                    begin
                      for var i:=0 to SFrames.Length-1 do
                      begin
                        var price:=Round(SFrames[i].price*map[player.position].kprice);
                        Console.SetCursorPosition(1,11+i);write('(',i+1,') ',Rome(SFrames[i].lvl),' ',SFrames[i].name,' (',dgt(price),' ',rub(price),')');
                      end;
                    end;
                    
                    Console.SetCursorPosition(1,framesize+11);write('(0) ',inter[0].face[5]);
                    
                    KTX.read_1;
                    while (shop.details.frames.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      if framesize>=(KTX.maxy-15) then
                      begin
                        Console.SetCursorPosition(1,framesize+14);
                        Console.SetCursorPosition(1,framesize+13);
                      end
                      else Console.SetCursorPosition(1,KTX.maxy-2);
                      write(': ');
                      readln(shop.details.frames.input);
                    end;
                    KTX.read_0;
                    
                    if shop.details.frames.input.Left(1)='/' then con(shop.details.frames.input);
                    
                    if shop.details.frames.input='0' then shop.details.frames.output:=0;
                    
                    if shop.details.frames.input.ToLower='d' then
                    begin
                      shop.details.frames.filter.onmaterial:=false;
                      shop.details.frames.filter.onmaxprice:=false;
                      shop.details.frames.filter.onmaxveight:=false;
                      shop.details.frames.filter.onminprice:=false;
                      shop.details.frames.filter.onminveight:=false;
                      shop.details.frames.filter.onsuspension:=false;
                    end;
                    
                    var _e: integer;
                    val(shop.details.frames.input,shop.details.frames.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.details.frames.output=0 then shop.details.frames.status:=false;
                      
                      {$region Filters}
                      if shop.details.frames.output=-1 then
                      begin
                        shop.details.frames.fs_minprice.status:=true;
                        while shop.details.frames.fs_minprice.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.frames.fs_minprice.output, shop.details.frames.fs_minprice.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.frames.filter.onminprice then
                          begin
                            write(dgt(shop.details.frames.filter.minprice),' ',rub(shop.details.frames.filter.minprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.frames.fs_minprice.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.frames.fs_minprice.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.frames.fs_minprice.input.Left(1)='/' then con(shop.details.frames.fs_minprice.input);
                          
                          if shop.details.frames.fs_minprice.input='0' then shop.details.frames.fs_minprice.status:=false;
                          
                          if shop.details.frames.fs_minprice.input.ToLower='d' then
                          begin
                            shop.details.frames.filter.onminprice:=false;
                            shop.details.frames.fs_minprice.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.frames.fs_minprice.input,shop.details.frames.fs_minprice.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.frames.fs_minprice.output>0 then
                            begin
                              shop.details.frames.fs_minprice.status:=false;
                              shop.details.frames.filter.onminprice:=true;
                              shop.details.frames.filter.minprice:=shop.details.frames.fs_minprice.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.frames.output=-2 then
                      begin
                        shop.details.frames.fs_maxprice.status:=true;
                        while shop.details.frames.fs_maxprice.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.frames.fs_maxprice.output, shop.details.frames.fs_maxprice.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.frames.filter.onmaxprice then
                          begin
                            write(dgt(shop.details.frames.filter.maxprice),' ',rub(shop.details.frames.filter.maxprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.frames.fs_maxprice.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.frames.fs_maxprice.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.frames.fs_maxprice.input.Left(1)='/' then con(shop.details.frames.fs_maxprice.input);
                          
                          if shop.details.frames.fs_maxprice.input='0' then shop.details.frames.fs_maxprice.status:=false;
                          
                          if shop.details.frames.fs_maxprice.input.ToLower='d' then
                          begin
                            shop.details.frames.filter.onmaxprice:=false;
                            shop.details.frames.fs_maxprice.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.frames.fs_maxprice.input,shop.details.frames.fs_maxprice.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.frames.fs_maxprice.output>0 then
                            begin
                              shop.details.frames.fs_maxprice.status:=false;
                              shop.details.frames.filter.onmaxprice:=true;
                              shop.details.frames.filter.maxprice:=shop.details.frames.fs_maxprice.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.frames.output=-3 then
                      begin
                        shop.details.frames.fs_minveight.status:=true;
                        while shop.details.frames.fs_minveight.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.frames.fs_minveight.output, shop.details.frames.fs_minveight.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.frames.filter.onminveight then
                          begin
                            write(shop.details.frames.filter.minveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.frames.fs_minveight.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.frames.fs_minveight.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.frames.fs_minveight.input.Left(1)='/' then con(shop.details.frames.fs_minveight.input);
                          
                          if shop.details.frames.fs_minveight.input='0' then shop.details.frames.fs_minveight.status:=false;
                          
                          if shop.details.frames.fs_minveight.input.ToLower='d' then
                          begin
                            shop.details.frames.filter.onminveight:=false;
                            shop.details.frames.fs_minveight.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.frames.fs_minveight.input,shop.details.frames.fs_minveight.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.frames.fs_minveight.output>0 then
                            begin
                              shop.details.frames.fs_minveight.status:=false;
                              shop.details.frames.filter.onminveight:=true;
                              shop.details.frames.filter.minveight:=shop.details.frames.fs_minveight.output;
                            end;
                          end;
                          
                        end;
                      end;
                      
                      if shop.details.frames.output=-4 then
                      begin
                        shop.details.frames.fs_maxveight.status:=true;
                        while shop.details.frames.fs_maxveight.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.frames.fs_maxveight.output, shop.details.frames.fs_maxveight.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[3]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.frames.filter.onmaxveight then
                          begin
                            write(shop.details.frames.filter.maxveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.frames.fs_maxveight.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.frames.fs_maxveight.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.frames.fs_maxveight.input.Left(1)='/' then con(shop.details.frames.fs_maxveight.input);
                          
                          if shop.details.frames.fs_maxveight.input='0' then shop.details.frames.fs_maxveight.status:=false;
                          
                          if shop.details.frames.fs_maxveight.input.ToLower='d' then
                          begin
                            shop.details.frames.filter.onmaxveight:=false;
                            shop.details.frames.fs_maxveight.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.frames.fs_maxveight.input,shop.details.frames.fs_maxveight.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.frames.fs_maxveight.output>0 then
                            begin
                              shop.details.frames.fs_maxveight.status:=false;
                              shop.details.frames.filter.onmaxveight:=true;
                              shop.details.frames.filter.maxveight:=shop.details.frames.fs_maxveight.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.frames.output=-5 then
                      begin
                        shop.details.frames.fs_material.status:=true;
                        while shop.details.frames.fs_material.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.frames.fs_material.output, shop.details.frames.fs_material.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[4]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.frames.filter.onmaterial then
                          begin
                            write(bikes[3].value[shop.details.frames.filter.material+1]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[22].face[13]);
                         
                          for var i:=0 to 4 do
                          begin
                            Console.SetCursorPosition(1,5+i);
                            write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=balance.IFace.framematerial.Steel;
                              1: Console.ForegroundColor:=balance.IFace.framematerial.SteelPlus;
                              2: Console.ForegroundColor:=balance.IFace.framematerial.Alu6061;
                              3: Console.ForegroundColor:=balance.IFace.framematerial.Alu7075;
                              4: Console.ForegroundColor:=balance.IFace.framematerial.Titan;
                            end;
                            write(bikes[3].value[1+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          
                          Console.SetCursorPosition(1,10);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,11);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.frames.fs_material.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.frames.fs_material.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.frames.fs_material.input.Left(1)='/' then con(shop.details.frames.fs_material.input);
                          
                          if shop.details.frames.fs_material.input='0' then shop.details.frames.fs_material.status:=false;
                          
                          if shop.details.frames.fs_material.input.ToLower='d' then
                          begin
                            shop.details.frames.filter.onmaterial:=false;
                            shop.details.frames.fs_material.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.frames.fs_material.input,shop.details.frames.fs_material.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if (shop.details.frames.fs_material.output>0) and (shop.details.frames.fs_material.output<=5) then
                            begin
                              shop.details.frames.fs_material.status:=false;
                              shop.details.frames.filter.onmaterial:=true;
                              shop.details.frames.filter.material:=shop.details.frames.fs_material.output-1;
                            end;
                          end;
                          
                        end;
                      end;
                      
                      if shop.details.frames.output=-6 then
                      begin
                        shop.details.frames.fs_suspension.status:=true;
                        while shop.details.frames.fs_suspension.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.frames.fs_suspension.output, shop.details.frames.fs_suspension.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[5]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.frames.filter.onsuspension then
                          begin
                            if shop.details.frames.filter.suspension then
                            begin
                              Console.ForegroundColor:=ConsoleColor.DarkGreen;
                              write(bikes[3].value[7])
                            end
                            else
                            begin
                              Console.ForegroundColor:=ConsoleColor.Red;
                              write(bikes[3].value[8]);
                            end;
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[22].face[15]);
                          for var i:=0 to 1 do
                          begin
                            Console.SetCursorPosition(1,5+i);
                            write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=ConsoleColor.DarkGreen;
                              1: Console.ForegroundColor:=ConsoleColor.Red;
                            end;
                            write(bikes[3].value[7+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,7);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,8);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.frames.fs_suspension.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.frames.fs_suspension.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.frames.fs_suspension.input.Left(1)='/' then con(shop.details.frames.fs_suspension.input);
                          
                          if shop.details.frames.fs_suspension.input='0' then shop.details.frames.fs_suspension.status:=false;
                          
                          if shop.details.frames.fs_suspension.input.ToLower='d' then
                          begin
                            shop.details.frames.filter.onsuspension:=false;
                            shop.details.frames.fs_suspension.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.frames.fs_suspension.input,shop.details.frames.fs_suspension.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if (shop.details.frames.fs_suspension.output>0) and (shop.details.frames.fs_suspension.output<=2) then
                            begin
                              shop.details.frames.fs_suspension.status:=false;
                              shop.details.frames.filter.onsuspension:=true;
                              shop.details.frames.filter.suspension:=IntToBool(shop.details.frames.fs_suspension.output-1);
                              change(shop.details.frames.filter.suspension);
                            end;
                          end;
                          
                        end;
                      end;
                      {$endregion}
                      
                      if (shop.details.frames.output>0) and (SFrames<>nil) and (shop.details.frames.output<=SFrames.Length) then
                      begin
                        shop.details.frames.buy.status:=true;
                        while shop.details.frames.buy.status do
                        begin
                          
                          var index:=shop.details.frames.output-1;
                          var price:=Round(SFrames[index].price*map[player.position].kprice);
                        
                          Console.Clear;KTX.resize;
                          outnull(shop.details.frames.buy.output, shop.details.frames.buy.input);upface;
                          
                          Console.SetCursorPosition(1,2);write(bikes[0].value[0],' ',Rome(SFrames[index].lvl),' ',SFrames[index].name);
                          
                          Console.SetCursorPosition(1,4);write(inter[21].face[12],': ',dgt(price),' ',rub(price));
                          Console.SetCursorPosition(1,5);write(inter[21].face[11],': ',SFrames[index].veight/1000,' ',inter[0].face[10]);
                          
                          Console.SetCursorPosition(1,7);write(bikes[3].value[0],': ');
                          case SFrames[index].material of
                            0: Console.ForegroundColor:=balance.IFace.framematerial.Steel;
                            1: Console.ForegroundColor:=balance.IFace.framematerial.SteelPlus;
                            2: Console.ForegroundColor:=balance.IFace.framematerial.Alu6061;
                            3: Console.ForegroundColor:=balance.IFace.framematerial.Alu7075;
                            4: Console.ForegroundColor:=balance.IFace.framematerial.Titan;
                          end;
                          write(bikes[3].value[1+SFrames[index].material]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                          Console.SetCursorPosition(1,8);write(bikes[3].value[6],': ');
                          if SFrames[index].susp then
                          begin
                            Console.ForegroundColor:=ConsoleColor.DarkGreen;
                            write(bikes[3].value[7]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=ConsoleColor.Red;
                            write(bikes[3].value[8]);
                          end;
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          Console.SetCursorPosition(1,KTX.maxy-5);
                          if player.money>=price then
                          begin
                            write('(1) ',inter[21].face[13]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',inter[21].face[13]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',inter[21].face[14],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.frames.buy.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.frames.buy.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.frames.buy.input.Left(1)='/' then con(shop.details.frames.buy.input);
                          
                          if shop.details.frames.buy.input='0' then shop.details.frames.buy.output:=0;
                          if (shop.details.frames.buy.input='1') and (player.money>=price) then shop.details.frames.buy.output:=1;
                          
                          if shop.details.frames.buy.output=0 then shop.details.frames.buy.status:=false;
                          
                          if shop.details.frames.buy.output=1 then
                          begin
                            shop.details.frames.buy.check.status:=true;
                            while shop.details.frames.buy.check.status do
                            begin
                              Console.Clear;KTX.resize;
                              outnull(shop.details.frames.buy.check.output, shop.details.frames.buy.check.input);
                              
                              Console.SetCursorPosition(1,1);write(inter[22].face[16],'?');
                              Console.SetCursorPosition(1,2);write(inter[22].face[17],'?');
                              Console.SetCursorPosition(1,4);
                              if (((not player.bike.frame.suspensionflag) or (not player.bike.bsusp.flag)) and (allveight(player.bike.frame.veight)<=player.maxveight))
                              or ((player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) and (allveight(player.bike.frame.veight,player.bike.bsusp.veight)<=player.maxveight))
                              then
                              begin
                                if ((not ((player.bike.frame.suspensionflag) and (player.bike.bsusp.flag))) and (player.energy>=balance.timing.it_framing.energy))
                                or (((player.bike.frame.suspensionflag) and (player.bike.bsusp.flag)) and (player.energy >= balance.timing.it_framing.energy +balance.timing.bsusp_demontage.energy)) then
                                begin
                                  write('(1) ',inter[22].face[18]);
                                end
                                else
                                begin
                                  Console.ForegroundColor:=consolecolor.Gray;
                                  write('(1) ',inter[22].face[18]);
                                  Console.ForegroundColor:=consolecolor.Red;
                                  write(' (',items[0].value[7],')');
                                  Console.ForegroundColor:=consolecolor.Black;
                                end;
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(1) ',inter[22].face[18]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,5);
                              if allveight(SFrames[index].veight)<=player.maxveight then
                              begin
                                write('(2) ',inter[22].face[19]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(2) ',inter[22].face[19]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,6);write('(0) ',inter[22].face[20]);
                              
                              KTX.read_1;
                              while (shop.details.frames.buy.check.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                              begin
                                Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                readln(shop.details.frames.buy.check.input);
                              end;
                              KTX.read_0;
                              
                              if shop.details.frames.buy.check.input.Left(1)='/' then con(shop.details.frames.buy.check.input);
                              
                              if shop.details.frames.buy.check.input='0' then shop.details.frames.buy.check.output:=0;
                              
                              if (shop.details.frames.buy.check.input='1') and ((allveight(player.bike.frame.veight)<=player.maxveight) and (player.energy>=balance.timing.it_framing.energy)
                              and ((((not (player.bike.frame.suspensionflag)) or (not player.bike.bsusp.flag))) and (player.energy>=balance.timing.it_framing.energy))
                              or ((player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) and (player.energy>=balance.timing.it_framing.energy+balance.timing.bsusp_demontage.energy)) and (allveight(player.bike.bsusp.veight)<=player.maxveight))
                              then shop.details.frames.buy.check.output:=1;
                              
                              if (shop.details.frames.buy.check.input='2') and (allveight(SFrames[index].veight)<=player.maxveight) then shop.details.frames.buy.check.output:=2;
                              
                              if shop.details.frames.buy.check.output=0 then shop.details.frames.buy.check.status:=false;
                              
                              if shop.details.frames.buy.check.output=1 then
                              begin
                                if (player.bike.bsusp.flag) and (player.bike.frame.suspensionflag) then
                                begin
                                  looping(balance.timing.bsusp_demontage,bikes[5].value[10]);
                                  var sw2: TItem;
                                  sw2.tpsort:=3;
                                  sw2.name:=player.bike.bsusp.name;
                                  sw2.block:=player.bike.bsusp.block;
                                  sw2.hitpoints:=player.bike.bsusp.hitpoints;
                                  sw2.maxhitpoints:=player.bike.bsusp.maxhitpoints;
                                  sw2.price:=player.bike.bsusp.price;
                                  sw2.veight:=player.bike.bsusp.veight;
                                  sw2.travel:=player.bike.bsusp.travel;
                                  sw2.suspension:=player.bike.bsusp.suspension;
                                  AddItem(sw2);
                                  player.bike.bsusp.flag:=false;
                                end;
                                looping(balance.timing.it_framing,items[18].value[6]);
                                var sw: TItem;
                                sw.tpsort:=1;
                                sw.name:=player.bike.frame.name;
                                sw.maxhitpoints:=player.bike.frame.maxhitpoints;
                                sw.hitpoints:=player.bike.frame.hitpoints;
                                sw.material:=player.bike.frame.material;
                                sw.veight:=player.bike.frame.veight;
                                sw.price:=player.bike.frame.price;
                                sw.suspensionflag:=player.bike.frame.suspensionflag;
                                AddItem(sw);
                                player.money-=price;
                                player.bike.frame.name:=SFrames[index].name;
                                case SFrames[index].material of
                                  0: player.bike.frame.maxhitpoints:=balance.bk.frame.material.steel.hitpoints;
                                  1: player.bike.frame.maxhitpoints:=balance.bk.frame.material.steelplus.hitpoints;
                                  2: player.bike.frame.maxhitpoints:=balance.bk.frame.material.alu6061.hitpoints;
                                  3: player.bike.frame.maxhitpoints:=balance.bk.frame.material.alu7075.hitpoints;
                                  4: player.bike.frame.maxhitpoints:=balance.bk.frame.material.titan.hitpoints;
                                end;
                                player.bike.frame.hitpoints:=player.bike.frame.maxhitpoints;
                                player.bike.frame.material:=SFrames[index].material;
                                player.bike.frame.suspensionflag:=SFrames[index].susp;
                                player.bike.frame.price:=SFrames[index].price;
                                player.bike.frame.veight:=SFrames[index].veight;
                                if svg.autosave then save;
                                shop.details.frames.buy.check.status:=false;
                                shop.details.frames.buy.status:=false;
                              end;
                              
                              if shop.details.frames.buy.check.output=2 then
                              begin
                                var sw: TItem;
                                sw.tpsort:=1;
                                sw.name:=SFrames[index].name;
                                sw.material:=SFrames[index].material;
                                case SFrames[index].material of
                                  0: sw.maxhitpoints:=balance.bk.frame.material.steel.hitpoints;
                                  1: sw.maxhitpoints:=balance.bk.frame.material.steelplus.hitpoints;
                                  2: sw.maxhitpoints:=balance.bk.frame.material.alu6061.hitpoints;
                                  3: sw.maxhitpoints:=balance.bk.frame.material.alu7075.hitpoints;
                                  4: sw.maxhitpoints:=balance.bk.frame.material.titan.hitpoints;
                                end;
                                sw.hitpoints:=sw.maxhitpoints;
                                sw.price:=SFrames[index].price;
                                sw.veight:=SFrames[index].veight;
                                sw.suspensionflag:=SFrames[index].susp;
                                AddItem(sw);
                                player.money-=price;
                                
                                if svg.autosave then save;
                                shop.details.frames.buy.check.status:=false;
                                shop.details.frames.buy.status:=false;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                    
                  end;
                end;
                {$endregion}
                
                {$region FORKS}
                if shop.details.output=2 then
                begin
                  shop.details.forks.status:=true;
                  while shop.details.forks.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.details.forks.output, shop.details.forks.input);upface;
                    
                    var SForks: array of TFork;
                    SForks:=nil;
                    
                    for var i:=0 to shop.forks.Length-1 do
                    begin
                      var check: boolean = true;
                      if shop.forks[i].lvl>player.level then check:=false;
                      if (not shop.olds) and (shop.forks[i].maxlvl<player.level) then check:=false;
                      case map[player.position].sort of
                        0: if shop.forks[i].lvl>balance.shopmaxlevels.type0 then check:=false;
                        1: if shop.forks[i].lvl>balance.shopmaxlevels.type1 then check:=false;
                        2: if shop.forks[i].lvl>balance.shopmaxlevels.type2 then check:=false;
                      end;
                      if shop.details.forks.onminprice then
                      begin
                        if Round(shop.forks[i].price*map[player.position].kprice)<shop.details.forks.minprice then check:=false;
                      end;
                      if shop.details.forks.onmaxprice then
                      begin
                        if Round(shop.forks[i].price*map[player.position].kprice)>shop.details.forks.maxprice then check:=false;
                      end;
                      if shop.details.forks.onminveight then
                      begin
                        if shop.forks[i].veight<shop.details.forks.minveight then check:=false;
                      end;
                      if shop.details.forks.onmaxveight then
                      begin
                        if shop.forks[i].veight>shop.details.forks.maxveight then check:=false;
                      end;
                      if shop.details.forks.onsort then
                      begin
                        if shop.forks[i].sort<>shop.details.forks.sort then check:=false;
                      end;
                      if shop.details.forks.onsuspension then
                      begin
                        if shop.forks[i].susp<>shop.details.forks.suspension then check:=false;
                      end;
                      if shop.details.forks.onmintravel then
                      begin
                        if shop.forks[i].travel<shop.details.forks.mintravel then check:=false;
                      end;
                      if shop.details.forks.onmaxtravel then
                      begin
                        if shop.forks[i].travel>shop.details.forks.mintravel then check:=false;
                      end;
                      if shop.details.forks.onblock then
                      begin
                        if shop.forks[i].block<>shop.details.forks.block then check:=false;
                      end;
                      if check then
                      begin
                        if SForks = nil then SetLength(SForks,1) else SetLength(SForks,SForks.Length+1);
                        SForks[SForks.Length-1]:=shop.forks[i];
                      end;
                    end;
                    
                    var forksize: integer;
                    
                    if SForks = nil then forksize:=1
                    else forksize:=SForks.Length;
                    
                    if forksize>=(KTX.maxy-18) then Console.SetBufferSize(KTX.maxx,forksize+18);
                    
                    Console.SetCursorPosition(1,2);write(inter[21].face[8],':',spcf(5),'(D) ',inter[21].face[10]);
                    
                    Console.SetCursorPosition(1,3);write('(-1) ',inter[22].face[0],': ');
                    if shop.details.forks.onminprice then
                    begin
                      write(dgt(shop.details.forks.minprice),' ',rub(shop.details.forks.minprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,4);write('(-2) ',inter[22].face[1],': ');
                    if shop.details.forks.onmaxprice then
                    begin
                      write(dgt(shop.details.forks.maxprice),' ',rub(shop.details.forks.maxprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,5);write('(-3) ',inter[22].face[2],': ');
                    if shop.details.forks.onminveight then
                    begin
                      write(shop.details.forks.minveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,6);write('(-4) ',inter[22].face[3],': ');
                    if shop.details.forks.onmaxveight then
                    begin
                      write(shop.details.forks.maxveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,7);write('(-5) ',inter[23].face[0],': ');
                    if shop.details.forks.onsuspension then
                    begin
                      if shop.details.forks.suspension then
                      begin
                        Console.ForegroundColor:=ConsoleColor.DarkGreen;
                        write(bikes[4].value[1]);
                      end
                      else
                      begin
                        Console.ForegroundColor:=ConsoleColor.Red;
                        write(bikes[4].value[2]);
                      end;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                    end;
                    Console.ForegroundColor:=ConsoleColor.Black;
                    
                    Console.SetCursorPosition(1,8);write('(-6) ',inter[23].face[1],': ');
                    if shop.details.forks.onsort then
                    begin
                      case shop.details.forks.sort of
                        0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                        1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                        2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                        3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                        4: Console.ForegroundColor:=Balance.IFace.susptype.OilPlus;
                        5: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                      end;
                      write(bikes[4].value[4+shop.details.forks.sort]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,9);write('(-7) ',inter[23].face[2],': ');
                    if shop.details.forks.onmintravel then
                    begin
                      if (shop.details.forks.mintravel>=balance.IFace.susptravel._0.min) and (shop.details.forks.mintravel<=balance.IFace.susptravel._0.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                      if (shop.details.forks.mintravel>=balance.IFace.susptravel._1.min) and (shop.details.forks.mintravel<=balance.IFace.susptravel._1.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                      if (shop.details.forks.mintravel>=balance.IFace.susptravel._2.min) and (shop.details.forks.mintravel<=balance.IFace.susptravel._2.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                      if (shop.details.forks.mintravel>=balance.IFace.susptravel._3.min) and (shop.details.forks.mintravel<=balance.IFace.susptravel._3.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                      write(shop.details.forks.mintravel,' ',inter[0].face[11]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,10);write('(-8) ',inter[23].face[3],': ');
                    if shop.details.forks.onmaxtravel then
                    begin
                      if (shop.details.forks.maxtravel>=balance.IFace.susptravel._0.min) and (shop.details.forks.maxtravel<=balance.IFace.susptravel._0.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                      if (shop.details.forks.maxtravel>=balance.IFace.susptravel._1.min) and (shop.details.forks.maxtravel<=balance.IFace.susptravel._1.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                      if (shop.details.forks.maxtravel>=balance.IFace.susptravel._2.min) and (shop.details.forks.maxtravel<=balance.IFace.susptravel._2.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                      if (shop.details.forks.maxtravel>=balance.IFace.susptravel._3.min) and (shop.details.forks.maxtravel<=balance.IFace.susptravel._3.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                      write(shop.details.forks.maxtravel,' ',inter[0].face[11]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,11);write('(-9) ',inter[23].face[4],': ');
                    if shop.details.forks.onblock then
                    begin
                      if shop.details.forks.block then
                      begin
                        Console.ForegroundColor:=ConsoleColor.DarkGreen;
                        write(bikes[4].value[12]);
                      end
                      else
                      begin
                        Console.ForegroundColor:=ConsoleColor.Red;
                        write(bikes[4].value[13]);
                      end;
                      Console.ForegroundColor:=consolecolor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,13);write(inter[22].face[6],': ');
                    if SForks = nil then
                    begin
                      Console.SetCursorPosition(1,14);write(inter[22].face[7]);
                    end
                    else
                    begin
                      for var i:=0 to SForks.Length-1 do
                      begin
                        var price:=Round(SForks[i].price*map[player.position].kprice);
                        Console.SetCursorPosition(1,14+i);write('(',i+1,') ',Rome(SForks[i].lvl),' ',SForks[i].name,' (',dgt(price),' ',rub(price),')');
                      end;
                    end;
                    
                    Console.SetCursorPosition(1,forksize+14);write('(0) ',inter[0].face[5]);
                    
                    KTX.read_1;
                    while (shop.details.forks.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      if forksize>=(KTX.maxy-18) then
                      begin
                        Console.SetCursorPosition(1,forksize+17);
                        Console.SetCursorPosition(1,forksize+16);
                      end
                      else Console.SetCursorPosition(1,KTX.maxy-2);
                      write(': ');
                      readln(shop.details.forks.input);
                    end;
                    KTX.read_0;
                    
                    if shop.details.forks.input.Left(1)='/' then con(shop.details.forks.input);
                    
                    if shop.details.forks.input='0' then shop.details.forks.output:=0;
                    
                    if shop.details.forks.input.ToLower='d' then
                    begin
                      shop.details.forks.onmaterial:=false;
                      shop.details.forks.onmaxprice:=false;
                      shop.details.forks.onmaxveight:=false;
                      shop.details.forks.onminprice:=false;
                      shop.details.forks.onminveight:=false;
                      shop.details.forks.onsuspension:=false;
                      shop.details.forks.onsort:=false;
                      shop.details.forks.onmintravel:=false;
                      shop.details.forks.onmaxtravel:=false;
                      shop.details.forks.onblock:=false;
                    end;
                    
                    var _e: integer;
                    val(shop.details.forks.input,shop.details.forks.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.details.forks.output=0 then shop.details.forks.status:=false;
                      
                      {$region Filters}
                      if shop.details.forks.output=-1 then
                      begin
                        shop.details.forks.fset.status:=true;
                        while shop.details.forks.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.fset.output, shop.details.forks.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.forks.onminprice then
                          begin
                            write(dgt(shop.details.forks.minprice),' ',rub(shop.details.forks.minprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.forks.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.fset.input.Left(1)='/' then con(shop.details.forks.fset.input);
                          
                          if shop.details.forks.fset.input='0' then shop.details.forks.fset.status:=false;
                          
                          if shop.details.forks.fset.input.ToLower='d' then
                          begin
                            shop.details.forks.onminprice:=false;
                            shop.details.forks.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.forks.fset.input,shop.details.forks.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.forks.fset.output>0 then
                            begin
                              shop.details.forks.fset.status:=false;
                              shop.details.forks.onminprice:=true;
                              shop.details.forks.minprice:=shop.details.forks.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.forks.output=-2 then
                      begin
                        shop.details.forks.fset.status:=true;
                        while shop.details.forks.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.fset.output, shop.details.forks.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.forks.onmaxprice then
                          begin
                            write(dgt(shop.details.forks.maxprice),' ',rub(shop.details.forks.maxprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.forks.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.fset.input.Left(1)='/' then con(shop.details.forks.fset.input);
                          
                          if shop.details.forks.fset.input='0' then shop.details.forks.fset.status:=false;
                          
                          if shop.details.forks.fset.input.ToLower='d' then
                          begin
                            shop.details.forks.onmaxprice:=false;
                            shop.details.forks.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.forks.fset.input,shop.details.forks.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.forks.fset.output>0 then
                            begin
                              shop.details.forks.fset.status:=false;
                              shop.details.forks.onmaxprice:=true;
                              shop.details.forks.maxprice:=shop.details.forks.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.forks.output=-3 then
                      begin
                        shop.details.forks.fset.status:=true;
                        while shop.details.forks.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.fset.output, shop.details.forks.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.forks.onminveight then
                          begin
                            write(shop.details.forks.minveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.forks.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.fset.input.Left(1)='/' then con(shop.details.forks.fset.input);
                          
                          if shop.details.forks.fset.input='0' then shop.details.forks.fset.status:=false;
                          
                          if shop.details.forks.fset.input.ToLower='d' then
                          begin
                            shop.details.forks.onminveight:=false;
                            shop.details.forks.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.forks.fset.input,shop.details.forks.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.forks.fset.output>0 then
                            begin
                              shop.details.forks.fset.status:=false;
                              shop.details.forks.onminveight:=true;
                              shop.details.forks.minveight:=shop.details.forks.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.forks.output=-4 then
                      begin
                        shop.details.forks.fset.status:=true;
                        while shop.details.forks.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.fset.output, shop.details.forks.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.forks.onmaxveight then
                          begin
                            write(shop.details.forks.maxveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.forks.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.fset.input.Left(1)='/' then con(shop.details.forks.fset.input);
                          
                          if shop.details.forks.fset.input='0' then shop.details.forks.fset.status:=false;
                          
                          if shop.details.forks.fset.input.ToLower='d' then
                          begin
                            shop.details.forks.onmaxveight:=false;
                            shop.details.forks.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.forks.fset.input,shop.details.forks.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.forks.fset.output>0 then
                            begin
                              shop.details.forks.fset.status:=false;
                              shop.details.forks.onmaxveight:=true;
                              shop.details.forks.maxveight:=shop.details.forks.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.forks.output=-5 then
                      begin
                        shop.details.forks.fset.status:=true;
                        while shop.details.forks.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.fset.output, shop.details.forks.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[23].face[5]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.forks.onsuspension then
                          begin
                            if shop.details.forks.suspension then
                            begin
                              Console.ForegroundColor:=ConsoleColor.DarkGreen;
                              write(inter[23].face[6]);
                            end
                            else
                            begin
                              Console.ForegroundColor:=ConsoleColor.Red;
                              write(inter[23].face[7]);
                            end;
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[23].face[8]);
                          for var i:=0 to 1 do
                          begin
                            Console.SetCursorPosition(1,5+i);
                            write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=ConsoleColor.DarkGreen;
                              1: Console.ForegroundColor:=ConsoleColor.Red;
                            end;
                            write(inter[23].face[6+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,7);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,8);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.forks.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.fset.input.Left(1)='/' then con(shop.details.forks.fset.input);
                          
                          if shop.details.forks.fset.input='0' then shop.details.forks.fset.status:=false;
                          
                          if shop.details.forks.fset.input.ToLower='d' then
                          begin
                            shop.details.forks.onsuspension:=false;
                            shop.details.forks.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.forks.fset.input,shop.details.forks.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if (shop.details.forks.fset.output>0) and (shop.details.forks.fset.output<=2) then
                            begin
                              shop.details.forks.fset.status:=false;
                              shop.details.forks.onsuspension:=true;
                              shop.details.forks.suspension:=IntToBool(shop.details.forks.fset.output-1);
                              change(shop.details.forks.suspension);
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.forks.output=-6 then
                      begin
                        shop.details.forks.fset.status:=true;
                        while shop.details.forks.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.fset.output, shop.details.forks.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[23].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.forks.onsort then
                          begin
                            case shop.details.forks.sort of
                              0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                              1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                              2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                              3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                              4: Console.ForegroundColor:=Balance.IFace.susptype.OilPlus;
                              5: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                            end;
                            write(bikes[4].value[4+shop.details.forks.sort]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[23].face[9]);
                          for var i:=1 to 6 do
                          begin
                            Console.SetCursorPosition(1,4+i);write($'({i}) ');
                            case i-1 of
                              0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                              1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                              2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                              3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                              4: Console.ForegroundColor:=Balance.IFace.susptype.OilPlus;
                              5: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                            end;
                            write(bikes[4].value[3+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,11);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,12);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.forks.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.fset.input.Left(1)='/' then con(shop.details.forks.fset.input);
                          
                          if shop.details.forks.fset.input='0' then shop.details.forks.fset.status:=false;
                          
                          if shop.details.forks.fset.input.ToLower='d' then
                          begin
                            shop.details.forks.onsort:=false;
                            shop.details.forks.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.forks.fset.input,shop.details.forks.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if (shop.details.forks.fset.output>0) and (shop.details.forks.fset.output<=6) then
                            begin
                              shop.details.forks.fset.status:=false;
                              shop.details.forks.onsort:=true;
                              shop.details.forks.sort:=shop.details.forks.fset.output-1;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.forks.output=-7 then
                      begin
                        shop.details.forks.fset.status:=true;
                        while shop.details.forks.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.fset.output, shop.details.forks.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[23].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.forks.onmintravel then
                          begin
                            if (shop.details.forks.mintravel>=balance.IFace.susptravel._0.min) and (shop.details.forks.mintravel<=balance.IFace.susptravel._0.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                            if (shop.details.forks.mintravel>=balance.IFace.susptravel._1.min) and (shop.details.forks.mintravel<=balance.IFace.susptravel._1.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                            if (shop.details.forks.mintravel>=balance.IFace.susptravel._2.min) and (shop.details.forks.mintravel<=balance.IFace.susptravel._2.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                            if (shop.details.forks.mintravel>=balance.IFace.susptravel._3.min) and (shop.details.forks.mintravel<=balance.IFace.susptravel._3.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                            write(shop.details.forks.mintravel,' ',inter[0].face[11]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[23].face[10]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.forks.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.fset.input.Left(1)='/' then con(shop.details.forks.fset.input);
                          
                          if shop.details.forks.fset.input='0' then shop.details.forks.fset.status:=false;
                          
                          if shop.details.forks.fset.input.ToLower='d' then
                          begin
                            shop.details.forks.onmintravel:=false;
                            shop.details.forks.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.forks.fset.input,shop.details.forks.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.forks.fset.output>0 then
                            begin
                              shop.details.forks.fset.status:=false;
                              shop.details.forks.onmintravel:=true;
                              shop.details.forks.mintravel:=shop.details.forks.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.forks.output=-8 then
                      begin
                        shop.details.forks.fset.status:=true;
                        while shop.details.forks.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.fset.output, shop.details.forks.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[23].face[3]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.forks.onmaxtravel then
                          begin
                            if (shop.details.forks.maxtravel>=balance.IFace.susptravel._0.min) and (shop.details.forks.maxtravel<=balance.IFace.susptravel._0.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                            if (shop.details.forks.maxtravel>=balance.IFace.susptravel._1.min) and (shop.details.forks.maxtravel<=balance.IFace.susptravel._1.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                            if (shop.details.forks.maxtravel>=balance.IFace.susptravel._2.min) and (shop.details.forks.maxtravel<=balance.IFace.susptravel._2.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                            if (shop.details.forks.maxtravel>=balance.IFace.susptravel._3.min) and (shop.details.forks.maxtravel<=balance.IFace.susptravel._3.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                            write(shop.details.forks.maxtravel,' ',inter[0].face[11]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[23].face[10]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.forks.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.fset.input.Left(1)='/' then con(shop.details.forks.fset.input);
                          
                          if shop.details.forks.fset.input='0' then shop.details.forks.fset.status:=false;
                          
                          if shop.details.forks.fset.input.ToLower='d' then
                          begin
                            shop.details.forks.onmaxtravel:=false;
                            shop.details.forks.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.forks.fset.input,shop.details.forks.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.forks.fset.output>0 then
                            begin
                              shop.details.forks.fset.status:=false;
                              shop.details.forks.onmaxtravel:=true;
                              shop.details.forks.maxtravel:=shop.details.forks.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.forks.output=-9 then
                      begin
                        shop.details.forks.fset.status:=true;
                        while shop.details.forks.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.fset.output, shop.details.forks.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[23].face[4]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.forks.onblock then
                          begin
                            if shop.details.forks.block then
                            begin
                              Console.ForegroundColor:=ConsoleColor.DarkGreen;
                              write(bikes[4].value[12]);
                            end
                            else
                            begin
                              Console.ForegroundColor:=ConsoleColor.Red;
                              write(bikes[4].value[13]);
                            end;
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[23].face[11]);
                          for var i:=0 to 1 do
                          begin
                            Console.SetCursorPosition(1,5+i);write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=ConsoleColor.DarkGreen;
                              1: Console.ForegroundColor:=ConsoleColor.Red;
                            end;
                            write(inter[23].face[6+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,7);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,8);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.forks.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.fset.input.Left(1)='/' then con(shop.details.forks.fset.input);
                          
                          if shop.details.forks.fset.input='0' then shop.details.forks.fset.status:=false;
                          
                          if shop.details.forks.fset.input.ToLower='d' then
                          begin
                            shop.details.forks.onblock:=false;
                            shop.details.forks.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.forks.fset.input,shop.details.forks.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if (shop.details.forks.fset.output>0) and (shop.details.forks.fset.output<=2) then
                            begin
                              shop.details.forks.fset.status:=false;
                              shop.details.forks.onblock:=true;
                              shop.details.forks.block:=IntToBool(shop.details.forks.fset.output-1);
                              change(shop.details.forks.block);
                            end;
                          end;
                          
                        end;
                      end;
                      {$endregion}
                      
                      if (shop.details.forks.output>0) and (SForks<>nil) and (shop.details.forks.output<=SForks.Length) then
                      begin
                        shop.details.forks.buy.status:=true;
                        while shop.details.forks.buy.status do
                        begin
                          
                          var index:=shop.details.forks.output-1;
                          var price:=Round(SForks[index].price*map[player.position].kprice);
                        
                          Console.Clear;KTX.resize;
                          outnull(shop.details.forks.buy.output, shop.details.forks.buy.input);upface;
                          
                          Console.SetCursorPosition(1,2);write(bikes[0].value[1],' ',Rome(SForks[index].lvl),' ',SForks[index].name);
                          
                          Console.SetCursorPosition(1,4);write(inter[21].face[12],': ',dgt(price),' ',rub(price));
                          Console.SetCursorPosition(1,5);write(inter[21].face[11],': ',SForks[index].veight/1000,' ',inter[0].face[10]);
                          
                          Console.SetCursorPosition(1,7);write(bikes[4].value[0],': ');
                          if SForks[index].susp then
                          begin
                            Console.ForegroundColor:=ConsoleColor.DarkGreen;
                            write(bikes[4].value[1]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=ConsoleColor.Red;
                            write(bikes[4].value[2]);
                          end;
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          if SForks[index].susp then
                          begin
                            Console.SetCursorPosition(1,8);write(bikes[4].value[3],': ');
                            case SForks[index].sort of
                              0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                              1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                              2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                              3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                              4: Console.ForegroundColor:=Balance.IFace.susptype.OilPlus;
                              5: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                            end;
                            write(bikes[4].value[4+SForks[index].sort]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                            
                            Console.SetCursorPosition(1,9);write(bikes[4].value[10],': ');
                            if (SForks[index].travel>=balance.IFace.susptravel._0.min) and (SForks[index].travel<=balance.IFace.susptravel._0.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                            if (SForks[index].travel>=balance.IFace.susptravel._1.min) and (SForks[index].travel<=balance.IFace.susptravel._1.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                            if (SForks[index].travel>=balance.IFace.susptravel._2.min) and (SForks[index].travel<=balance.IFace.susptravel._2.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                            if (SForks[index].travel>=balance.IFace.susptravel._3.min) and (SForks[index].travel<=balance.IFace.susptravel._3.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                            write(SForks[index].travel,' ',inter[0].face[11]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                            
                            Console.SetCursorPosition(1,10);write(bikes[4].value[11],': ');
                            if SForks[index].block then
                            begin
                              Console.ForegroundColor:=ConsoleColor.DarkGreen;
                              write(bikes[4].value[12])
                            end
                            else
                            begin
                              Console.ForegroundColor:=ConsoleColor.Red;
                              write(bikes[4].value[13]);
                            end;
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          
                          
                          Console.SetCursorPosition(1,KTX.maxy-5);
                          if player.money>=price then
                          begin
                            write('(1) ',inter[21].face[13]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',inter[21].face[13]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',inter[21].face[14],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.forks.buy.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.forks.buy.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.forks.buy.input.Left(1)='/' then con(shop.details.forks.buy.input);
                          
                          if shop.details.forks.buy.input='0' then shop.details.forks.buy.output:=0;
                          if (shop.details.forks.buy.input='1') and (player.money>=price) then shop.details.forks.buy.output:=1;
                          
                          if shop.details.forks.buy.output=0 then shop.details.forks.buy.status:=false;
                          
                          if shop.details.forks.buy.output=1 then
                          begin
                            shop.details.forks.buy.check.status:=true;
                            while shop.details.forks.buy.check.status do
                            begin
                              Console.Clear;KTX.resize;
                              outnull(shop.details.forks.buy.check.output, shop.details.forks.buy.check.input);
                              
                              Console.SetCursorPosition(1,1);write(inter[23].face[12],'?');
                              Console.SetCursorPosition(1,2);write(inter[22].face[17],'?');
                              Console.SetCursorPosition(1,4);
                              if allveight(player.bike.fork.veight)<=player.maxveight then
                              begin
                                if player.energy>=balance.timing.it_forking.energy then
                                begin
                                  write('(1) ',inter[23].face[13]);
                                end
                                else
                                begin
                                  Console.ForegroundColor:=consolecolor.Gray;
                                  write('(1) ',inter[23].face[13]);
                                  Console.ForegroundColor:=consolecolor.Red;
                                  write(' (',items[0].value[7],')');
                                  Console.ForegroundColor:=consolecolor.Black;
                                end;
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(1) ',inter[22].face[18]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,5);
                              if allveight(SForks[index].veight)<=player.maxveight then
                              begin
                                write('(2) ',inter[22].face[19]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(2) ',inter[22].face[19]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,6);write('(0) ',inter[22].face[20]);
                              
                              KTX.read_1;
                              while (shop.details.forks.buy.check.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                              begin
                                Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                readln(shop.details.forks.buy.check.input);
                              end;
                              KTX.read_0;
                              
                              if shop.details.forks.buy.check.input.Left(1)='/' then con(shop.details.forks.buy.check.input);
                              
                              if shop.details.forks.buy.check.input='0' then shop.details.forks.buy.check.output:=0;
                              
                              if (shop.details.forks.buy.check.input='1') and ((allveight(player.bike.fork.veight)<=player.maxveight) and (player.energy>=balance.timing.it_forking.energy)) then shop.details.forks.buy.check.output:=1;
                              
                              if (shop.details.forks.buy.check.input='2') and (allveight(SForks[index].veight)<=player.maxveight) then shop.details.forks.buy.check.output:=2;
                              
                              if shop.details.forks.buy.check.output=0 then shop.details.forks.buy.check.status:=false;
                              
                              if shop.details.forks.buy.check.output=1 then
                              begin
                                looping(balance.timing.it_forking,items[18].value[7]);
                                var sw: TItem;
                                sw.tpsort:=2;
                                sw.name:=player.bike.fork.name;
                                sw.maxhitpoints:=player.bike.fork.maxhitpoints;
                                sw.hitpoints:=player.bike.fork.hitpoints;
                                sw.veight:=player.bike.fork.veight;
                                sw.price:=player.bike.fork.price;
                                sw.suspension:=player.bike.fork.suspension;
                                sw.suspensionflag:=player.bike.fork.suspensionflag;
                                sw.block:=player.bike.fork.block;
                                sw.travel:=player.bike.fork.travel;
                                AddItem(sw);
                                player.money-=price;
                                player.bike.fork.name:=SForks[index].name;
                                case SForks[index].sort of
                                  0: player.bike.fork.maxhitpoints:=balance.bk.fork.suspension.steel.hitpoints;
                                  1: player.bike.fork.maxhitpoints:=balance.bk.fork.suspension.steelplus.hitpoints;
                                  2: player.bike.fork.maxhitpoints:=balance.bk.fork.suspension.pneumatic.hitpoints;
                                  3: player.bike.fork.maxhitpoints:=balance.bk.fork.suspension.oil.hitpoints;
                                  4: player.bike.fork.maxhitpoints:=balance.bk.fork.suspension.oilplus.hitpoints;
                                  5: player.bike.fork.maxhitpoints:=balance.bk.fork.suspension.pneumaticplus.hitpoints;
                                end;
                                player.bike.fork.hitpoints:=player.bike.fork.maxhitpoints;
                                player.bike.fork.suspension:=SForks[index].sort;
                                player.bike.fork.suspensionflag:=SForks[index].susp;
                                player.bike.fork.travel:=SForks[index].travel;
                                player.bike.fork.block:=SForks[index].block;
                                player.bike.fork.blocks:=false;
                                player.bike.fork.price:=SForks[index].price;
                                player.bike.fork.veight:=SForks[index].veight;
                                if svg.autosave then save;
                                shop.details.forks.buy.check.status:=false;
                                shop.details.forks.buy.status:=false;
                              end;
                              
                              if shop.details.forks.buy.check.output=2 then
                              begin
                                var sw: TItem;
                                sw.tpsort:=2;
                                sw.name:=SForks[index].name;
                                case SForks[index].sort of
                                  0: sw.maxhitpoints:=balance.bk.fork.suspension.steel.hitpoints;
                                  1: sw.maxhitpoints:=balance.bk.fork.suspension.steelplus.hitpoints;
                                  2: sw.maxhitpoints:=balance.bk.fork.suspension.pneumatic.hitpoints;
                                  3: sw.maxhitpoints:=balance.bk.fork.suspension.oil.hitpoints;
                                  4: sw.maxhitpoints:=balance.bk.fork.suspension.oilplus.hitpoints;
                                  5: sw.maxhitpoints:=balance.bk.fork.suspension.pneumaticplus.hitpoints;
                                end;
                                sw.hitpoints:=sw.maxhitpoints;
                                sw.suspensionflag:=SForks[index].susp;
                                sw.block:=SForks[index].block;
                                sw.suspension:=SForks[index].sort;
                                sw.travel:=SForks[index].travel;
                                sw.price:=SForks[index].price;
                                sw.veight:=SForks[index].veight;
                                sw.suspensionflag:=SForks[index].susp;
                                AddItem(sw);
                                player.money-=price;
                                
                                if svg.autosave then save;
                                shop.details.forks.buy.check.status:=false;
                                shop.details.forks.buy.status:=false;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                    
                  end;
                end;
                {$endregion}
                
                {$region BACKS}
                if shop.details.output=3 then
                begin
                  shop.details.backs.status:=true;
                  while shop.details.backs.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.details.backs.output, shop.details.backs.input);upface;
                    
                    var SBacks: array of TBack;
                    SBacks:=nil;
                    
                    for var i:=0 to shop.backs.Length-1 do
                    begin
                      var check: boolean = true;
                      if shop.backs[i].lvl>player.level then check:=false;
                      if (not shop.olds) and (shop.backs[i].maxlvl<player.level) then check:=false;
                      case map[player.position].sort of
                        0: if shop.backs[i].lvl>balance.shopmaxlevels.type0 then check:=false;
                        1: if shop.backs[i].lvl>balance.shopmaxlevels.type1 then check:=false;
                        2: if shop.backs[i].lvl>balance.shopmaxlevels.type2 then check:=false;
                      end;
                      if shop.details.backs.onminprice then
                      begin
                        if Round(shop.backs[i].price*map[player.position].kprice)<shop.details.backs.minprice then check:=false;
                      end;
                      if shop.details.backs.onmaxprice then
                      begin
                        if Round(shop.backs[i].price*map[player.position].kprice)>shop.details.backs.maxprice then check:=false;
                      end;
                      if shop.details.backs.onminveight then
                      begin
                        if shop.backs[i].veight<shop.details.backs.minveight then check:=false;
                      end;
                      if shop.details.backs.onmaxveight then
                      begin
                        if shop.backs[i].veight>shop.details.backs.maxveight then check:=false;
                      end;
                      if shop.details.backs.onsort then
                      begin
                        if shop.backs[i].sort<>shop.details.backs.sort then check:=false;
                      end;
                      if shop.details.backs.onmintravel then
                      begin
                        if shop.backs[i].travel<shop.details.backs.mintravel then check:=false;
                      end;
                      if shop.details.backs.onmaxtravel then
                      begin
                        if shop.backs[i].travel>shop.details.backs.mintravel then check:=false;
                      end;
                      if shop.details.backs.onblock then
                      begin
                        if shop.backs[i].block<>shop.details.backs.block then check:=false;
                      end;
                      if check then
                      begin
                        if Sbacks = nil then SetLength(SBacks,1) else SetLength(SBacks,SBacks.Length+1);
                        SBacks[SBacks.Length-1]:=shop.Backs[i];
                      end;
                    end;
                    
                    var backsize: integer;
                    
                    if SBacks = nil then backsize:=1
                    else backsize:=Sbacks.Length;
                    
                    if backsize>=(KTX.maxy-17) then Console.SetBufferSize(KTX.maxx,backsize+17);
                    
                    Console.SetCursorPosition(1,2);write(inter[21].face[8],':',spcf(5),'(D) ',inter[21].face[10]);
                    
                    Console.SetCursorPosition(1,3);write('(-1) ',inter[22].face[0],': ');
                    if shop.details.backs.onminprice then
                    begin
                      write(dgt(shop.details.backs.minprice),' ',rub(shop.details.backs.minprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,4);write('(-2) ',inter[22].face[1],': ');
                    if shop.details.backs.onmaxprice then
                    begin
                      write(dgt(shop.details.backs.maxprice),' ',rub(shop.details.backs.maxprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,5);write('(-3) ',inter[22].face[2],': ');
                    if shop.details.backs.onminveight then
                    begin
                      write(shop.details.backs.minveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,6);write('(-4) ',inter[22].face[3],': ');
                    if shop.details.backs.onmaxveight then
                    begin
                      write(shop.details.backs.maxveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,7);write('(-5) ',inter[23].face[1],': ');
                    if shop.details.backs.onsort then
                    begin
                      case shop.details.backs.sort of
                        0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                        1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                        2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                        3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                        4: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                      end;
                      write(bikes[5].value[4+shop.details.backs.sort]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,8);write('(-6) ',inter[23].face[2],': ');
                    if shop.details.backs.onmintravel then
                    begin
                      if (shop.details.backs.mintravel>=balance.IFace.susptravel._0.min) and (shop.details.backs.mintravel<=balance.IFace.susptravel._0.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                      if (shop.details.backs.mintravel>=balance.IFace.susptravel._1.min) and (shop.details.backs.mintravel<=balance.IFace.susptravel._1.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                      if (shop.details.backs.mintravel>=balance.IFace.susptravel._2.min) and (shop.details.backs.mintravel<=balance.IFace.susptravel._2.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                      if (shop.details.backs.mintravel>=balance.IFace.susptravel._3.min) and (shop.details.backs.mintravel<=balance.IFace.susptravel._3.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                      write(shop.details.backs.mintravel,' ',inter[0].face[11]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,9);write('(-7) ',inter[23].face[3],': ');
                    if shop.details.backs.onmaxtravel then
                    begin
                      if (shop.details.backs.maxtravel>=balance.IFace.susptravel._0.min) and (shop.details.backs.maxtravel<=balance.IFace.susptravel._0.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                      if (shop.details.backs.maxtravel>=balance.IFace.susptravel._1.min) and (shop.details.backs.maxtravel<=balance.IFace.susptravel._1.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                      if (shop.details.backs.maxtravel>=balance.IFace.susptravel._2.min) and (shop.details.backs.maxtravel<=balance.IFace.susptravel._2.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                      if (shop.details.backs.maxtravel>=balance.IFace.susptravel._3.min) and (shop.details.backs.maxtravel<=balance.IFace.susptravel._3.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                      write(shop.details.backs.maxtravel,' ',inter[0].face[11]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=ConsoleColor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,10);write('(-8) ',inter[23].face[4],': ');
                    if shop.details.backs.onblock then
                    begin
                      if shop.details.backs.block then
                      begin
                        Console.ForegroundColor:=ConsoleColor.DarkGreen;
                        write(bikes[4].value[12]);
                      end
                      else
                      begin
                        Console.ForegroundColor:=ConsoleColor.Red;
                        write(bikes[4].value[13]);
                      end;
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=ConsoleColor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,12);write(inter[22].face[6],': ');
                    if Sbacks = nil then
                    begin
                      Console.SetCursorPosition(1,13);write(inter[22].face[7]);
                    end
                    else
                    begin
                      for var i:=0 to Sbacks.Length-1 do
                      begin
                        var price:=Round(Sbacks[i].price*map[player.position].kprice);
                        Console.SetCursorPosition(1,13+i);write('(',i+1,') ',Rome(Sbacks[i].lvl),' ',Sbacks[i].name,' (',dgt(price),' ',rub(price),')');
                      end;
                    end;
                    
                    Console.SetCursorPosition(1,backsize+13);write('(0) ',inter[0].face[5]);
                    
                    KTX.read_1;
                    while (shop.details.backs.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      if backsize>=(KTX.maxy-17) then
                      begin
                        Console.SetCursorPosition(1,backsize+16);
                        Console.SetCursorPosition(1,backsize+15);
                      end
                      else Console.SetCursorPosition(1,KTX.maxy-2);
                      write(': ');
                      readln(shop.details.backs.input);
                    end;
                    KTX.read_0;
                    
                    if shop.details.backs.input.Left(1)='/' then con(shop.details.backs.input);
                    
                    if shop.details.backs.input='0' then shop.details.backs.output:=0;
                    
                    if shop.details.backs.input.ToLower='d' then
                    begin
                      shop.details.backs.onmaterial:=false;
                      shop.details.backs.onmaxprice:=false;
                      shop.details.backs.onmaxveight:=false;
                      shop.details.backs.onminprice:=false;
                      shop.details.backs.onminveight:=false;
                      shop.details.backs.onsort:=false;
                      shop.details.backs.onmintravel:=false;
                      shop.details.backs.onmaxtravel:=false;
                      shop.details.backs.onblock:=false;
                    end;
                    
                    var _e: integer;
                    val(shop.details.backs.input,shop.details.backs.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.details.backs.output=0 then shop.details.backs.status:=false;
                      
                      {$region Filters}
                      if shop.details.backs.output=-1 then
                      begin
                        shop.details.backs.fset.status:=true;
                        while shop.details.backs.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.backs.fset.output, shop.details.backs.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.backs.onminprice then
                          begin
                            write(dgt(shop.details.backs.minprice),' ',rub(shop.details.backs.minprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.backs.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.backs.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.backs.fset.input.Left(1)='/' then con(shop.details.backs.fset.input);
                          
                          if shop.details.backs.fset.input='0' then shop.details.backs.fset.status:=false;
                          
                          if shop.details.backs.fset.input.ToLower='d' then
                          begin
                            shop.details.backs.onminprice:=false;
                            shop.details.backs.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.backs.fset.input,shop.details.backs.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.backs.fset.output>0 then
                            begin
                              shop.details.backs.fset.status:=false;
                              shop.details.backs.onminprice:=true;
                              shop.details.backs.minprice:=shop.details.backs.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.backs.output=-2 then
                      begin
                        shop.details.backs.fset.status:=true;
                        while shop.details.backs.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.backs.fset.output, shop.details.backs.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.backs.onmaxprice then
                          begin
                            write(dgt(shop.details.backs.maxprice),' ',rub(shop.details.backs.maxprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.backs.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.backs.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.backs.fset.input.Left(1)='/' then con(shop.details.backs.fset.input);
                          
                          if shop.details.backs.fset.input='0' then shop.details.backs.fset.status:=false;
                          
                          if shop.details.backs.fset.input.ToLower='d' then
                          begin
                            shop.details.backs.onmaxprice:=false;
                            shop.details.backs.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.backs.fset.input,shop.details.backs.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.backs.fset.output>0 then
                            begin
                              shop.details.backs.fset.status:=false;
                              shop.details.backs.onmaxprice:=true;
                              shop.details.backs.maxprice:=shop.details.backs.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.backs.output=-3 then
                      begin
                        shop.details.backs.fset.status:=true;
                        while shop.details.backs.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.backs.fset.output, shop.details.backs.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.backs.onminveight then
                          begin
                            write(shop.details.backs.minveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.backs.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.backs.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.backs.fset.input.Left(1)='/' then con(shop.details.backs.fset.input);
                          
                          if shop.details.backs.fset.input='0' then shop.details.backs.fset.status:=false;
                          
                          if shop.details.backs.fset.input.ToLower='d' then
                          begin
                            shop.details.backs.onminveight:=false;
                            shop.details.backs.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.backs.fset.input,shop.details.backs.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.backs.fset.output>0 then
                            begin
                              shop.details.backs.fset.status:=false;
                              shop.details.backs.onminveight:=true;
                              shop.details.backs.minveight:=shop.details.backs.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.backs.output=-4 then
                      begin
                        shop.details.backs.fset.status:=true;
                        while shop.details.backs.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.backs.fset.output, shop.details.backs.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.backs.onmaxveight then
                          begin
                            write(shop.details.backs.maxveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.backs.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.backs.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.backs.fset.input.Left(1)='/' then con(shop.details.backs.fset.input);
                          
                          if shop.details.backs.fset.input='0' then shop.details.backs.fset.status:=false;
                          
                          if shop.details.backs.fset.input.ToLower='d' then
                          begin
                            shop.details.backs.onmaxveight:=false;
                            shop.details.backs.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.backs.fset.input,shop.details.backs.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.backs.fset.output>0 then
                            begin
                              shop.details.backs.fset.status:=false;
                              shop.details.backs.onmaxveight:=true;
                              shop.details.backs.maxveight:=shop.details.backs.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.backs.output=-5 then
                      begin
                        shop.details.backs.fset.status:=true;
                        while shop.details.backs.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.backs.fset.output, shop.details.backs.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[23].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.backs.onsort then
                          begin
                            case shop.details.backs.sort of
                              0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                              1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                              2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                              3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                              4: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                            end;
                            write(bikes[5].value[4+shop.details.backs.sort]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[23].face[9]);
                          for var i:=0 to 4 do
                          begin
                            Console.SetCursorPosition(1,5+i);
                            write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                              1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                              2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                              3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                              4: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                            end;
                            write(bikes[5].value[4+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,10);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,11);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.backs.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.backs.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.backs.fset.input.Left(1)='/' then con(shop.details.backs.fset.input);
                          
                          if shop.details.backs.fset.input='0' then shop.details.backs.fset.status:=false;
                          
                          if shop.details.backs.fset.input.ToLower='d' then
                          begin
                            shop.details.backs.onsort:=false;
                            shop.details.backs.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.backs.fset.input,shop.details.backs.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if (shop.details.backs.fset.output>0) and (shop.details.backs.fset.output<=6) then
                            begin
                              shop.details.backs.fset.status:=false;
                              shop.details.backs.onsort:=true;
                              shop.details.backs.sort:=shop.details.backs.fset.output-1;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.backs.output=-6 then
                      begin
                        shop.details.backs.fset.status:=true;
                        while shop.details.backs.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.backs.fset.output, shop.details.backs.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[23].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.backs.onmintravel then
                          begin
                            if (shop.details.backs.mintravel>=balance.IFace.susptravel._0.min) and (shop.details.backs.mintravel<=balance.IFace.susptravel._0.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                            if (shop.details.backs.mintravel>=balance.IFace.susptravel._1.min) and (shop.details.backs.mintravel<=balance.IFace.susptravel._1.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                            if (shop.details.backs.mintravel>=balance.IFace.susptravel._2.min) and (shop.details.backs.mintravel<=balance.IFace.susptravel._2.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                            if (shop.details.backs.mintravel>=balance.IFace.susptravel._3.min) and (shop.details.backs.mintravel<=balance.IFace.susptravel._3.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                            write(shop.details.backs.mintravel,' ',inter[0].face[11]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[23].face[10]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.backs.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.backs.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.backs.fset.input.Left(1)='/' then con(shop.details.backs.fset.input);
                          
                          if shop.details.backs.fset.input='0' then shop.details.backs.fset.status:=false;
                          
                          if shop.details.backs.fset.input.ToLower='d' then
                          begin
                            shop.details.backs.onmintravel:=false;
                            shop.details.backs.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.backs.fset.input,shop.details.backs.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.backs.fset.output>0 then
                            begin
                              shop.details.backs.fset.status:=false;
                              shop.details.backs.onmintravel:=true;
                              shop.details.backs.mintravel:=shop.details.backs.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.backs.output=-7 then
                      begin
                        shop.details.backs.fset.status:=true;
                        while shop.details.backs.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.backs.fset.output, shop.details.backs.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[23].face[3]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.backs.onmaxtravel then
                          begin
                            if (shop.details.backs.maxtravel>=balance.IFace.susptravel._0.min) and (shop.details.backs.maxtravel<=balance.IFace.susptravel._0.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                            if (shop.details.backs.maxtravel>=balance.IFace.susptravel._1.min) and (shop.details.backs.maxtravel<=balance.IFace.susptravel._1.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                            if (shop.details.backs.maxtravel>=balance.IFace.susptravel._2.min) and (shop.details.backs.maxtravel<=balance.IFace.susptravel._2.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                            if (shop.details.backs.maxtravel>=balance.IFace.susptravel._3.min) and (shop.details.backs.maxtravel<=balance.IFace.susptravel._3.max)
                              then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                            write(dgt(shop.details.backs.maxtravel),' ',inter[0].face[11]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[23].face[10]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.backs.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.backs.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.backs.fset.input.Left(1)='/' then con(shop.details.backs.fset.input);
                          
                          if shop.details.backs.fset.input='0' then shop.details.backs.fset.status:=false;
                          
                          if shop.details.backs.fset.input.ToLower='d' then
                          begin
                            shop.details.backs.onmaxtravel:=false;
                            shop.details.backs.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.backs.fset.input,shop.details.backs.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.backs.fset.output>0 then
                            begin
                              shop.details.backs.fset.status:=false;
                              shop.details.backs.onmaxtravel:=true;
                              shop.details.backs.maxtravel:=shop.details.backs.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.backs.output=-8 then
                      begin
                        shop.details.backs.fset.status:=true;
                        while shop.details.backs.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.backs.fset.output, shop.details.backs.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[23].face[4]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.backs.onblock then
                          begin
                            if shop.details.backs.block then
                            begin
                              Console.ForegroundColor:=ConsoleColor.DarkGreen;
                              write(bikes[4].value[12]);
                            end
                            else
                            begin
                              Console.ForegroundColor:=ConsoleColor.Red;
                              write(bikes[4].value[13]);
                            end;
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[23].face[11]);
                          for var i:=0 to 1 do
                          begin
                            Console.SetCursorPosition(1,5+i);
                            write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=ConsoleColor.DarkGreen;
                              1: Console.ForegroundColor:=ConsoleColor.Red;
                            end;
                            write(inter[23].face[6+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,7);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,8);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.backs.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.backs.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.backs.fset.input.Left(1)='/' then con(shop.details.backs.fset.input);
                          
                          if shop.details.backs.fset.input='0' then shop.details.backs.fset.status:=false;
                          
                          if shop.details.backs.fset.input.ToLower='d' then
                          begin
                            shop.details.backs.onblock:=false;
                            shop.details.backs.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.backs.fset.input,shop.details.backs.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if (shop.details.backs.fset.output>0) and (shop.details.backs.fset.output<=2) then
                            begin
                              shop.details.backs.fset.status:=false;
                              shop.details.backs.onblock:=true;
                              shop.details.backs.block:=IntToBool(shop.details.backs.fset.output-1);
                              change(shop.details.backs.block);
                            end;
                          end;
                          
                        end;
                      end;
                      {$endregion}
                      
                      if (shop.details.backs.output>0) and(SBacks<>nil) and  (shop.details.backs.output<=Sbacks.Length) then
                      begin
                        shop.details.backs.buy.status:=true;
                        while shop.details.backs.buy.status do
                        begin
                          
                          var index:=shop.details.backs.output-1;
                          var price:=Round(Sbacks[index].price*map[player.position].kprice);
                        
                          Console.Clear;KTX.resize;
                          outnull(shop.details.backs.buy.output, shop.details.backs.buy.input);upface;
                          
                          Console.SetCursorPosition(1,2);write(bikes[0].value[2],' ',Rome(Sbacks[index].lvl),' ',Sbacks[index].name);
                          
                          Console.SetCursorPosition(1,4);write(inter[21].face[12],': ',dgt(price),' ',rub(price));
                          Console.SetCursorPosition(1,5);write(inter[21].face[11],': ',Sbacks[index].veight/1000,' ',inter[0].face[10]);
                          
                          Console.SetCursorPosition(1,7);write(bikes[4].value[3],': ');
                          case SBacks[index].sort of
                            0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                            1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                            2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                            3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                            4: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                          end;
                          write(bikes[5].value[4+Sbacks[index].sort]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          Console.SetCursorPosition(1,8);write(bikes[4].value[10],': ');
                          if (SBacks[index].travel>=balance.IFace.susptravel._0.min) and (SBacks[index].travel<=balance.IFace.susptravel._0.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                          if (SBacks[index].travel>=balance.IFace.susptravel._1.min) and (SBacks[index].travel<=balance.IFace.susptravel._1.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                          if (SBacks[index].travel>=balance.IFace.susptravel._2.min) and (SBacks[index].travel<=balance.IFace.susptravel._2.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                          if (SBacks[index].travel>=balance.IFace.susptravel._3.min) and (SBacks[index].travel<=balance.IFace.susptravel._3.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                          write(Sbacks[index].travel,' ',inter[0].face[11]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          Console.SetCursorPosition(1,9);write(bikes[4].value[11],': ');
                          if Sbacks[index].block then
                          begin
                            Console.ForegroundColor:=ConsoleColor.DarkGreen;
                            write(bikes[4].value[12]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=ConsoleColor.Red;
                            write(bikes[4].value[13]);
                          end;
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          
                          Console.SetCursorPosition(1,KTX.maxy-5);
                          if player.money>=price then
                          begin
                            write('(1) ',inter[21].face[13]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',inter[21].face[13]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',inter[21].face[14],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.backs.buy.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.backs.buy.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.backs.buy.input.Left(1)='/' then con(shop.details.backs.buy.input);
                          
                          if shop.details.backs.buy.input='0' then shop.details.backs.buy.output:=0;
                          if (shop.details.backs.buy.input='1') and (player.money>=price) then shop.details.backs.buy.output:=1;
                          
                          if shop.details.backs.buy.output=0 then shop.details.backs.buy.status:=false;
                          
                          if shop.details.backs.buy.output=1 then
                          begin
                            shop.details.backs.buy.check.status:=true;
                            while shop.details.backs.buy.check.status do
                            begin
                              Console.Clear;KTX.resize;
                              outnull(shop.details.backs.buy.check.output, shop.details.backs.buy.check.input);
                              
                              Console.SetCursorPosition(1,1);
                              if player.bike.frame.suspensionflag then
                              begin
                                if player.bike.bsusp.flag then
                                begin
                                  write(inter[23].face[14],'?');
                                end
                                else
                                begin
                                  write(inter[23].face[16],'?');
                                end;
                              end
                              else
                              begin
                                write(inter[23].face[16],'?');
                              end;
                              Console.SetCursorPosition(1,2);write(inter[23].face[19],'?');
                              Console.SetCursorPosition(1,4);
                              
                              if player.bike.frame.suspensionflag then
                              begin
                                if player.bike.bsusp.flag then
                                begin
                                  if player.energy>=(balance.timing.it_bsusping.energy+balance.timing.bsusp_demontage.energy) then
                                  begin
                                    write('(1) ',inter[23].face[15]);
                                  end
                                  else
                                  begin
                                    Console.ForegroundColor:=consolecolor.Gray;
                                    write('(1) ',inter[23].face[15]);
                                    Console.ForegroundColor:=consolecolor.Red;
                                    write($' ({items[0].value[7]})');
                                    Console.ForegroundColor:=consolecolor.Black;
                                  end;
                                end
                                else
                                begin
                                  if player.energy>=balance.timing.it_bsusping.energy then
                                  begin
                                    write('(1) ',inter[23].face[17]);
                                  end
                                  else
                                  begin
                                    Console.ForegroundColor:=consolecolor.Gray;
                                    write('(1) ',inter[23].face[17]);
                                    Console.ForegroundColor:=consolecolor.Red;
                                    write($' ({items[0].value[7]})');
                                    Console.ForegroundColor:=consolecolor.Black;
                                  end;
                                end;
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(1) ',inter[23].face[17]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write($' ({inter[23].face[18]})');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,5);
                              if allveight(Sbacks[index].veight)<=player.maxveight then
                              begin
                                write('(2) ',inter[22].face[19]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(2) ',inter[22].face[19]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,6);write('(0) ',inter[22].face[20]);
                              
                              KTX.read_1;
                              while (shop.details.backs.buy.check.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                              begin
                                Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                readln(shop.details.backs.buy.check.input);
                              end;
                              KTX.read_0;
                              
                              if shop.details.backs.buy.check.input.Left(1)='/' then con(shop.details.backs.buy.check.input);
                              
                              if shop.details.backs.buy.check.input='0' then shop.details.backs.buy.check.output:=0;
                              
                              if shop.details.backs.buy.check.input='1' then
                              begin
                                if player.bike.frame.suspensionflag then
                                begin
                                  if player.bike.bsusp.flag then
                                  begin
                                    if allveight(player.bike.bsusp.veight)<=player.maxveight then
                                    if player.energy>=(balance.timing.it_bsusping.energy+balance.timing.bsusp_demontage.energy) then
                                    shop.details.backs.buy.check.output:=1;
                                  end
                                  else
                                  begin
                                    if player.energy>=(balance.timing.it_bsusping.energy) then
                                    shop.details.backs.buy.check.output:=1;
                                  end;
                                end;
                              end;
                              
                              if (shop.details.backs.buy.check.input='2') and (allveight(Sbacks[index].veight)<=player.maxveight) then shop.details.backs.buy.check.output:=2;
                              
                              if shop.details.backs.buy.check.output=0 then shop.details.backs.buy.check.status:=false;
                              
                              if shop.details.backs.buy.check.output=1 then
                              begin
                                if (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) then looping(balance.timing.bsusp_demontage,bikes[5].value[10]);
                                
                                looping(balance.timing.it_bsusping,items[18].value[8]);
                                
                                if (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) then
                                begin
                                  var sw: TItem;
                                  sw.tpsort:=3;
                                  sw.name:=player.bike.bsusp.name;
                                  sw.maxhitpoints:=player.bike.bsusp.maxhitpoints;
                                  sw.hitpoints:=player.bike.bsusp.hitpoints;
                                  sw.veight:=player.bike.bsusp.veight;
                                  sw.price:=player.bike.bsusp.price;
                                  sw.block:=player.bike.bsusp.block;
                                  sw.travel:=player.bike.bsusp.travel;
                                  sw.sort:=player.bike.bsusp.suspension;
                                  AddItem(sw);
                                end;
                                
                                player.money-=price;
                                player.bike.bsusp.name:=Sbacks[index].name;
                                case Sbacks[index].sort of
                                  0: player.bike.bsusp.maxhitpoints:=balance.bk.bsusp.suspension.steel.hitpoints;
                                  1: player.bike.bsusp.maxhitpoints:=balance.bk.bsusp.suspension.steelplus.hitpoints;
                                  2: player.bike.bsusp.maxhitpoints:=balance.bk.bsusp.suspension.pneumatic.hitpoints;
                                  3: player.bike.bsusp.maxhitpoints:=balance.bk.bsusp.suspension.oil.hitpoints;
                                  4: player.bike.bsusp.maxhitpoints:=balance.bk.bsusp.suspension.pneumaticplus.hitpoints;
                                end;
                                player.bike.bsusp.hitpoints:=player.bike.bsusp.maxhitpoints;
                                player.bike.bsusp.suspension:=Sbacks[index].sort;
                                player.bike.bsusp.flag:=true;
                                player.bike.bsusp.travel:=Sbacks[index].travel;
                                player.bike.bsusp.block:=Sbacks[index].block;
                                player.bike.bsusp.blocks:=false;
                                player.bike.bsusp.price:=Sbacks[index].price;
                                player.bike.bsusp.veight:=Sbacks[index].veight;
                                if svg.autosave then save;
                                shop.details.backs.buy.check.status:=false;
                                shop.details.backs.buy.status:=false;
                              end;
                              
                              if shop.details.backs.buy.check.output=2 then
                              begin
                                var sw: TItem;
                                sw.tpsort:=3;
                                sw.name:=Sbacks[index].name;
                                case Sbacks[index].sort of
                                  0: sw.maxhitpoints:=balance.bk.bsusp.suspension.steel.hitpoints;
                                  1: sw.maxhitpoints:=balance.bk.bsusp.suspension.steelplus.hitpoints;
                                  2: sw.maxhitpoints:=balance.bk.bsusp.suspension.pneumatic.hitpoints;
                                  3: sw.maxhitpoints:=balance.bk.bsusp.suspension.oil.hitpoints;
                                  4: sw.maxhitpoints:=balance.bk.bsusp.suspension.pneumaticplus.hitpoints;
                                end;
                                sw.hitpoints:=sw.maxhitpoints;
                                sw.block:=Sbacks[index].block;
                                sw.suspension:=Sbacks[index].sort;
                                sw.travel:=Sbacks[index].travel;
                                sw.price:=Sbacks[index].price;
                                sw.veight:=Sbacks[index].veight;
                                AddItem(sw);
                                player.money-=price;
                                
                                if svg.autosave then save;
                                shop.details.backs.buy.check.status:=false;
                                shop.details.backs.buy.status:=false;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                    
                  end;
                end;
                {$endregion}
                
                {$region TRANSMISSIONS}
                if shop.details.output=4 then
                begin
                  shop.details.transmissions.status:=true;
                  while shop.details.transmissions.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.details.transmissions.output, shop.details.transmissions.input);upface;
                    
                    var STrans: array of TTrans;
                    STrans:=nil;
                    
                    for var i:=0 to shop.trans.Length-1 do
                    begin
                      var check: boolean = true;
                      if shop.trans[i].lvl>player.level then check:=false;
                      if (not shop.olds) and (shop.trans[i].maxlvl<player.level) then check:=false;
                      case map[player.position].sort of
                        0: if shop.trans[i].lvl>balance.shopmaxlevels.type0 then check:=false;
                        1: if shop.trans[i].lvl>balance.shopmaxlevels.type1 then check:=false;
                        2: if shop.trans[i].lvl>balance.shopmaxlevels.type2 then check:=false;
                      end;
                      if shop.details.transmissions.onminprice then
                      begin
                        if Round(shop.trans[i].price*map[player.position].kprice)<shop.details.transmissions.minprice then check:=false;
                      end;
                      if shop.details.transmissions.onmaxprice then
                      begin
                        if Round(shop.trans[i].price*map[player.position].kprice)>shop.details.transmissions.maxprice then check:=false;
                      end;
                      if shop.details.transmissions.onminveight then
                      begin
                        if shop.trans[i].veight<shop.details.transmissions.minveight then check:=false;
                      end;
                      if shop.details.transmissions.onmaxveight then
                      begin
                        if shop.trans[i].veight>shop.details.transmissions.maxveight then check:=false;
                      end;
                      if shop.details.transmissions.oncount then
                      begin
                        if shop.trans[i].count<>shop.details.transmissions.count then check:=false;
                      end;
                      if shop.details.transmissions.onfore then
                      begin
                        if shop.trans[i].fores<>shop.details.transmissions.fore then check:=false;
                      end;
                      if check then
                      begin
                        if STrans = nil then SetLength(STrans,1) else SetLength(STrans,STrans.Length+1);
                        STrans[STrans.Length-1]:=shop.trans[i];
                      end;
                    end;
                    
                    var forksize: integer;
                    
                    if STrans = nil then forksize:=1
                    else forksize:=STrans.Length;
                    
                    if forksize>=(KTX.maxy-15) then Console.SetBufferSize(KTX.maxx,forksize+15);
                    
                    Console.SetCursorPosition(1,2);write(inter[21].face[8],':',spcf(5),'(D) ',inter[21].face[10]);
                    
                    Console.SetCursorPosition(1,3);write('(-1) ',inter[22].face[0],': ');
                    if shop.details.transmissions.onminprice then
                    begin
                      write(dgt(shop.details.transmissions.minprice),' ',rub(shop.details.transmissions.minprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,4);write('(-2) ',inter[22].face[1],': ');
                    if shop.details.transmissions.onmaxprice then
                    begin
                      write(dgt(shop.details.transmissions.maxprice),' ',rub(shop.details.transmissions.maxprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,5);write('(-3) ',inter[22].face[2],': ');
                    if shop.details.transmissions.onminveight then
                    begin
                      write(shop.details.transmissions.minveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,6);write('(-4) ',inter[22].face[3],': ');
                    if shop.details.transmissions.onmaxveight then
                    begin
                      write(shop.details.transmissions.maxveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,7);write('(-5) ',inter[24].face[0],': ');
                    if shop.details.transmissions.oncount then
                    begin
                      case shop.details.transmissions.count of
                        1: Console.ForegroundColor:=Balance.IFace.backcount._1;
                        6: Console.ForegroundColor:=Balance.IFace.backcount._6;
                        7: Console.ForegroundColor:=Balance.IFace.backcount._7;
                        8: Console.ForegroundColor:=Balance.IFace.backcount._8;
                        9: Console.ForegroundColor:=Balance.IFace.backcount._9;
                        10: Console.ForegroundColor:=Balance.IFace.backcount._10;
                        11: Console.ForegroundColor:=Balance.IFace.backcount._11;
                      end;
                      write(shop.details.transmissions.count,' ');
                      case shop.details.transmissions.count of
                        1: write(inter[24].face[2]);
                        6..11: write(inter[24].face[4]);
                      end;
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,8);write('(-6) ',inter[24].face[1],': ');
                    if shop.details.transmissions.onfore then
                    begin
                      if shop.details.transmissions.fore then
                      begin
                        Console.ForegroundColor:=Balance.IFace.forecount._3;
                        write('3 ',inter[24].face[3]);
                      end
                      else
                      begin
                        Console.ForegroundColor:=Balance.IFace.forecount._1;
                        write('1 ',inter[24].face[2]);
                      end;
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,10);write(inter[22].face[6],': ');
                    if STrans = nil then
                    begin
                      Console.SetCursorPosition(1,11);write(inter[22].face[7]);
                    end
                    else
                    begin
                      for var i:=0 to STrans.Length-1 do
                      begin
                        var price:=Round(STrans[i].price*map[player.position].kprice);
                        Console.SetCursorPosition(1,11+i);write('(',i+1,') ',Rome(STrans[i].lvl),' ',STrans[i].name,' (',dgt(price),' ',rub(price),')');
                      end;
                    end;
                    
                    Console.SetCursorPosition(1,forksize+11);write('(0) ',inter[0].face[5]);
                    
                    KTX.read_1;
                    while (shop.details.transmissions.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      if forksize>=(KTX.maxy-15) then
                      begin
                        Console.SetCursorPosition(1,forksize+14);
                        Console.SetCursorPosition(1,forksize+13);
                      end
                      else Console.SetCursorPosition(1,KTX.maxy-2);
                      write(': ');
                      readln(shop.details.transmissions.input);
                    end;
                    KTX.read_0;
                    
                    if shop.details.transmissions.input.Left(1)='/' then con(shop.details.transmissions.input);
                    
                    if shop.details.transmissions.input='0' then shop.details.transmissions.output:=0;
                    
                    if shop.details.transmissions.input.ToLower='d' then
                    begin
                      shop.details.transmissions.onmaxprice:=false;
                      shop.details.transmissions.onmaxveight:=false;
                      shop.details.transmissions.onminprice:=false;
                      shop.details.transmissions.onminveight:=false;
                      shop.details.transmissions.oncount:=false;
                      shop.details.transmissions.onfore:=false;
                    end;
                    
                    var _e: integer;
                    val(shop.details.transmissions.input,shop.details.transmissions.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.details.transmissions.output=0 then shop.details.transmissions.status:=false;
                      
                      {$region Filters}
                      if shop.details.transmissions.output=-1 then
                      begin
                        shop.details.transmissions.fset.status:=true;
                        while shop.details.transmissions.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.transmissions.fset.output, shop.details.transmissions.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.transmissions.onminprice then
                          begin
                            write(dgt(shop.details.transmissions.minprice),' ',rub(shop.details.transmissions.minprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.transmissions.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.transmissions.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.transmissions.fset.input.Left(1)='/' then con(shop.details.transmissions.fset.input);
                          
                          if shop.details.transmissions.fset.input='0' then shop.details.transmissions.fset.status:=false;
                          
                          if shop.details.transmissions.fset.input.ToLower='d' then
                          begin
                            shop.details.transmissions.onminprice:=false;
                            shop.details.transmissions.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.transmissions.fset.input,shop.details.transmissions.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.transmissions.fset.output>0 then
                            begin
                              shop.details.transmissions.fset.status:=false;
                              shop.details.transmissions.onminprice:=true;
                              shop.details.transmissions.minprice:=shop.details.transmissions.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.transmissions.output=-2 then
                      begin
                        shop.details.transmissions.fset.status:=true;
                        while shop.details.transmissions.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.transmissions.fset.output, shop.details.transmissions.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.transmissions.onmaxprice then
                          begin
                            write(dgt(shop.details.transmissions.maxprice),' ',rub(shop.details.transmissions.maxprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.transmissions.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.transmissions.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.transmissions.fset.input.Left(1)='/' then con(shop.details.transmissions.fset.input);
                          
                          if shop.details.transmissions.fset.input='0' then shop.details.transmissions.fset.status:=false;
                          
                          if shop.details.transmissions.fset.input.ToLower='d' then
                          begin
                            shop.details.transmissions.onmaxprice:=false;
                            shop.details.transmissions.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.transmissions.fset.input,shop.details.transmissions.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.transmissions.fset.output>0 then
                            begin
                              shop.details.transmissions.fset.status:=false;
                              shop.details.transmissions.onmaxprice:=true;
                              shop.details.transmissions.maxprice:=shop.details.transmissions.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.transmissions.output=-3 then
                      begin
                        shop.details.transmissions.fset.status:=true;
                        while shop.details.transmissions.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.transmissions.fset.output, shop.details.transmissions.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.transmissions.onminveight then
                          begin
                            write(shop.details.transmissions.minveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.transmissions.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.transmissions.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.transmissions.fset.input.Left(1)='/' then con(shop.details.transmissions.fset.input);
                          
                          if shop.details.transmissions.fset.input='0' then shop.details.transmissions.fset.status:=false;
                          
                          if shop.details.transmissions.fset.input.ToLower='d' then
                          begin
                            shop.details.transmissions.onminveight:=false;
                            shop.details.transmissions.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.transmissions.fset.input,shop.details.transmissions.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.transmissions.fset.output>0 then
                            begin
                              shop.details.transmissions.fset.status:=false;
                              shop.details.transmissions.onminveight:=true;
                              shop.details.transmissions.minveight:=shop.details.transmissions.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.transmissions.output=-4 then
                      begin
                        shop.details.transmissions.fset.status:=true;
                        while shop.details.transmissions.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.transmissions.fset.output, shop.details.transmissions.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.transmissions.onmaxveight then
                          begin
                            write(shop.details.transmissions.maxveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.transmissions.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.transmissions.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.transmissions.fset.input.Left(1)='/' then con(shop.details.transmissions.fset.input);
                          
                          if shop.details.transmissions.fset.input='0' then shop.details.transmissions.fset.status:=false;
                          
                          if shop.details.transmissions.fset.input.ToLower='d' then
                          begin
                            shop.details.transmissions.onmaxveight:=false;
                            shop.details.transmissions.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.transmissions.fset.input,shop.details.transmissions.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.transmissions.fset.output>0 then
                            begin
                              shop.details.transmissions.fset.status:=false;
                              shop.details.transmissions.onmaxveight:=true;
                              shop.details.transmissions.maxveight:=shop.details.transmissions.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.transmissions.output=-5 then
                      begin
                        shop.details.transmissions.fset.status:=true;
                        while shop.details.transmissions.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.transmissions.fset.output, shop.details.transmissions.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[24].face[7]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.transmissions.oncount then
                          begin
                            case shop.details.transmissions.count of
                              1: Console.ForegroundColor:=Balance.IFace.backcount._1;
                              6: Console.ForegroundColor:=Balance.IFace.backcount._6;
                              7: Console.ForegroundColor:=Balance.IFace.backcount._7;
                              8: Console.ForegroundColor:=Balance.IFace.backcount._8;
                              9: Console.ForegroundColor:=Balance.IFace.backcount._9;
                              10: Console.ForegroundColor:=Balance.IFace.backcount._10;
                              11: Console.ForegroundColor:=Balance.IFace.backcount._11;
                            end;
                            write(shop.details.transmissions.count,' ');
                            case shop.details.transmissions.count of
                              1: write(inter[24].face[2]);
                              6..11: write(inter[24].face[4]);
                            end;
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[24].face[5],' ',inter[24].face[6]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,6);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.transmissions.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.transmissions.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.transmissions.fset.input.Left(1)='/' then con(shop.details.transmissions.fset.input);
                          
                          if shop.details.transmissions.fset.input='0' then shop.details.transmissions.fset.status:=false;
                          
                          if shop.details.transmissions.fset.input.ToLower='d' then
                          begin
                            shop.details.transmissions.oncount:=false;
                            shop.details.transmissions.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.transmissions.fset.input,shop.details.transmissions.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if ((shop.details.transmissions.fset.output>=6) and (shop.details.transmissions.fset.output<=11))
                            or (shop.details.transmissions.fset.output=1) then
                            begin
                              shop.details.transmissions.fset.status:=false;
                              shop.details.transmissions.oncount:=true;
                              shop.details.transmissions.count:=shop.details.transmissions.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.transmissions.output=-6 then
                      begin
                        shop.details.transmissions.fset.status:=true;
                        while shop.details.transmissions.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.transmissions.fset.output, shop.details.transmissions.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[24].face[9]);
                          Console.SetCursorPosition(1,2);write(inter[24].face[8],': ');
                          if shop.details.transmissions.onfore then
                          begin
                            if shop.details.transmissions.fore then
                            begin
                              Console.ForegroundColor:=Balance.IFace.forecount._3;
                              write(inter[24].face[10]);
                            end
                            else
                            begin
                              Console.ForegroundColor:=Balance.IFace.forecount._1;
                              write(inter[24].face[11]);
                            end;
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[24].face[12]);
                          for var i:=0 to 1 do
                          begin
                            Console.SetCursorPosition(1,5+i);
                            write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=Balance.IFace.forecount._3;
                              1: Console.ForegroundColor:=Balance.IFace.forecount._1;
                            end;
                            write(inter[24].face[10+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,7);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,8);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.transmissions.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.transmissions.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.transmissions.fset.input.Left(1)='/' then con(shop.details.transmissions.fset.input);
                          
                          if shop.details.transmissions.fset.input='0' then shop.details.transmissions.fset.status:=false;
                          
                          if shop.details.transmissions.fset.input.ToLower='d' then
                          begin
                            shop.details.transmissions.onfore:=false;
                            shop.details.transmissions.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.transmissions.fset.input,shop.details.transmissions.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if (shop.details.transmissions.fset.output>0) and (shop.details.transmissions.fset.output<=2) then
                            begin
                              shop.details.transmissions.fset.status:=false;
                              shop.details.transmissions.onfore:=true;
                              shop.details.transmissions.fore:=not (IntToBool(shop.details.transmissions.fset.output-1));
                            end;
                          end;
                          
                        end;
                      end;
                      {$endregion}
                      
                      if (shop.details.transmissions.output>0) and (STrans<>nil) and (shop.details.transmissions.output<=STrans.Length) then
                      begin
                        shop.details.transmissions.buy.status:=true;
                        while shop.details.transmissions.buy.status do
                        begin
                          
                          var index:=shop.details.transmissions.output-1;
                          var price:=Round(STrans[index].price*map[player.position].kprice);
                        
                          Console.Clear;KTX.resize;
                          outnull(shop.details.transmissions.buy.output, shop.details.transmissions.buy.input);upface;
                          
                          Console.SetCursorPosition(1,2);write(bikes[0].value[3],' ',Rome(STrans[index].lvl),' ',STrans[index].name);
                          
                          Console.SetCursorPosition(1,4);write(inter[21].face[12],': ',dgt(price),' ',rub(price));
                          Console.SetCursorPosition(1,5);write(inter[21].face[11],': ',STrans[index].veight/1000,' ',inter[0].face[10]);
                          
                          Console.SetCursorPosition(1,7);write(bikes[6].value[0],': ');
                          case STrans[index].count of
                            1: Console.ForegroundColor:=Balance.IFace.backcount._1;
                            6: Console.ForegroundColor:=Balance.IFace.backcount._6;
                            7: Console.ForegroundColor:=Balance.IFace.backcount._7;
                            8: Console.ForegroundColor:=Balance.IFace.backcount._8;
                            9: Console.ForegroundColor:=Balance.IFace.backcount._9;
                            10: Console.ForegroundColor:=Balance.IFace.backcount._10;
                            11: Console.ForegroundColor:=Balance.IFace.backcount._11;
                          end;
                          write(STrans[index].count,' ');
                          case STrans[index].count of
                            1: write(bikes[6].value[2]);
                            6..11: write(bikes[6].value[4]);
                          end;
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          Console.SetCursorPosition(1,8);write(bikes[6].value[1],': ');
                          if STrans[index].fores then
                          begin
                            Console.ForegroundColor:=Balance.IFace.forecount._3;
                            write(3,' ',bikes[6].value[3]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=Balance.IFace.forecount._1;
                            write(1,' ',bikes[6].value[2]);
                          end;
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          Console.SetCursorPosition(1,KTX.maxy-5);
                          if player.money>=price then
                          begin
                            write('(1) ',inter[21].face[13]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',inter[21].face[13]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',inter[21].face[14],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.transmissions.buy.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.transmissions.buy.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.transmissions.buy.input.Left(1)='/' then con(shop.details.transmissions.buy.input);
                          
                          if shop.details.transmissions.buy.input='0' then shop.details.transmissions.buy.output:=0;
                          if (shop.details.transmissions.buy.input='1') and (player.money>=price) then shop.details.transmissions.buy.output:=1;
                          
                          if shop.details.transmissions.buy.output=0 then shop.details.transmissions.buy.status:=false;
                          
                          if shop.details.transmissions.buy.output=1 then
                          begin
                            shop.details.transmissions.buy.check.status:=true;
                            while shop.details.transmissions.buy.check.status do
                            begin
                              Console.Clear;KTX.resize;
                              outnull(shop.details.transmissions.buy.check.output, shop.details.transmissions.buy.check.input);
                              
                              Console.SetCursorPosition(1,1);write(inter[24].face[13],'?');
                              Console.SetCursorPosition(1,2);write(inter[22].face[17],'?');
                              Console.SetCursorPosition(1,4);
                              if allveight(player.bike.transmission.veight)<=player.maxveight then
                              begin
                                if player.energy>=balance.timing.it_transing.energy then
                                begin
                                  write('(1) ',inter[24].face[14]);
                                end
                                else
                                begin
                                  Console.ForegroundColor:=consolecolor.Gray;
                                  write('(1) ',inter[24].face[14]);
                                  Console.ForegroundColor:=consolecolor.Red;
                                  write(' (',items[0].value[7],')');
                                  Console.ForegroundColor:=consolecolor.Black;
                                end;
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(1) ',inter[22].face[18]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,5);
                              if allveight(STrans[index].veight)<=player.maxveight then
                              begin
                                write('(2) ',inter[22].face[19]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(2) ',inter[22].face[19]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,6);write('(0) ',inter[22].face[20]);
                              
                              KTX.read_1;
                              while (shop.details.transmissions.buy.check.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                              begin
                                Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                readln(shop.details.transmissions.buy.check.input);
                              end;
                              KTX.read_0;
                              
                              if shop.details.transmissions.buy.check.input.Left(1)='/' then con(shop.details.transmissions.buy.check.input);
                              
                              if shop.details.transmissions.buy.check.input='0' then shop.details.transmissions.buy.check.output:=0;
                              
                              if (shop.details.transmissions.buy.check.input='1') and ((allveight(player.bike.transmission.veight)<=player.maxveight) and (player.energy>=balance.timing.it_transing.energy)) then shop.details.transmissions.buy.check.output:=1;
                              
                              if (shop.details.transmissions.buy.check.input='2') and (allveight(STrans[index].veight)<=player.maxveight) then shop.details.transmissions.buy.check.output:=2;
                              
                              if shop.details.transmissions.buy.check.output=0 then shop.details.transmissions.buy.check.status:=false;
                              
                              if shop.details.transmissions.buy.check.output=1 then
                              begin
                                looping(balance.timing.it_transing,items[18].value[9]);
                                
                                var sw: TItem;
                                sw.tpsort:=4;
                                sw.name:=player.bike.transmission.name;
                                sw.maxhitpoints:=player.bike.transmission.maxhitpoints;
                                sw.hitpoints:=player.bike.transmission.hitpoints;
                                sw.veight:=player.bike.transmission.veight;
                                sw.price:=player.bike.transmission.price;
                                sw.count:=player.bike.transmission.count;
                                sw.fores:=player.bike.transmission.fores;
                                AddItem(sw);
                                
                                player.money-=price;
                                
                                player.bike.transmission.name:=STrans[index].name;
                                case STrans[index].count of
                                  1,6..11: player.bike.transmission.maxhitpoints:=balance.bk.transmission.count6.hitpoints;
                                end;
                                
                                player.bike.transmission.hitpoints:=player.bike.transmission.maxhitpoints;
                                player.bike.transmission.count:=STrans[index].count;
                                player.bike.transmission.fores:=STrans[index].fores;
                                
                                player.bike.transmission.price:=STrans[index].price;
                                player.bike.transmission.veight:=STrans[index].veight;
                                
                                if svg.autosave then save;
                                shop.details.transmissions.buy.check.status:=false;
                                shop.details.transmissions.buy.status:=false;
                              end;
                              if shop.details.transmissions.buy.check.output=2 then
                              begin
                                var sw: TItem;
                                sw.tpsort:=4;
                                sw.name:=STrans[index].name;
                                case STrans[index].count of
                                  1,6..11: sw.maxhitpoints:=balance.bk.transmission.count6.hitpoints;
                                end;
                                sw.hitpoints:=sw.maxhitpoints;
                                sw.count:=STrans[index].count;
                                sw.fores:=STrans[index].fores;
                                sw.price:=STrans[index].price;
                                sw.veight:=STrans[index].veight;
                                AddItem(sw);
                                player.money-=price;
                                
                                if svg.autosave then save;
                                shop.details.transmissions.buy.check.status:=false;
                                shop.details.transmissions.buy.status:=false;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                    
                  end;
                end;
                {$endregion}
                
                {$region RUDDERS}
                if shop.details.output=5 then
                begin
                  shop.details.rudders.status:=true;
                  while shop.details.rudders.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.details.rudders.output, shop.details.rudders.input);upface;
                    
                    var SRudders: array of TRudder;
                    SRudders:=nil;
                    
                    for var i:=0 to shop.rudders.Length-1 do
                    begin
                      var check: boolean = true;
                      if shop.rudders[i].lvl>player.level then check:=false;
                      if (not shop.olds) and (shop.rudders[i].maxlvl<player.level) then check:=false;
                      case map[player.position].sort of
                        0: if shop.rudders[i].lvl>balance.shopmaxlevels.type0 then check:=false;
                        1: if shop.rudders[i].lvl>balance.shopmaxlevels.type1 then check:=false;
                        2: if shop.rudders[i].lvl>balance.shopmaxlevels.type2 then check:=false;
                      end;
                      if shop.details.rudders.onminprice then
                      begin
                        if Round(shop.rudders[i].price*map[player.position].kprice)<shop.details.rudders.minprice then check:=false;
                      end;
                      if shop.details.rudders.onmaxprice then
                      begin
                        if Round(shop.rudders[i].price*map[player.position].kprice)>shop.details.rudders.maxprice then check:=false;
                      end;
                      if shop.details.rudders.onminveight then
                      begin
                        if shop.rudders[i].veight<shop.details.rudders.minveight then check:=false;
                      end;
                      if shop.details.rudders.onmaxveight then
                      begin
                        if shop.rudders[i].veight>shop.details.rudders.maxveight then check:=false;
                      end;
                      if shop.details.rudders.onsort then
                      begin
                        if shop.rudders[i].sort<>shop.details.rudders.sort then check:=false;
                      end;
                      if check then
                      begin
                        if SRudders = nil then SetLength(SRudders,1) else SetLength(SRudders,SRudders.Length+1);
                        SRudders[SRudders.Length-1]:=shop.rudders[i];
                      end;
                    end;
                    
                    var forksize: integer;
                    
                    if SRudders = nil then forksize:=1
                    else forksize:=SRudders.Length;
                    
                    if forksize>=(KTX.maxy-14) then Console.SetBufferSize(KTX.maxx,forksize+14);
                    
                    Console.SetCursorPosition(1,2);write(inter[21].face[8],':',spcf(5),'(D) ',inter[21].face[10]);
                    
                    Console.SetCursorPosition(1,3);write('(-1) ',inter[22].face[0],': ');
                    if shop.details.rudders.onminprice then
                    begin
                      write(dgt(shop.details.rudders.minprice),' ',rub(shop.details.rudders.minprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,4);write('(-2) ',inter[22].face[1],': ');
                    if shop.details.rudders.onmaxprice then
                    begin
                      write(dgt(shop.details.rudders.maxprice),' ',rub(shop.details.rudders.maxprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,5);write('(-3) ',inter[22].face[2],': ');
                    if shop.details.rudders.onminveight then
                    begin
                      write(shop.details.rudders.minveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,6);write('(-4) ',inter[22].face[3],': ');
                    if shop.details.rudders.onmaxveight then
                    begin
                      write(shop.details.rudders.maxveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,7);write('(-5) ',inter[25].face[0],': ');
                    if shop.details.rudders.onsort then
                    begin
                      case shop.details.rudders.sort of
                        0: Console.ForegroundColor:=Balance.IFace.ruddertype._0;
                        1: Console.ForegroundColor:=Balance.IFace.ruddertype._1;
                        2: Console.ForegroundColor:=Balance.IFace.ruddertype._2;
                      end;
                      write(bikes[7].value[shop.details.rudders.sort+1]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,9);write(inter[22].face[6],': ');
                    if SRudders = nil then
                    begin
                      Console.SetCursorPosition(1,10);write(inter[22].face[7]);
                    end
                    else
                    begin
                      for var i:=0 to SRudders.Length-1 do
                      begin
                        var price:=Round(SRudders[i].price*map[player.position].kprice);
                        Console.SetCursorPosition(1,10+i);write('(',i+1,') ',Rome(SRudders[i].lvl),' ',SRudders[i].name,' (',dgt(price),' ',rub(price),')');
                      end;
                    end;
                    
                    Console.SetCursorPosition(1,forksize+10);write('(0) ',inter[0].face[5]);
                    
                    KTX.read_1;
                    while (shop.details.rudders.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      if forksize>=(KTX.maxy-14) then
                      begin
                        Console.SetCursorPosition(1,forksize+13);
                        Console.SetCursorPosition(1,forksize+12);
                      end
                      else Console.SetCursorPosition(1,KTX.maxy-2);
                      write(': ');
                      readln(shop.details.rudders.input);
                    end;
                    KTX.read_0;
                    
                    if shop.details.rudders.input.Left(1)='/' then con(shop.details.rudders.input);
                    
                    if shop.details.rudders.input='0' then shop.details.rudders.output:=0;
                    
                    if shop.details.rudders.input.ToLower='d' then
                    begin
                      shop.details.rudders.onmaxprice:=false;
                      shop.details.rudders.onmaxveight:=false;
                      shop.details.rudders.onminprice:=false;
                      shop.details.rudders.onminveight:=false;
                      shop.details.rudders.onsort:=false;
                    end;
                    
                    var _e: integer;
                    val(shop.details.rudders.input,shop.details.rudders.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.details.rudders.output=0 then shop.details.rudders.status:=false;
                      
                      {$region Filters}
                      if shop.details.rudders.output=-1 then
                      begin
                        shop.details.rudders.fset.status:=true;
                        while shop.details.rudders.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.rudders.fset.output, shop.details.rudders.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.rudders.onminprice then
                          begin
                            write(dgt(shop.details.rudders.minprice),' ',rub(shop.details.rudders.minprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.rudders.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.rudders.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.rudders.fset.input.Left(1)='/' then con(shop.details.rudders.fset.input);
                          
                          if shop.details.rudders.fset.input='0' then shop.details.rudders.fset.status:=false;
                          
                          if shop.details.rudders.fset.input.ToLower='d' then
                          begin
                            shop.details.rudders.onminprice:=false;
                            shop.details.rudders.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.rudders.fset.input,shop.details.rudders.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.rudders.fset.output>0 then
                            begin
                              shop.details.rudders.fset.status:=false;
                              shop.details.rudders.onminprice:=true;
                              shop.details.rudders.minprice:=shop.details.rudders.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.rudders.output=-2 then
                      begin
                        shop.details.rudders.fset.status:=true;
                        while shop.details.rudders.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.rudders.fset.output, shop.details.rudders.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.rudders.onmaxprice then
                          begin
                            write(dgt(shop.details.rudders.maxprice),' ',rub(shop.details.rudders.maxprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.rudders.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.rudders.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.rudders.fset.input.Left(1)='/' then con(shop.details.rudders.fset.input);
                          
                          if shop.details.rudders.fset.input='0' then shop.details.rudders.fset.status:=false;
                          
                          if shop.details.rudders.fset.input.ToLower='d' then
                          begin
                            shop.details.rudders.onmaxprice:=false;
                            shop.details.rudders.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.rudders.fset.input,shop.details.rudders.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.rudders.fset.output>0 then
                            begin
                              shop.details.rudders.fset.status:=false;
                              shop.details.rudders.onmaxprice:=true;
                              shop.details.rudders.maxprice:=shop.details.rudders.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.rudders.output=-3 then
                      begin
                        shop.details.rudders.fset.status:=true;
                        while shop.details.rudders.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.rudders.fset.output, shop.details.rudders.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.rudders.onminveight then
                          begin
                            write(shop.details.rudders.minveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.rudders.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.rudders.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.rudders.fset.input.Left(1)='/' then con(shop.details.rudders.fset.input);
                          
                          if shop.details.rudders.fset.input='0' then shop.details.rudders.fset.status:=false;
                          
                          if shop.details.rudders.fset.input.ToLower='d' then
                          begin
                            shop.details.rudders.onminveight:=false;
                            shop.details.rudders.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.rudders.fset.input,shop.details.rudders.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.rudders.fset.output>0 then
                            begin
                              shop.details.rudders.fset.status:=false;
                              shop.details.rudders.onminveight:=true;
                              shop.details.rudders.minveight:=shop.details.rudders.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.rudders.output=-4 then
                      begin
                        shop.details.rudders.fset.status:=true;
                        while shop.details.rudders.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.rudders.fset.output, shop.details.rudders.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.rudders.onmaxveight then
                          begin
                            write(shop.details.rudders.maxveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.rudders.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.rudders.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.rudders.fset.input.Left(1)='/' then con(shop.details.rudders.fset.input);
                          
                          if shop.details.rudders.fset.input='0' then shop.details.rudders.fset.status:=false;
                          
                          if shop.details.rudders.fset.input.ToLower='d' then
                          begin
                            shop.details.rudders.onmaxveight:=false;
                            shop.details.rudders.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.rudders.fset.input,shop.details.rudders.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.rudders.fset.output>0 then
                            begin
                              shop.details.rudders.fset.status:=false;
                              shop.details.rudders.onmaxveight:=true;
                              shop.details.rudders.maxveight:=shop.details.rudders.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.rudders.output=-5 then
                      begin
                        shop.details.rudders.fset.status:=true;
                        while shop.details.rudders.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.rudders.fset.output, shop.details.rudders.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[25].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.rudders.onsort then
                          begin
                            case shop.details.rudders.sort of
                              0: Console.ForegroundColor:=Balance.IFace.ruddertype._0;
                              1: Console.ForegroundColor:=Balance.IFace.ruddertype._1;
                              2: Console.ForegroundColor:=Balance.IFace.ruddertype._2;
                            end;
                            write(bikes[7].value[shop.details.rudders.sort+1]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[25].face[1],': ');
                          for var i:=0 to 2 do
                          begin
                            Console.SetCursorPosition(1,5+i);
                            write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=Balance.IFace.ruddertype._0;
                              1: Console.ForegroundColor:=Balance.IFace.ruddertype._1;
                              2: Console.ForegroundColor:=Balance.IFace.ruddertype._2;
                            end;
                            write(bikes[7].value[1+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,8);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,9);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.rudders.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.rudders.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.rudders.fset.input.Left(1)='/' then con(shop.details.rudders.fset.input);
                          
                          if shop.details.rudders.fset.input='0' then shop.details.rudders.fset.status:=false;
                          
                          if shop.details.rudders.fset.input.ToLower='d' then
                          begin
                            shop.details.rudders.onsort:=false;
                            shop.details.rudders.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.rudders.fset.input,shop.details.rudders.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if ((shop.details.rudders.fset.output>=1) and (shop.details.rudders.fset.output<=3))
                            or (shop.details.rudders.fset.output=1) then
                            begin
                              shop.details.rudders.fset.status:=false;
                              shop.details.rudders.onsort:=true;
                              shop.details.rudders.sort:=shop.details.rudders.fset.output-1;
                            end;
                          end;
                          
                        end;
                      end;
                      {$endregion}
                      
                      if (shop.details.rudders.output>0) and (SRudders<>nil) and (shop.details.rudders.output<=SRudders.Length) then
                      begin
                        shop.details.rudders.buy.status:=true;
                        while shop.details.rudders.buy.status do
                        begin
                          
                          var index:=shop.details.rudders.output-1;
                          var price:=Round(SRudders[index].price*map[player.position].kprice);
                        
                          Console.Clear;KTX.resize;
                          outnull(shop.details.rudders.buy.output, shop.details.rudders.buy.input);upface;
                          
                          Console.SetCursorPosition(1,2);write(bikes[0].value[4],' ',Rome(SRudders[index].lvl),' ',SRudders[index].name);
                          
                          Console.SetCursorPosition(1,4);write(inter[21].face[12],': ',dgt(price),' ',rub(price));
                          Console.SetCursorPosition(1,5);write(inter[21].face[11],': ',SRudders[index].veight/1000,' ',inter[0].face[10]);
                          
                          Console.SetCursorPosition(1,7);write(bikes[7].value[0],': ');
                          case SRudders[index].sort of
                            0: Console.ForegroundColor:=Balance.IFace.ruddertype._0;
                            1: Console.ForegroundColor:=Balance.IFace.ruddertype._1;
                            2: Console.ForegroundColor:=Balance.IFace.ruddertype._2;
                          end;
                          write(bikes[7].value[SRudders[index].sort+1]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          
                          Console.SetCursorPosition(1,KTX.maxy-5);
                          if player.money>=price then
                          begin
                            write('(1) ',inter[21].face[13]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',inter[21].face[13]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',inter[21].face[14],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.rudders.buy.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.rudders.buy.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.rudders.buy.input.Left(1)='/' then con(shop.details.rudders.buy.input);
                          
                          if shop.details.rudders.buy.input='0' then shop.details.rudders.buy.output:=0;
                          if (shop.details.rudders.buy.input='1') and (player.money>=price) then shop.details.rudders.buy.output:=1;
                          
                          if shop.details.rudders.buy.output=0 then shop.details.rudders.buy.status:=false;
                          
                          if shop.details.rudders.buy.output=1 then
                          begin
                            shop.details.rudders.buy.check.status:=true;
                            while shop.details.rudders.buy.check.status do
                            begin
                              Console.Clear;KTX.resize;
                              outnull(shop.details.rudders.buy.check.output, shop.details.rudders.buy.check.input);
                              
                              Console.SetCursorPosition(1,1);write(inter[25].face[2],'?');
                              Console.SetCursorPosition(1,2);write(inter[23].face[19],'?');
                              Console.SetCursorPosition(1,4);
                              if allveight(player.bike.rudder.veight)<=player.maxveight then
                              begin
                                if player.energy>=balance.timing.it_ruddering.energy then
                                begin
                                  write('(1) ',inter[25].face[3]);
                                end
                                else
                                begin
                                  Console.ForegroundColor:=consolecolor.Gray;
                                  write('(1) ',inter[25].face[3]);
                                  Console.ForegroundColor:=consolecolor.Red;
                                  write(' (',items[0].value[7],')');
                                  Console.ForegroundColor:=consolecolor.Black;
                                end;
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(1) ',inter[25].face[3]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              
                              Console.SetCursorPosition(1,5);
                              if allveight(SRudders[index].veight)<=player.maxveight then
                              begin
                                write('(2) ',inter[22].face[19]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(2) ',inter[22].face[19]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,6);write('(0) ',inter[22].face[20]);
                              
                              KTX.read_1;
                              while (shop.details.rudders.buy.check.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                              begin
                                Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                readln(shop.details.rudders.buy.check.input);
                              end;
                              KTX.read_0;
                              
                              if shop.details.rudders.buy.check.input.Left(1)='/' then con(shop.details.rudders.buy.check.input);
                              
                              if shop.details.rudders.buy.check.input='0' then shop.details.rudders.buy.check.output:=0;
                              
                              if (shop.details.rudders.buy.check.input='1') and ((allveight(player.bike.rudder.veight)<=player.maxveight) and (player.energy>=balance.timing.it_transing.energy)) then shop.details.rudders.buy.check.output:=1;
                              
                              if (shop.details.rudders.buy.check.input='2') and (allveight(SRudders[index].veight)<=player.maxveight) then shop.details.rudders.buy.check.output:=2;
                              
                              if shop.details.rudders.buy.check.output=0 then shop.details.rudders.buy.check.status:=false;
                              
                              if shop.details.rudders.buy.check.output=1 then
                              begin
                                looping(balance.timing.it_ruddering,items[18].value[10]);
                                
                                var sw: TItem;
                                sw.tpsort:=5;
                                sw.name:=player.bike.rudder.name;
                                sw.maxhitpoints:=player.bike.rudder.maxhitpoints;
                                sw.hitpoints:=player.bike.rudder.hitpoints;
                                sw.veight:=player.bike.rudder.veight;
                                sw.price:=player.bike.rudder.price;
                                sw.sort:=player.bike.rudder.sort;
                                AddItem(sw);
                                
                                player.money-=price;
                                
                                player.bike.rudder.name:=SRudders[index].name;
                                case SRudders[index].sort of
                                  0: player.bike.rudder.maxhitpoints:=balance.bk.rudder.sort1.hitpoints;
                                  1: player.bike.rudder.maxhitpoints:=balance.bk.rudder.sort2.hitpoints;
                                  2: player.bike.rudder.maxhitpoints:=balance.bk.rudder.sort3.hitpoints;
                                end;
                                
                                player.bike.rudder.hitpoints:=player.bike.rudder.maxhitpoints;
                                player.bike.rudder.sort:=SRudders[index].sort;
                                
                                player.bike.rudder.price:=SRudders[index].price;
                                player.bike.rudder.veight:=SRudders[index].veight;
                                
                                if svg.autosave then save;
                                shop.details.rudders.buy.check.status:=false;
                                shop.details.rudders.buy.status:=false;
                              end;
                              
                              if shop.details.rudders.buy.check.output=2 then
                              begin
                                var sw: TItem;
                                sw.tpsort:=5;
                                sw.name:=SRudders[index].name;
                                case SRudders[index].sort of
                                  0: sw.maxhitpoints:=balance.bk.rudder.sort1.hitpoints;
                                  1: sw.maxhitpoints:=balance.bk.rudder.sort2.hitpoints;
                                  2: sw.maxhitpoints:=balance.bk.rudder.sort3.hitpoints;
                                end;
                                sw.hitpoints:=sw.maxhitpoints;
                                sw.sort:=SRudders[index].sort;
                                sw.price:=SRudders[index].price;
                                sw.veight:=SRudders[index].veight;
                                AddItem(sw);
                                player.money-=price;
                                
                                if svg.autosave then save;
                                shop.details.rudders.buy.check.status:=false;
                                shop.details.rudders.buy.status:=false;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                    
                  end;
                end;
                {$endregion}
                
                {$region BRAKES}
                if shop.details.output=6 then
                begin
                  shop.details.brakes.status:=true;
                  while shop.details.brakes.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.details.brakes.output, shop.details.brakes.input);upface;
                    
                    var SBrakes: array of TBrake;
                    SBrakes:=nil;
                    
                    for var i:=0 to shop.brakes.Length-1 do
                    begin
                      var check: boolean = true;
                      if shop.brakes[i].lvl>player.level then check:=false;
                      if (not shop.olds) and (shop.brakes[i].maxlvl<player.level) then check:=false;
                      case map[player.position].sort of
                        0: if shop.brakes[i].lvl>balance.shopmaxlevels.type0 then check:=false;
                        1: if shop.brakes[i].lvl>balance.shopmaxlevels.type1 then check:=false;
                        2: if shop.brakes[i].lvl>balance.shopmaxlevels.type2 then check:=false;
                      end;
                      if shop.details.brakes.onminprice then
                      begin
                        if Round(shop.brakes[i].price*map[player.position].kprice)<shop.details.brakes.minprice then check:=false;
                      end;
                      if shop.details.brakes.onmaxprice then
                      begin
                        if Round(shop.brakes[i].price*map[player.position].kprice)>shop.details.brakes.maxprice then check:=false;
                      end;
                      if shop.details.brakes.onminveight then
                      begin
                        if shop.brakes[i].veight<shop.details.brakes.minveight then check:=false;
                      end;
                      if shop.details.brakes.onmaxveight then
                      begin
                        if shop.brakes[i].veight>shop.details.brakes.maxveight then check:=false;
                      end;
                      if shop.details.brakes.onsort then
                      begin
                        if shop.brakes[i].sort<>shop.details.brakes.sort+1 then check:=false;
                      end;
                      if check then
                      begin
                        if SBrakes = nil then SetLength(SBrakes,1) else SetLength(SBrakes,SBrakes.Length+1);
                        SBrakes[SBrakes.Length-1]:=shop.brakes[i];
                      end;
                    end;
                    
                    var forksize: integer;
                    
                    if SBrakes = nil then forksize:=1
                    else forksize:=SBrakes.Length;
                    
                    var _Const:=14;
                    
                    if forksize>=(KTX.maxy-_Const) then Console.SetBufferSize(KTX.maxx,forksize+_Const);
                    
                    Console.SetCursorPosition(1,2);write(inter[21].face[8],':',spcf(5),'(D) ',inter[21].face[10]);
                    
                    Console.SetCursorPosition(1,3);write('(-1) ',inter[22].face[0],': ');
                    if shop.details.brakes.onminprice then
                    begin
                      write(dgt(shop.details.brakes.minprice),' ',rub(shop.details.brakes.minprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,4);write('(-2) ',inter[22].face[1],': ');
                    if shop.details.brakes.onmaxprice then
                    begin
                      write(dgt(shop.details.brakes.maxprice),' ',rub(shop.details.brakes.maxprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,5);write('(-3) ',inter[22].face[2],': ');
                    if shop.details.brakes.onminveight then
                    begin
                      write(shop.details.brakes.minveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,6);write('(-4) ',inter[22].face[3],': ');
                    if shop.details.brakes.onmaxveight then
                    begin
                      write(shop.details.brakes.maxveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,7);write('(-5) ',inter[26].face[0],': ');
                    if shop.details.brakes.onsort then
                    begin
                      case shop.details.brakes.sort of
                        0: Console.ForegroundColor:=Balance.IFace.braketype._1;
                        1: Console.ForegroundColor:=Balance.IFace.braketype._2;
                        2: Console.ForegroundColor:=Balance.IFace.braketype._3;
                      end;
                      write(bikes[8].value[shop.details.brakes.sort+1]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,9);write(inter[22].face[6],': ');
                    if SBrakes = nil then
                    begin
                      Console.SetCursorPosition(1,10);write(inter[22].face[7]);
                    end
                    else
                    begin
                      for var i:=0 to SBrakes.Length-1 do
                      begin
                        var price:=Round(SBrakes[i].price*map[player.position].kprice);
                        Console.SetCursorPosition(1,10+i);write('(',i+1,') ',Rome(SBrakes[i].lvl),' ',SBrakes[i].name,' (',dgt(price),' ',rub(price),')');
                      end;
                    end;
                    
                    Console.SetCursorPosition(1,forksize+_Const-4);write('(0) ',inter[0].face[5]);
                    
                    KTX.read_1;
                    while (shop.details.brakes.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      if forksize>=(KTX.maxy-_Const) then
                      begin
                        Console.SetCursorPosition(1,forksize+_Const-1);
                        Console.SetCursorPosition(1,forksize+_Const-2);
                      end
                      else Console.SetCursorPosition(1,KTX.maxy-2);
                      write(': ');
                      readln(shop.details.brakes.input);
                    end;
                    KTX.read_0;
                    
                    if shop.details.brakes.input.Left(1)='/' then con(shop.details.brakes.input);
                    
                    if shop.details.brakes.input='0' then shop.details.brakes.output:=0;
                    
                    if shop.details.brakes.input.ToLower='d' then
                    begin
                      shop.details.brakes.onmaxprice:=false;
                      shop.details.brakes.onmaxveight:=false;
                      shop.details.brakes.onminprice:=false;
                      shop.details.brakes.onminveight:=false;
                      shop.details.brakes.onsort:=false;
                    end;
                    
                    var _e: integer;
                    val(shop.details.brakes.input,shop.details.brakes.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.details.brakes.output=0 then shop.details.brakes.status:=false;
                      
                      {$region Filters}
                      if shop.details.brakes.output=-1 then
                      begin
                        shop.details.brakes.fset.status:=true;
                        while shop.details.brakes.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.brakes.fset.output, shop.details.brakes.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.brakes.onminprice then
                          begin
                            write(dgt(shop.details.brakes.minprice),' ',rub(shop.details.brakes.minprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.brakes.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.brakes.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.brakes.fset.input.Left(1)='/' then con(shop.details.brakes.fset.input);
                          
                          if shop.details.brakes.fset.input='0' then shop.details.brakes.fset.status:=false;
                          
                          if shop.details.brakes.fset.input.ToLower='d' then
                          begin
                            shop.details.brakes.onminprice:=false;
                            shop.details.brakes.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.brakes.fset.input,shop.details.brakes.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.brakes.fset.output>0 then
                            begin
                              shop.details.brakes.fset.status:=false;
                              shop.details.brakes.onminprice:=true;
                              shop.details.brakes.minprice:=shop.details.brakes.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.brakes.output=-2 then
                      begin
                        shop.details.brakes.fset.status:=true;
                        while shop.details.brakes.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.brakes.fset.output, shop.details.brakes.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.brakes.onmaxprice then
                          begin
                            write(dgt(shop.details.brakes.maxprice),' ',rub(shop.details.brakes.maxprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.brakes.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.brakes.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.brakes.fset.input.Left(1)='/' then con(shop.details.brakes.fset.input);
                          
                          if shop.details.brakes.fset.input='0' then shop.details.brakes.fset.status:=false;
                          
                          if shop.details.brakes.fset.input.ToLower='d' then
                          begin
                            shop.details.brakes.onmaxprice:=false;
                            shop.details.brakes.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.brakes.fset.input,shop.details.brakes.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.brakes.fset.output>0 then
                            begin
                              shop.details.brakes.fset.status:=false;
                              shop.details.brakes.onmaxprice:=true;
                              shop.details.brakes.maxprice:=shop.details.brakes.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.brakes.output=-3 then
                      begin
                        shop.details.brakes.fset.status:=true;
                        while shop.details.brakes.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.brakes.fset.output, shop.details.brakes.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.brakes.onminveight then
                          begin
                            write(shop.details.brakes.minveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.brakes.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.brakes.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.brakes.fset.input.Left(1)='/' then con(shop.details.brakes.fset.input);
                          
                          if shop.details.brakes.fset.input='0' then shop.details.brakes.fset.status:=false;
                          
                          if shop.details.brakes.fset.input.ToLower='d' then
                          begin
                            shop.details.brakes.onminveight:=false;
                            shop.details.brakes.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.brakes.fset.input,shop.details.brakes.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.brakes.fset.output>0 then
                            begin
                              shop.details.brakes.fset.status:=false;
                              shop.details.brakes.onminveight:=true;
                              shop.details.brakes.minveight:=shop.details.brakes.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.brakes.output=-4 then
                      begin
                        shop.details.brakes.fset.status:=true;
                        while shop.details.brakes.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.brakes.fset.output, shop.details.brakes.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.brakes.onmaxveight then
                          begin
                            write(shop.details.brakes.maxveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.brakes.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.brakes.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.brakes.fset.input.Left(1)='/' then con(shop.details.brakes.fset.input);
                          
                          if shop.details.brakes.fset.input='0' then shop.details.brakes.fset.status:=false;
                          
                          if shop.details.brakes.fset.input.ToLower='d' then
                          begin
                            shop.details.brakes.onmaxveight:=false;
                            shop.details.brakes.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.brakes.fset.input,shop.details.brakes.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.brakes.fset.output>0 then
                            begin
                              shop.details.brakes.fset.status:=false;
                              shop.details.brakes.onmaxveight:=true;
                              shop.details.brakes.maxveight:=shop.details.brakes.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.brakes.output=-5 then
                      begin
                        shop.details.brakes.fset.status:=true;
                        while shop.details.brakes.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.brakes.fset.output, shop.details.brakes.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[25].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.brakes.onsort then
                          begin
                            case shop.details.brakes.sort of
                              0: Console.ForegroundColor:=Balance.IFace.braketype._1;
                              1: Console.ForegroundColor:=Balance.IFace.braketype._2;
                              2: Console.ForegroundColor:=Balance.IFace.braketype._3;
                            end;
                            write(bikes[8].value[shop.details.brakes.sort+1]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[26].face[1],': ');
                          for var i:=0 to 2 do
                          begin
                            Console.SetCursorPosition(1,5+i);
                            write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=Balance.IFace.braketype._1;
                              1: Console.ForegroundColor:=Balance.IFace.braketype._2;
                              2: Console.ForegroundColor:=Balance.IFace.braketype._3;
                            end;
                            write(bikes[8].value[1+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,8);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,9);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.brakes.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.brakes.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.brakes.fset.input.Left(1)='/' then con(shop.details.brakes.fset.input);
                          
                          if shop.details.brakes.fset.input='0' then shop.details.brakes.fset.status:=false;
                          
                          if shop.details.brakes.fset.input.ToLower='d' then
                          begin
                            shop.details.brakes.onsort:=false;
                            shop.details.brakes.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.brakes.fset.input,shop.details.brakes.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if ((shop.details.brakes.fset.output>=1) and (shop.details.brakes.fset.output<=3))
                            or (shop.details.brakes.fset.output=1) then
                            begin
                              shop.details.brakes.fset.status:=false;
                              shop.details.brakes.onsort:=true;
                              shop.details.brakes.sort:=shop.details.brakes.fset.output-1;
                            end;
                          end;
                          
                        end;
                      end;
                      {$endregion}
                      
                      if (shop.details.brakes.output>0) and (SBrakes<>nil) and (shop.details.brakes.output<=SBrakes.Length) then
                      begin
                        shop.details.brakes.buy.status:=true;
                        while shop.details.brakes.buy.status do
                        begin
                          
                          var index:=shop.details.brakes.output-1;
                          var price:=Round(SBrakes[index].price*map[player.position].kprice);
                        
                          Console.Clear;KTX.resize;
                          outnull(shop.details.brakes.buy.output, shop.details.brakes.buy.input);upface;
                          
                          Console.SetCursorPosition(1,2);write(inter[26].face[2],' ',Rome(SBrakes[index].lvl),' ',SBrakes[index].name);
                          
                          Console.SetCursorPosition(1,4);write(inter[21].face[12],': ',dgt(price),' ',rub(price));
                          Console.SetCursorPosition(1,5);write(inter[21].face[11],': ',SBrakes[index].veight/1000,' ',inter[0].face[10]);
                          
                          Console.SetCursorPosition(1,7);write(bikes[8].value[0],': ');
                          
                          case SBrakes[index].sort of
                            1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                            2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                            3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                          end;
                          write(bikes[8].value[SBrakes[index].sort]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          
                          Console.SetCursorPosition(1,KTX.maxy-5);
                          if player.money>=price then
                          begin
                            write('(1) ',inter[21].face[13]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',inter[21].face[13]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',inter[21].face[14],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.brakes.buy.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.brakes.buy.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.brakes.buy.input.Left(1)='/' then con(shop.details.brakes.buy.input);
                          
                          if shop.details.brakes.buy.input='0' then shop.details.brakes.buy.output:=0;
                          if (shop.details.brakes.buy.input='1') and (player.money>=price) then shop.details.brakes.buy.output:=1;
                          
                          if shop.details.brakes.buy.output=0 then shop.details.brakes.buy.status:=false;
                          
                          if shop.details.brakes.buy.output=1 then
                          begin
                            shop.details.brakes.buy.check.status:=true;
                            while shop.details.brakes.buy.check.status do
                            begin
                              Console.Clear;KTX.resize;
                              outnull(shop.details.brakes.buy.check.output, shop.details.brakes.buy.check.input);
                              
                              Console.SetCursorPosition(1,1);write(inter[26].face[3],'?');
                              Console.SetCursorPosition(1,2);write(inter[23].face[19],'?');
                              Console.SetCursorPosition(1,4);write('(1) ',inter[26].face[4]);
                              
                              Console.SetCursorPosition(1,5);
                              if allveight(SBrakes[index].veight)<=player.maxveight then
                              begin
                                write('(2) ',inter[22].face[19]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(2) ',inter[22].face[19]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,6);write('(0) ',inter[22].face[20]);
                              
                              KTX.read_1;
                              while (shop.details.brakes.buy.check.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                              begin
                                Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                readln(shop.details.brakes.buy.check.input);
                              end;
                              KTX.read_0;
                              
                              if shop.details.brakes.buy.check.input.Left(1)='/' then con(shop.details.brakes.buy.check.input);
                              
                              if shop.details.brakes.buy.check.input='0' then shop.details.brakes.buy.check.output:=0;
                              
                              if shop.details.brakes.buy.check.input='1' then shop.details.brakes.buy.check.output:=1;
                              
                              if (shop.details.brakes.buy.check.input='2') and (allveight(SBrakes[index].veight)<=player.maxveight) then shop.details.brakes.buy.check.output:=2;
                              
                              if shop.details.brakes.buy.check.output=0 then shop.details.brakes.buy.check.status:=false;
                              
                              if shop.details.brakes.buy.check.output=1 then
                              begin
                                var BB: TBlock;
                                BB.status:=true;
                                while BB.status do
                                begin
                                  Console.Clear;KTX.resize;
                                  outnull(BB.output, BB.input);
                                  
                                  Console.SetCursorPosition(1,1);write(inter[26].face[5],'?');
                                  
                                  Console.SetCursorPosition(1,3);
                                  if player.bike.backbreak.flag then
                                  begin
                                    if allveight(player.bike.backbreak.veight)<=player.maxveight then
                                    begin
                                      if player.energy>=(balance.timing.break_demontage.energy+balance.timing.it_breaking.energy) then
                                      begin
                                        write('(1) ',inter[26].face[6]);
                                      end
                                      else
                                      begin
                                        Console.ForegroundColor:=consolecolor.Gray;
                                        write('(1) ',inter[26].face[6],' ');
                                        Console.ForegroundColor:=consolecolor.Red;
                                        write('(',items[0].value[7],')');
                                        Console.ForegroundColor:=consolecolor.Black;
                                      end;
                                    end
                                    else
                                    begin
                                      Console.ForegroundColor:=consolecolor.Gray;
                                      write('(1) ',inter[26].face[6],' ');
                                      Console.ForegroundColor:=consolecolor.Red;
                                      write('(',items[0].value[0],')');
                                      Console.ForegroundColor:=consolecolor.Black;
                                    end;
                                  end
                                  else
                                  begin
                                    if player.energy>=balance.timing.it_breaking.energy then
                                    begin
                                      write('(1) ',inter[26].face[7]);
                                    end
                                    else
                                    begin
                                      Console.ForegroundColor:=consolecolor.Gray;
                                      write('(1) ',inter[26].face[7],' ');
                                      Console.ForegroundColor:=consolecolor.Red;
                                      write('(',items[0].value[7],')');
                                      Console.ForegroundColor:=consolecolor.Black;
                                    end;
                                  end;
                                  
                                  Console.SetCursorPosition(1,4);
                                  if player.bike.frontbreak.flag then
                                  begin
                                    if allveight(player.bike.frontbreak.veight)<=player.maxveight then
                                    begin
                                      if player.energy>=(balance.timing.break_demontage.energy+balance.timing.it_breaking.energy) then
                                      begin
                                        write('(2) ',inter[26].face[8]);
                                      end
                                      else
                                      begin
                                        Console.ForegroundColor:=consolecolor.Gray;
                                        write('(2) ',inter[26].face[8],' ');
                                        Console.ForegroundColor:=consolecolor.Red;
                                        write('(',items[0].value[7],')');
                                        Console.ForegroundColor:=consolecolor.Black;
                                      end;
                                    end
                                    else
                                    begin
                                      Console.ForegroundColor:=consolecolor.Gray;
                                      write('(2) ',inter[26].face[8],' ');
                                      Console.ForegroundColor:=consolecolor.Red;
                                      write('(',items[0].value[0],')');
                                      Console.ForegroundColor:=consolecolor.Black;
                                    end;
                                  end
                                  else
                                  begin
                                    if player.energy>=balance.timing.it_breaking.energy then
                                    begin
                                      write('(2) ',inter[26].face[9]);
                                    end
                                    else
                                    begin
                                      Console.ForegroundColor:=consolecolor.Gray;
                                      write('(2) ',inter[26].face[9],' ');
                                      Console.ForegroundColor:=consolecolor.Red;
                                      write('(',items[0].value[7],')');
                                      Console.ForegroundColor:=consolecolor.Black;
                                    end;
                                  end;
                                  
                                  Console.SetCursorPosition(1,5);write('(0) ',inter[26].face[10]);
                                  
                                  KTX.read_1;
                                  while (BB.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                                  begin
                                    Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                    readln(BB.input);
                                  end;
                                  KTX.read_0;
                                  
                                  if BB.input.Left(1)='/' then con(BB.input);
                                  
                                  if BB.input='0' then BB.output:=0;
                                  
                                  if BB.input='1' then
                                  begin
                                    if player.bike.backbreak.flag then
                                    begin
                                      if (allveight(player.bike.backbreak.veight)<=player.maxveight)
                                      and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy) then
                                      BB.output:=1;
                                    end
                                    else
                                    begin
                                      if player.energy>=balance.timing.it_breaking.energy then BB.output:=1;
                                    end;
                                  end;
                                  
                                  if BB.input='2' then
                                  begin
                                    if player.bike.backbreak.flag then
                                    begin
                                      if (allveight(player.bike.frontbreak.veight)<=player.maxveight)
                                      and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy) then
                                      BB.output:=2;
                                    end
                                    else
                                    begin
                                      if player.energy>=balance.timing.it_breaking.energy then BB.output:=2;
                                    end;
                                  end;
                                  
                                  if BB.output=0 then BB.status:=false;
                                  
                                  if BB.output=1 then
                                  begin
                                    if player.bike.backbreak.flag then
                                    begin
                                      looping(balance.timing.break_demontage,bikes[8].value[6]);
                                      var sw: TItem;
                                      sw.tpsort:=6;
                                      sw.name:=player.bike.backbreak.name;
                                      sw.maxhitpoints:=player.bike.backbreak.maxhitpoints;
                                      sw.maxeffection:=player.bike.backbreak.maxeffection;
                                      sw.hitpoints:=player.bike.backbreak.hitpoints;
                                      sw.effection:=player.bike.backbreak.effection;
                                      sw.cardname:=player.bike.backbreak.cardname;
                                      sw.sort:=player.bike.backbreak.sort;
                                      
                                      sw.veight:=player.bike.backbreak.veight;
                                      sw.price:=player.bike.backbreak.price;
                                      
                                      AddItem(sw);
                                    end
                                    else player.bike.backbreak.flag:=true;
                                    looping(balance.timing.it_breaking,items[18].value[0]);
                                    player.bike.backbreak.name:=SBrakes[index].name;
                                    player.bike.backbreak.cardname:=SBrakes[index].name;
                                    case SBrakes[index].sort of
                                      1:
                                      begin
                                        if player.level<=balance.BreakCardEffection.VBrake.maxlvl then
                                        player.bike.backbreak.maxeffection:=Balance.BreakCardEffection.VBrake.minimal+
                                        Balance.BreakCardEffection.VBrake.lvladd*player.level
                                        else
                                        player.bike.backbreak.maxeffection:=Balance.BreakCardEffection.VBrake.minimal+
                                        Balance.BreakCardEffection.VBrake.lvladd*Balance.BreakCardEffection.VBrake.maxlvl;
                                        player.bike.backbreak.maxhitpoints:=balance.bk.backbreak.vbrake.hitpoints;
                                      end;
                                      2:
                                      begin
                                        if player.level<=balance.BreakCardEffection.DiskMechanic.maxlvl then
                                        player.bike.backbreak.maxeffection:=Balance.BreakCardEffection.DiskMechanic.minimal+
                                        Balance.BreakCardEffection.DiskMechanic.lvladd*player.level
                                        else
                                        player.bike.backbreak.maxeffection:=Balance.BreakCardEffection.DiskMechanic.minimal+
                                        Balance.BreakCardEffection.DiskMechanic.lvladd*Balance.BreakCardEffection.DiskMechanic.maxlvl;
                                        player.bike.backbreak.maxhitpoints:=balance.bk.backbreak.dm.hitpoints;
                                      end;
                                      3:
                                      begin
                                        if player.level<=balance.BreakCardEffection.DiskHydravlic.maxlvl then
                                        player.bike.backbreak.maxeffection:=Balance.BreakCardEffection.DiskHydravlic.minimal+
                                        Balance.BreakCardEffection.DiskHydravlic.lvladd*player.level
                                        else
                                        player.bike.backbreak.maxeffection:=Balance.BreakCardEffection.DiskHydravlic.minimal+
                                        Balance.BreakCardEffection.DiskHydravlic.lvladd*Balance.BreakCardEffection.DiskHydravlic.maxlvl;
                                        player.bike.backbreak.maxhitpoints:=balance.bk.backbreak.dh.hitpoints;
                                      end;
                                    end;
                                    player.bike.backbreak.sort:=SBrakes[index].sort;
                                    player.bike.backbreak.hitpoints:=player.bike.backbreak.maxhitpoints;
                                    player.bike.backbreak.effection:=player.bike.backbreak.maxeffection;
                                    player.bike.backbreak.price:=SBrakes[index].price;
                                    player.bike.backbreak.veight:=SBrakes[index].veight;
                                    BB.status:=false;
                                    shop.details.brakes.buy.check.status:=false;
                                    shop.details.brakes.buy.status:=false;
                                  end;
                                  
                                  if BB.output=2 then
                                  begin
                                    if player.bike.frontbreak.flag then
                                    begin
                                      looping(balance.timing.break_demontage,bikes[8].value[7]);
                                      var sw: TItem;
                                      sw.tpsort:=6;
                                      sw.name:=player.bike.frontbreak.name;
                                      sw.maxhitpoints:=player.bike.frontbreak.maxhitpoints;
                                      sw.maxeffection:=player.bike.frontbreak.maxeffection;
                                      sw.hitpoints:=player.bike.frontbreak.hitpoints;
                                      sw.effection:=player.bike.frontbreak.effection;
                                      sw.cardname:=player.bike.frontbreak.cardname;
                                      sw.sort:=player.bike.frontbreak.sort;
                                      
                                      sw.veight:=player.bike.frontbreak.veight;
                                      sw.price:=player.bike.frontbreak.price;
                                      
                                      AddItem(sw);
                                    end
                                    else player.bike.frontbreak.flag:=true;
                                    looping(balance.timing.it_breaking,items[18].value[1]);
                                    player.bike.frontbreak.name:=SBrakes[index].name;
                                    player.bike.frontbreak.cardname:=SBrakes[index].name;
                                    case SBrakes[index].sort of
                                      1:
                                      begin
                                        if player.level<=balance.BreakCardEffection.VBrake.maxlvl then
                                        player.bike.frontbreak.maxeffection:=Balance.BreakCardEffection.VBrake.minimal+
                                        Balance.BreakCardEffection.VBrake.lvladd*player.level
                                        else
                                        player.bike.frontbreak.maxeffection:=Balance.BreakCardEffection.VBrake.minimal+
                                        Balance.BreakCardEffection.VBrake.lvladd*Balance.BreakCardEffection.VBrake.maxlvl;
                                        player.bike.frontbreak.maxhitpoints:=balance.bk.frontbreak.vbrake.hitpoints;
                                      end;
                                      2:
                                      begin
                                        if player.level<=balance.BreakCardEffection.DiskMechanic.maxlvl then
                                        player.bike.frontbreak.maxeffection:=Balance.BreakCardEffection.DiskMechanic.minimal+
                                        Balance.BreakCardEffection.DiskMechanic.lvladd*player.level
                                        else
                                        player.bike.frontbreak.maxeffection:=Balance.BreakCardEffection.DiskMechanic.minimal+
                                        Balance.BreakCardEffection.DiskMechanic.lvladd*Balance.BreakCardEffection.DiskMechanic.maxlvl;
                                        player.bike.frontbreak.maxhitpoints:=balance.bk.frontbreak.dm.hitpoints;
                                      end;
                                      3:
                                      begin
                                        if player.level<=balance.BreakCardEffection.DiskHydravlic.maxlvl then
                                        player.bike.frontbreak.maxeffection:=Balance.BreakCardEffection.DiskHydravlic.minimal+
                                        Balance.BreakCardEffection.DiskHydravlic.lvladd*player.level
                                        else
                                        player.bike.frontbreak.maxeffection:=Balance.BreakCardEffection.DiskHydravlic.minimal+
                                        Balance.BreakCardEffection.DiskHydravlic.lvladd*Balance.BreakCardEffection.DiskHydravlic.maxlvl;
                                        player.bike.frontbreak.maxhitpoints:=balance.bk.frontbreak.dm.hitpoints;
                                      end;
                                    end;
                                    player.bike.frontbreak.sort:=SBrakes[index].sort;
                                    player.bike.frontbreak.hitpoints:=player.bike.frontbreak.maxhitpoints;
                                    player.bike.frontbreak.effection:=player.bike.frontbreak.maxeffection;
                                    player.bike.frontbreak.price:=SBrakes[index].price;
                                    player.bike.frontbreak.veight:=SBrakes[index].veight;
                                    BB.status:=false;
                                    shop.details.brakes.buy.check.status:=false;
                                    shop.details.brakes.buy.status:=false;
                                  end;
                                  
                                end;
                              end;
                              
                              if shop.details.brakes.buy.check.output=2 then
                              begin
                                var sw: TItem;
                                sw.tpsort:=6;
                                sw.name:=SBrakes[index].name;
                                case SBrakes[index].sort of
                                  1: sw.maxhitpoints:=balance.bk.rudder.sort1.hitpoints;
                                  2: sw.maxhitpoints:=balance.bk.rudder.sort2.hitpoints;
                                  3: sw.maxhitpoints:=balance.bk.rudder.sort3.hitpoints;
                                end;
                                
                                case SBrakes[index].sort of
                                  1:
                                  begin
                                    if player.level>balance.BreakCardEffection.VBrake.maxlvl then
                                    sw.maxeffection:=balance.BreakCardEffection.VBrake.minimal+balance.BreakCardEffection.VBrake.lvladd*balance.BreakCardEffection.VBrake.maxlvl
                                    else
                                    sw.maxeffection:=balance.BreakCardEffection.VBrake.minimal+balance.BreakCardEffection.VBrake.lvladd*player.level;
                                  end;
                                  2:
                                  begin
                                    if player.level>balance.BreakCardEffection.DiskMechanic.maxlvl then
                                    sw.maxeffection:=balance.BreakCardEffection.DiskMechanic.minimal+balance.BreakCardEffection.DiskMechanic.lvladd*balance.BreakCardEffection.DiskMechanic.maxlvl
                                    else
                                    sw.maxeffection:=balance.BreakCardEffection.DiskMechanic.minimal+balance.BreakCardEffection.DiskMechanic.lvladd*player.level;
                                  end;
                                  3:
                                  begin
                                    if player.level>balance.BreakCardEffection.DiskHydravlic.maxlvl then
                                    sw.maxeffection:=balance.BreakCardEffection.DiskHydravlic.minimal+balance.BreakCardEffection.DiskHydravlic.lvladd*balance.BreakCardEffection.DiskHydravlic.maxlvl
                                    else
                                    sw.maxeffection:=balance.BreakCardEffection.DiskHydravlic.minimal+balance.BreakCardEffection.DiskHydravlic.lvladd*player.level;
                                  end;
                                end;
                                
                                sw.hitpoints:=sw.maxhitpoints;
                                sw.effection:=sw.maxeffection;
                                sw.sort:=SBrakes[index].sort;
                                sw.price:=SBrakes[index].price;
                                sw.veight:=SBrakes[index].veight;
                                AddItem(sw);
                                player.money-=price;
                                
                                if svg.autosave then save;
                                shop.details.brakes.buy.check.status:=false;
                                shop.details.brakes.buy.status:=false;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                    
                  end;
                end;
                {$endregion}
                
                {$region WHEELS}
                if shop.details.output=7 then
                begin
                  shop.details.wheels.status:=true;
                  while shop.details.wheels.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.details.wheels.output, shop.details.wheels.input);upface;
                    
                    var SWheels: array of TWheel;
                    SWheels:=nil;
                    
                    for var i:=0 to shop.wheels.Length-1 do
                    begin
                      var check: boolean = true;
                      if shop.wheels[i].lvl>player.level then check:=false;
                      if (not shop.olds) and (shop.wheels[i].maxlvl<player.level) then check:=false;
                      if shop.details.wheels.onminprice then
                      begin
                        if Round(shop.wheels[i].price*map[player.position].kprice)<shop.details.wheels.minprice then check:=false;
                      end;
                      if shop.details.wheels.onmaxprice then
                      begin
                        if Round(shop.wheels[i].price*map[player.position].kprice)>shop.details.wheels.maxprice then check:=false;
                      end;
                      if shop.details.wheels.onminveight then
                      begin
                        if shop.wheels[i].veight<shop.details.wheels.minveight then check:=false;
                      end;
                      if shop.details.wheels.onmaxveight then
                      begin
                        if shop.wheels[i].veight>shop.details.wheels.maxveight then check:=false;
                      end;
                      if shop.details.wheels.onminhp then
                      begin
                        if shop.wheels[i].maxhp<shop.details.wheels.minhp then check:=false;
                      end;
                      if shop.details.wheels.onmaxhp then
                      begin
                        if shop.wheels[i].maxhp>shop.details.wheels.maxhp then check:=false;
                      end;
                      if check then
                      begin
                        if SWheels = nil then SetLength(SWheels,1) else SetLength(SWheels,SWheels.Length+1);
                        SWheels[SWheels.Length-1]:=shop.wheels[i];
                      end;
                    end;
                    
                    var forksize: integer;
                    
                    if SWheels = nil then forksize:=1
                    else forksize:=SWheels.Length;
                    
                    var _Const := 15;
                    
                    if forksize>=(KTX.maxy-_Const) then Console.SetBufferSize(KTX.maxx,forksize+_Const);
                    
                    Console.SetCursorPosition(1,2);write(inter[21].face[8],':',spcf(5),'(D) ',inter[21].face[10]);
                    
                    Console.SetCursorPosition(1,3);write('(-1) ',inter[22].face[0],': ');
                    if shop.details.wheels.onminprice then
                    begin
                      write(dgt(shop.details.wheels.minprice),' ',rub(shop.details.wheels.minprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,4);write('(-2) ',inter[22].face[1],': ');
                    if shop.details.wheels.onmaxprice then
                    begin
                      write(dgt(shop.details.wheels.maxprice),' ',rub(shop.details.wheels.maxprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,5);write('(-3) ',inter[22].face[2],': ');
                    if shop.details.wheels.onminveight then
                    begin
                      write(shop.details.wheels.minveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,6);write('(-4) ',inter[22].face[3],': ');
                    if shop.details.wheels.onmaxveight then
                    begin
                      write(shop.details.wheels.maxveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,7);write('(-5) ',inter[27].face[0],': ');
                    if shop.details.wheels.onminhp then
                    begin
                      if (shop.details.wheels.minhp>=Balance.IFace.wheelhits._1.min) and (shop.details.wheels.minhp<Balance.IFace.wheelhits._1.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._1.indicate
                        else
                      if (shop.details.wheels.minhp>=Balance.IFace.wheelhits._2.min) and (shop.details.wheels.minhp<Balance.IFace.wheelhits._2.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._2.indicate
                        else
                      if (shop.details.wheels.minhp>=Balance.IFace.wheelhits._3.min) and (shop.details.wheels.minhp<Balance.IFace.wheelhits._3.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._3.indicate;
                      write(shop.details.wheels.minhp div 1000,' ',inter[0].face[8]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,8);write('(-6) ',inter[27].face[1],': ');
                    if shop.details.wheels.onmaxhp then
                    begin
                      if (shop.details.wheels.maxhp>=Balance.IFace.wheelhits._1.min) and (shop.details.wheels.maxhp<Balance.IFace.wheelhits._1.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._1.indicate
                        else
                      if (shop.details.wheels.maxhp>=Balance.IFace.wheelhits._2.min) and (shop.details.wheels.maxhp<Balance.IFace.wheelhits._2.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._2.indicate
                        else
                      if (shop.details.wheels.maxhp>=Balance.IFace.wheelhits._3.min) and (shop.details.wheels.maxhp<Balance.IFace.wheelhits._3.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._3.indicate;
                      write(shop.details.wheels.maxhp div 1000,' ',inter[0].face[8]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,10);write(inter[22].face[6],': ');
                    if SWheels = nil then
                    begin
                      Console.SetCursorPosition(1,11);write(inter[22].face[7]);
                    end
                    else
                    begin
                      for var i:=0 to SWheels.Length-1 do
                      begin
                        var price:=Round(SWheels[i].price*map[player.position].kprice);
                        Console.SetCursorPosition(1,11+i);write('(',i+1,') ',Rome(SWheels[i].lvl),' ',SWheels[i].name,' (',dgt(price),' ',rub(price),')');
                      end;
                    end;
                    
                    Console.SetCursorPosition(1,forksize+_Const-4);write('(0) ',inter[0].face[5]);
                    
                    KTX.read_1;
                    while (shop.details.wheels.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      if forksize>=(KTX.maxy-_Const) then
                      begin
                        Console.SetCursorPosition(1,forksize+_Const-1);
                        Console.SetCursorPosition(1,forksize+_Const-2);
                      end
                      else Console.SetCursorPosition(1,KTX.maxy-2);
                      write(': ');
                      readln(shop.details.wheels.input);
                    end;
                    KTX.read_0;
                    
                    if shop.details.wheels.input.Left(1)='/' then con(shop.details.wheels.input);
                    
                    if shop.details.wheels.input='0' then shop.details.wheels.output:=0;
                    
                    if shop.details.wheels.input.ToLower='d' then
                    begin
                      shop.details.wheels.onmaxprice:=false;
                      shop.details.wheels.onmaxveight:=false;
                      shop.details.wheels.onminprice:=false;
                      shop.details.wheels.onminveight:=false;
                      shop.details.wheels.onminhp:=false;
                      shop.details.wheels.onmaxhp:=false;
                    end;
                    
                    var _e: integer;
                    val(shop.details.wheels.input,shop.details.wheels.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.details.wheels.output=0 then shop.details.wheels.status:=false;
                      
                      {$region Filters}
                      if shop.details.wheels.output=-1 then
                      begin
                        shop.details.wheels.fset.status:=true;
                        while shop.details.wheels.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.wheels.fset.output, shop.details.wheels.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.wheels.onminprice then
                          begin
                            write(dgt(shop.details.wheels.minprice),' ',rub(shop.details.wheels.minprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.wheels.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.wheels.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.wheels.fset.input.Left(1)='/' then con(shop.details.wheels.fset.input);
                          
                          if shop.details.wheels.fset.input='0' then shop.details.wheels.fset.status:=false;
                          
                          if shop.details.wheels.fset.input.ToLower='d' then
                          begin
                            shop.details.wheels.onminprice:=false;
                            shop.details.wheels.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.wheels.fset.input,shop.details.wheels.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.wheels.fset.output>0 then
                            begin
                              shop.details.wheels.fset.status:=false;
                              shop.details.wheels.onminprice:=true;
                              shop.details.wheels.minprice:=shop.details.wheels.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.wheels.output=-2 then
                      begin
                        shop.details.wheels.fset.status:=true;
                        while shop.details.wheels.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.wheels.fset.output, shop.details.wheels.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.wheels.onmaxprice then
                          begin
                            write(dgt(shop.details.wheels.maxprice),' ',rub(shop.details.wheels.maxprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.wheels.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.wheels.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.wheels.fset.input.Left(1)='/' then con(shop.details.wheels.fset.input);
                          
                          if shop.details.wheels.fset.input='0' then shop.details.wheels.fset.status:=false;
                          
                          if shop.details.wheels.fset.input.ToLower='d' then
                          begin
                            shop.details.wheels.onmaxprice:=false;
                            shop.details.wheels.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.wheels.fset.input,shop.details.wheels.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.wheels.fset.output>0 then
                            begin
                              shop.details.wheels.fset.status:=false;
                              shop.details.wheels.onmaxprice:=true;
                              shop.details.wheels.maxprice:=shop.details.wheels.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.wheels.output=-3 then
                      begin
                        shop.details.wheels.fset.status:=true;
                        while shop.details.wheels.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.wheels.fset.output, shop.details.wheels.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.wheels.onminveight then
                          begin
                            write(shop.details.wheels.minveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.wheels.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.wheels.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.wheels.fset.input.Left(1)='/' then con(shop.details.wheels.fset.input);
                          
                          if shop.details.wheels.fset.input='0' then shop.details.wheels.fset.status:=false;
                          
                          if shop.details.wheels.fset.input.ToLower='d' then
                          begin
                            shop.details.wheels.onminveight:=false;
                            shop.details.wheels.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.wheels.fset.input,shop.details.wheels.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.wheels.fset.output>0 then
                            begin
                              shop.details.wheels.fset.status:=false;
                              shop.details.wheels.onminveight:=true;
                              shop.details.wheels.minveight:=shop.details.wheels.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.wheels.output=-4 then
                      begin
                        shop.details.wheels.fset.status:=true;
                        while shop.details.wheels.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.wheels.fset.output, shop.details.wheels.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.wheels.onmaxveight then
                          begin
                            write(shop.details.wheels.maxveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.wheels.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.wheels.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.wheels.fset.input.Left(1)='/' then con(shop.details.wheels.fset.input);
                          
                          if shop.details.wheels.fset.input='0' then shop.details.wheels.fset.status:=false;
                          
                          if shop.details.wheels.fset.input.ToLower='d' then
                          begin
                            shop.details.wheels.onmaxveight:=false;
                            shop.details.wheels.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.wheels.fset.input,shop.details.wheels.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.wheels.fset.output>0 then
                            begin
                              shop.details.wheels.fset.status:=false;
                              shop.details.wheels.onmaxveight:=true;
                              shop.details.wheels.maxveight:=shop.details.wheels.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.wheels.output=-5 then
                      begin
                        shop.details.wheels.fset.status:=true;
                        while shop.details.wheels.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.wheels.fset.output, shop.details.wheels.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[27].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.wheels.onminhp then
                          begin
                            if (shop.details.wheels.minhp>=Balance.IFace.wheelhits._1.min) and (shop.details.wheels.minhp<Balance.IFace.wheelhits._1.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._1.indicate
                              else
                            if (shop.details.wheels.minhp>=Balance.IFace.wheelhits._2.min) and (shop.details.wheels.minhp<Balance.IFace.wheelhits._2.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._2.indicate
                              else
                            if (shop.details.wheels.minhp>=Balance.IFace.wheelhits._3.min) and (shop.details.wheels.minhp<Balance.IFace.wheelhits._3.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._3.indicate;
                            write(shop.details.wheels.minhp div 1000,' ',inter[0].face[8]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[27].face[2]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.wheels.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.wheels.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.wheels.fset.input.Left(1)='/' then con(shop.details.wheels.fset.input);
                          
                          if shop.details.wheels.fset.input='0' then shop.details.wheels.fset.status:=false;
                          
                          if shop.details.wheels.fset.input.ToLower='d' then
                          begin
                            shop.details.wheels.onminhp:=false;
                            shop.details.wheels.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.wheels.fset.input,shop.details.wheels.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.wheels.fset.output>0 then
                            begin
                              shop.details.wheels.fset.status:=false;
                              shop.details.wheels.onminhp:=true;
                              shop.details.wheels.minhp:=shop.details.wheels.fset.output*1000;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.wheels.output=-6 then
                      begin
                        shop.details.wheels.fset.status:=true;
                        while shop.details.wheels.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.wheels.fset.output, shop.details.wheels.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[27].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.wheels.onmaxhp then
                          begin
                            if (shop.details.wheels.maxhp>=Balance.IFace.wheelhits._1.min) and (shop.details.wheels.maxhp<Balance.IFace.wheelhits._1.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._1.indicate
                              else
                            if (shop.details.wheels.maxhp>=Balance.IFace.wheelhits._2.min) and (shop.details.wheels.maxhp<Balance.IFace.wheelhits._2.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._2.indicate
                              else
                            if (shop.details.wheels.maxhp>=Balance.IFace.wheelhits._3.min) and (shop.details.wheels.maxhp<Balance.IFace.wheelhits._3.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._3.indicate;
                            write(shop.details.wheels.maxhp div 1000,' ',inter[0].face[8]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[27].face[2]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.wheels.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.wheels.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.wheels.fset.input.Left(1)='/' then con(shop.details.wheels.fset.input);
                          
                          if shop.details.wheels.fset.input='0' then shop.details.wheels.fset.status:=false;
                          
                          if shop.details.wheels.fset.input.ToLower='d' then
                          begin
                            shop.details.wheels.onmaxhp:=false;
                            shop.details.wheels.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.wheels.fset.input,shop.details.wheels.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.wheels.fset.output>0 then
                            begin
                              shop.details.wheels.fset.status:=false;
                              shop.details.wheels.onmaxhp:=true;
                              shop.details.wheels.maxhp:=shop.details.wheels.fset.output*1000;
                            end;
                          end;
                          
                        end;
                      end;
                      {$endregion}
                      
                      if (shop.details.wheels.output>0) and (SWheels<>nil) and (shop.details.wheels.output<=SWheels.Length) then
                      begin
                        shop.details.wheels.buy.status:=true;
                        while shop.details.wheels.buy.status do
                        begin
                          
                          var index:=shop.details.wheels.output-1;
                          var price:=Round(SWheels[index].price*map[player.position].kprice);
                        
                          Console.Clear;KTX.resize;
                          outnull(shop.details.wheels.buy.output, shop.details.wheels.buy.input);upface;
                          
                          
                          Console.SetCursorPosition(1,2);write(inter[27].face[3],' ',Rome(SWheels[index].lvl),' ',SWheels[index].name);
                          
                          Console.SetCursorPosition(1,4);write(inter[21].face[12],': ',dgt(price),' ',rub(price));
                          Console.SetCursorPosition(1,5);write(inter[21].face[11],': ',SWheels[index].veight/1000,' ',inter[0].face[10]);
                          
                          Console.SetCursorPosition(1,7);write(inter[27].face[4],': ');
                          
                          if (SWheels[index].maxhp>=Balance.IFace.wheelhits._1.min) and (SWheels[index].maxhp<Balance.IFace.wheelhits._1.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._1.indicate
                            else
                          if (SWheels[index].maxhp>=Balance.IFace.wheelhits._2.min) and (SWheels[index].maxhp<Balance.IFace.wheelhits._2.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._2.indicate
                            else
                          if (SWheels[index].maxhp>=Balance.IFace.wheelhits._3.min) and (SWheels[index].maxhp<Balance.IFace.wheelhits._3.max) then Console.ForegroundColor:=Balance.IFace.wheelhits._3.indicate;
                          write(inter[27].face[5],' ',SWheels[index].maxhp div 1000,' ',inter[0].face[8]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          Console.SetCursorPosition(1,KTX.maxy-5);
                          if player.money>=price then
                          begin
                            write('(1) ',inter[21].face[13]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',inter[21].face[13]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',inter[21].face[14],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.wheels.buy.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.wheels.buy.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.wheels.buy.input.Left(1)='/' then con(shop.details.wheels.buy.input);
                          
                          if shop.details.wheels.buy.input='0' then shop.details.wheels.buy.output:=0;
                          if (shop.details.wheels.buy.input='1') and (player.money>=price) then shop.details.wheels.buy.output:=1;
                          
                          if shop.details.wheels.buy.output=0 then shop.details.wheels.buy.status:=false;
                          
                          if shop.details.wheels.buy.output=1 then
                          begin
                            shop.details.wheels.buy.check.status:=true;
                            while shop.details.wheels.buy.check.status do
                            begin
                              Console.Clear;KTX.resize;
                              outnull(shop.details.wheels.buy.check.output, shop.details.wheels.buy.check.input);
                              
                              Console.SetCursorPosition(1,1);write(inter[27].face[6],'?');
                              Console.SetCursorPosition(1,2);write(inter[23].face[19],'?');
                              Console.SetCursorPosition(1,4);write('(1) ',inter[27].face[7]);
                              
                              Console.SetCursorPosition(1,5);
                              if allveight(SWheels[index].veight)<=player.maxveight then
                              begin
                                write('(2) ',inter[22].face[19]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(2) ',inter[22].face[19]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,6);write('(0) ',inter[22].face[20]);
                              
                              KTX.read_1;
                              while (shop.details.wheels.buy.check.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                              begin
                                Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                readln(shop.details.wheels.buy.check.input);
                              end;
                              KTX.read_0;
                              
                              if shop.details.wheels.buy.check.input.Left(1)='/' then con(shop.details.wheels.buy.check.input);
                              
                              if shop.details.wheels.buy.check.input='0' then shop.details.wheels.buy.check.output:=0;
                              
                              if shop.details.wheels.buy.check.input='1' then shop.details.wheels.buy.check.output:=1;
                              
                              if (shop.details.wheels.buy.check.input='2') and (allveight(SWheels[index].veight)<=player.maxveight) then shop.details.wheels.buy.check.output:=2;
                              
                              if shop.details.wheels.buy.check.output=0 then shop.details.wheels.buy.check.status:=false;
                              
                              if shop.details.wheels.buy.check.output=1 then
                              begin
                                var BB: TBlock;
                                BB.status:=true;
                                while BB.status do
                                begin
                                  Console.Clear;KTX.resize;
                                  outnull(BB.output, BB.input);
                                  
                                  Console.SetCursorPosition(1,1);write(inter[27].face[8],'?');
                                  
                                  Console.SetCursorPosition(1,3);
                                  if allveight(player.bike.backwheel.veight)<=player.maxveight then
                                  begin
                                    if player.energy>=balance.timing.it_wheeling.energy then
                                    begin
                                      write('(1) ',inter[27].face[9]);
                                    end
                                    else
                                    begin
                                      Console.ForegroundColor:=consolecolor.Gray;
                                      write('(1) ',inter[27].face[9]);
                                      Console.ForegroundColor:=consolecolor.Red;
                                      write('(',items[0].value[7],')');
                                      Console.ForegroundColor:=consolecolor.Black;
                                    end;
                                  end
                                  else
                                  begin
                                    Console.ForegroundColor:=consolecolor.Gray;
                                    write('(1) ',inter[27].face[9]);
                                    Console.ForegroundColor:=consolecolor.Red;
                                    write('(',items[0].value[0],')');
                                    Console.ForegroundColor:=consolecolor.Black;
                                  end;
                                  
                                  Console.SetCursorPosition(1,4);
                                  if allveight(player.bike.frontwheel.veight)<=player.maxveight then
                                  begin
                                    if player.energy>=balance.timing.it_wheeling.energy then
                                    begin
                                      write('(2) ',inter[27].face[10]);
                                    end
                                    else
                                    begin
                                      Console.ForegroundColor:=consolecolor.Gray;
                                      write('(2) ',inter[27].face[10]);
                                      Console.ForegroundColor:=consolecolor.Red;
                                      write('(',items[0].value[7],')');
                                      Console.ForegroundColor:=consolecolor.Black;
                                    end;
                                  end
                                  else
                                  begin
                                    Console.ForegroundColor:=consolecolor.Gray;
                                    write('(2) ',inter[27].face[10]);
                                    Console.ForegroundColor:=consolecolor.Red;
                                    write('(',items[0].value[0],')');
                                    Console.ForegroundColor:=consolecolor.Black;
                                  end;
                                  
                                  Console.SetCursorPosition(1,5);write('(0) ',inter[27].face[11]);
                              
                                  KTX.read_1;
                                  while (BB.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                                  begin
                                    Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                    readln(BB.input);
                                  end;
                                  KTX.read_0;
                                  
                                  if BB.input.Left(1)='/' then con(BB.input);
                                  
                                  if BB.input='1' then
                                  begin
                                    if (allveight(player.bike.backwheel.veight)<=player.maxveight)
                                    and (player.energy>=balance.timing.it_wheeling.energy) then BB.output:=1;
                                  end;
                                  if BB.input='2' then
                                  begin
                                    if (allveight(player.bike.frontwheel.veight)<=player.maxveight)
                                    and (player.energy>=balance.timing.it_wheeling.energy) then BB.output:=2;
                                  end;
                                  if BB.input='0' then BB.output:=0;
                                  
                                  if BB.output=0 then BB.status:=false;
                                  
                                  if BB.output=1 then
                                  begin
                                    looping(balance.timing.it_wheeling,items[18].value[4]);
                                    var sw: TItem;
                                    sw.tpsort:=7;
                                    sw.name:=player.bike.backwheel.name;
                                    sw.maxhitpoints:=player.bike.backwheel.maxhitpoints;
                                    sw.hitpoints:=player.bike.backwheel.hitpoints;
                                    sw.needles:=player.bike.backwheel.needles;
                                    sw.eight:=player.bike.backwheel.eight;
                                    sw.camerahit:=player.bike.backwheel.camerahit;
                                    sw.price:=player.bike.backwheel.price;
                                    sw.veight:=player.bike.backwheel.veight;
                                    AddItem(sw);
                                    player.money-=price;
                                    
                                    player.bike.backwheel.name:=SWheels[index].name;
                                    player.bike.backwheel.eight:=false;
                                    player.bike.backwheel.camerahit:=false;
                                    player.bike.backwheel.maxhitpoints:=SWheels[index].maxhp;
                                    player.bike.backwheel.pressure:=0;
                                    player.bike.backwheel.needles:=balance.bk.wheel.needle.maximum;
                                    player.bike.backwheel.hitpoints:=player.bike.backwheel.maxhitpoints;
                                    player.bike.backwheel.veight:=SWheels[index].veight;
                                    player.bike.backwheel.price:=SWheels[index].price;
                                    
                                    BB.status:=false;
                                    shop.details.wheels.buy.check.status:=false;
                                    shop.details.wheels.buy.status:=false;
                                    
                                    if svg.autosave then save;
                                  end;
                                  if BB.output=2 then
                                  begin
                                    looping(balance.timing.it_wheeling,items[18].value[5]);
                                    var sw: TItem;
                                    sw.tpsort:=7;
                                    sw.name:=player.bike.frontwheel.name;
                                    sw.maxhitpoints:=player.bike.frontwheel.maxhitpoints;
                                    sw.hitpoints:=player.bike.frontwheel.hitpoints;
                                    sw.needles:=player.bike.frontwheel.needles;
                                    sw.eight:=player.bike.frontwheel.eight;
                                    sw.camerahit:=player.bike.frontwheel.camerahit;
                                    sw.price:=player.bike.frontwheel.price;
                                    sw.veight:=player.bike.frontwheel.veight;
                                    AddItem(sw);
                                    player.money-=price;
                                    
                                    player.bike.frontwheel.name:=SWheels[index].name;
                                    player.bike.frontwheel.eight:=false;
                                    player.bike.frontwheel.camerahit:=false;
                                    player.bike.frontwheel.maxhitpoints:=SWheels[index].maxhp;
                                    player.bike.frontwheel.pressure:=0;
                                    player.bike.frontwheel.needles:=balance.bk.wheel.needle.maximum;
                                    player.bike.frontwheel.hitpoints:=player.bike.frontwheel.maxhitpoints;
                                    player.bike.frontwheel.veight:=SWheels[index].veight;
                                    player.bike.frontwheel.price:=SWheels[index].price;
                                    
                                    BB.status:=false;
                                    shop.details.wheels.buy.check.status:=false;
                                    shop.details.wheels.buy.status:=false;
                                    
                                    if svg.autosave then save;
                                  end;
                                end;
                              end;
                              
                              if shop.details.wheels.buy.check.output=2 then
                              begin
                                var sw: TItem;
                                sw.tpsort:=7;
                                sw.name:=SWheels[index].name;
                                sw.maxhitpoints:=SWheels[index].maxhp;
                                sw.hitpoints:=sw.maxhitpoints;
                                sw.needles:=balance.bk.wheel.needle.maximum;
                                sw.eight:=false;
                                sw.camerahit:=false;
                                sw.price:=SWheels[index].price;
                                sw.veight:=SWheels[index].veight;
                                AddItem(sw);
                                
                                player.money-=price;
                                
                                if svg.autosave then save;
                                shop.details.wheels.buy.check.status:=false;
                                shop.details.wheels.buy.status:=false;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                    
                  end;
                end;
                {$endregion}
                
                {$region CARDS}
                if shop.details.output=8 then
                begin
                  shop.details.cards.status:=true;
                  while shop.details.cards.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(shop.details.cards.output, shop.details.cards.input);upface;
                    
                    var SCards: array of TCard;
                    SCards:=nil;
                    
                    for var i:=0 to shop.cards.Length-1 do
                    begin
                      var check: boolean = true;
                      if shop.cards[i].lvl>player.level then check:=false;
                      if (not shop.olds) and (shop.cards[i].maxlvl<player.level) then check:=false;
                      if shop.details.cards.onminprice then
                      begin
                        if Round(shop.cards[i].price*map[player.position].kprice)<shop.details.cards.minprice then check:=false;
                      end;
                      if shop.details.cards.onmaxprice then
                      begin
                        if Round(shop.cards[i].price*map[player.position].kprice)>shop.details.cards.maxprice then check:=false;
                      end;
                      if shop.details.cards.onminveight then
                      begin
                        if shop.cards[i].veight<shop.details.cards.minveight then check:=false;
                      end;
                      if shop.details.cards.onmaxveight then
                      begin
                        if shop.cards[i].veight>shop.details.cards.maxveight then check:=false;
                      end;
                      if shop.details.cards.onsort then
                      begin
                        if shop.cards[i].sort<>shop.details.cards.sort then check:=false;
                      end;
                      if shop.details.cards.onmineff then
                      begin
                        if shop.cards[i].maxeff<shop.details.cards.mineff then check:=false;
                      end;
                      if shop.details.cards.onmaxeff then
                      begin
                        if shop.cards[i].maxeff>shop.details.cards.maxeff then check:=false;
                      end;
                      if check then
                      begin
                        if SCards = nil then SetLength(SCards,1) else SetLength(SCards,SCards.Length+1);
                        SCards[SCards.Length-1]:=shop.cards[i];
                      end;
                    end;
                    
                    var forksize: integer;
                    
                    if SCards = nil then forksize:=1
                    else forksize:=SCards.Length;
                    
                    var _Const := 16;
                    
                    if forksize>=(KTX.maxy-_Const) then Console.SetBufferSize(KTX.maxx,forksize+_Const);
                    
                    Console.SetCursorPosition(1,2);write(inter[21].face[8],':',spcf(5),'(D) ',inter[21].face[10]);
                    
                    Console.SetCursorPosition(1,3);write('(-1) ',inter[22].face[0],': ');
                    if shop.details.cards.onminprice then
                    begin
                      write(dgt(shop.details.cards.minprice),' ',rub(shop.details.cards.minprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,4);write('(-2) ',inter[22].face[1],': ');
                    if shop.details.cards.onmaxprice then
                    begin
                      write(dgt(shop.details.cards.maxprice),' ',rub(shop.details.cards.maxprice));
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,5);write('(-3) ',inter[22].face[2],': ');
                    if shop.details.cards.onminveight then
                    begin
                      write(shop.details.cards.minveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,6);write('(-4) ',inter[22].face[3],': ');
                    if shop.details.cards.onmaxveight then
                    begin
                      write(shop.details.cards.maxveight/1000,' ',inter[0].face[10]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,7);write('(-5) ',inter[28].face[0],': ');
                    if shop.details.cards.onsort then
                    begin
                      case shop.details.cards.sort of
                        1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                        2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                        3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                      end;
                      write(items[12].value[5+shop.details.cards.sort]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,8);write('(-6) ',inter[27].face[0],': ');
                    if shop.details.cards.onmineff then
                    begin
                      if (shop.details.cards.mineff>=balance.IFace.cardhits._0.min) and (shop.details.cards.mineff<balance.IFace.cardhits._0.max) then Console.ForegroundColor:=Balance.IFace.cardhits._0.indicate
                        else
                      if (shop.details.cards.mineff>=balance.IFace.cardhits._1.min) and (shop.details.cards.mineff<balance.IFace.cardhits._1.max) then Console.ForegroundColor:=Balance.IFace.cardhits._1.indicate
                        else
                      if (shop.details.cards.mineff>=balance.IFace.cardhits._2.min) and (shop.details.cards.mineff<balance.IFace.cardhits._2.max) then Console.ForegroundColor:=Balance.IFace.cardhits._2.indicate
                        else
                      if (shop.details.cards.mineff>=balance.IFace.cardhits._3.min) and (shop.details.cards.mineff<balance.IFace.cardhits._3.max) then Console.ForegroundColor:=Balance.IFace.cardhits._3.indicate;
                      write(shop.details.cards.mineff div 1000,' ',inter[0].face[8]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,9);write('(-7) ',inter[27].face[1],': ');
                    if shop.details.cards.onmaxeff then
                    begin
                      if (shop.details.cards.maxeff>=balance.IFace.cardhits._0.min) and (shop.details.cards.maxeff<balance.IFace.cardhits._0.max) then Console.ForegroundColor:=Balance.IFace.cardhits._0.indicate
                        else
                      if (shop.details.cards.maxeff>=balance.IFace.cardhits._1.min) and (shop.details.cards.maxeff<balance.IFace.cardhits._1.max) then Console.ForegroundColor:=Balance.IFace.cardhits._1.indicate
                        else
                      if (shop.details.cards.maxeff>=balance.IFace.cardhits._2.min) and (shop.details.cards.maxeff<balance.IFace.cardhits._2.max) then Console.ForegroundColor:=Balance.IFace.cardhits._2.indicate
                        else
                      if (shop.details.cards.maxeff>=balance.IFace.cardhits._3.min) and (shop.details.cards.maxeff<balance.IFace.cardhits._3.max) then Console.ForegroundColor:=Balance.IFace.cardhits._3.indicate;
                      write(shop.details.cards.maxeff div 1000,' ',inter[0].face[8]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.DarkYellow;
                      write(inter[21].face[9]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,_Const-5);write(inter[22].face[6],': ');
                    if SCards = nil then
                    begin
                      Console.SetCursorPosition(1,_Const-5);write(inter[22].face[7]);
                    end
                    else
                    begin
                      for var i:=0 to SCards.Length-1 do
                      begin
                        var price:=Round(SCards[i].price*map[player.position].kprice);
                        Console.SetCursorPosition(1,_Const-4+i);write('(',i+1,') ',Rome(SCards[i].lvl),' ',SCards[i].name,' (',dgt(price),' ',rub(price),')');
                      end;
                    end;
                    
                    Console.SetCursorPosition(1,forksize+_Const-4);write('(0) ',inter[0].face[5]);
                    
                    KTX.read_1;
                    while (shop.details.cards.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      if forksize>=(KTX.maxy-_Const) then
                      begin
                        Console.SetCursorPosition(1,forksize+_Const-1);
                        Console.SetCursorPosition(1,forksize+_Const-2);
                      end
                      else Console.SetCursorPosition(1,KTX.maxy-2);
                      write(': ');
                      readln(shop.details.cards.input);
                    end;
                    KTX.read_0;
                    
                    if shop.details.cards.input.Left(1)='/' then con(shop.details.cards.input);
                    
                    if shop.details.cards.input='0' then shop.details.cards.output:=0;
                    
                    if shop.details.cards.input.ToLower='d' then
                    begin
                      shop.details.cards.onmaxprice:=false;
                      shop.details.cards.onmaxveight:=false;
                      shop.details.cards.onminprice:=false;
                      shop.details.cards.onminveight:=false;
                      shop.details.cards.onmineff:=false;
                      shop.details.cards.onmaxeff:=false;
                      shop.details.cards.onsort:=false;
                    end;
                    
                    var _e: integer;
                    val(shop.details.cards.input,shop.details.cards.output,_e);
                    
                    if _e=0 then
                    begin
                      if shop.details.cards.output=0 then shop.details.cards.status:=false;
                      
                      {$region Filters}
                      if shop.details.cards.output=-1 then
                      begin
                        shop.details.cards.fset.status:=true;
                        while shop.details.cards.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.cards.fset.output, shop.details.cards.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.cards.onminprice then
                          begin
                            write(dgt(shop.details.cards.minprice),' ',rub(shop.details.cards.minprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.cards.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.cards.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.cards.fset.input.Left(1)='/' then con(shop.details.cards.fset.input);
                          
                          if shop.details.cards.fset.input='0' then shop.details.cards.fset.status:=false;
                          
                          if shop.details.cards.fset.input.ToLower='d' then
                          begin
                            shop.details.cards.onminprice:=false;
                            shop.details.cards.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.cards.fset.input,shop.details.cards.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.cards.fset.output>0 then
                            begin
                              shop.details.cards.fset.status:=false;
                              shop.details.cards.onminprice:=true;
                              shop.details.cards.minprice:=shop.details.cards.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.cards.output=-2 then
                      begin
                        shop.details.cards.fset.status:=true;
                        while shop.details.cards.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.cards.fset.output, shop.details.cards.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.cards.onmaxprice then
                          begin
                            write(dgt(shop.details.cards.maxprice),' ',rub(shop.details.cards.maxprice));
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[9]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.cards.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.cards.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.cards.fset.input.Left(1)='/' then con(shop.details.cards.fset.input);
                          
                          if shop.details.cards.fset.input='0' then shop.details.cards.fset.status:=false;
                          
                          if shop.details.cards.fset.input.ToLower='d' then
                          begin
                            shop.details.cards.onmaxprice:=false;
                            shop.details.cards.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.cards.fset.input,shop.details.cards.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.cards.fset.output>0 then
                            begin
                              shop.details.cards.fset.status:=false;
                              shop.details.cards.onmaxprice:=true;
                              shop.details.cards.maxprice:=shop.details.cards.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.cards.output=-3 then
                      begin
                        shop.details.cards.fset.status:=true;
                        while shop.details.cards.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.cards.fset.output, shop.details.cards.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.cards.onminveight then
                          begin
                            write(shop.details.cards.minveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.cards.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.cards.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.cards.fset.input.Left(1)='/' then con(shop.details.cards.fset.input);
                          
                          if shop.details.cards.fset.input='0' then shop.details.cards.fset.status:=false;
                          
                          if shop.details.cards.fset.input.ToLower='d' then
                          begin
                            shop.details.cards.onminveight:=false;
                            shop.details.cards.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.cards.fset.input,shop.details.cards.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.cards.fset.output>0 then
                            begin
                              shop.details.cards.fset.status:=false;
                              shop.details.cards.onminveight:=true;
                              shop.details.cards.minveight:=shop.details.cards.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.cards.output=-4 then
                      begin
                        shop.details.cards.fset.status:=true;
                        while shop.details.cards.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.cards.fset.output, shop.details.cards.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[22].face[2]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.cards.onmaxveight then
                          begin
                            write(shop.details.cards.maxveight,' ',inter[0].face[16]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[22].face[12]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.cards.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.cards.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.cards.fset.input.Left(1)='/' then con(shop.details.cards.fset.input);
                          
                          if shop.details.cards.fset.input='0' then shop.details.cards.fset.status:=false;
                          
                          if shop.details.cards.fset.input.ToLower='d' then
                          begin
                            shop.details.cards.onmaxveight:=false;
                            shop.details.cards.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.cards.fset.input,shop.details.cards.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.cards.fset.output>0 then
                            begin
                              shop.details.cards.fset.status:=false;
                              shop.details.cards.onmaxveight:=true;
                              shop.details.cards.maxveight:=shop.details.cards.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      
                      if shop.details.cards.output=-5 then
                      begin
                        shop.details.cards.fset.status:=true;
                        while shop.details.cards.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.cards.fset.output, shop.details.cards.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[28].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.cards.onsort then
                          begin
                            case shop.details.brakes.sort of
                              1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                              2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                              3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                            end;
                            write(items[12].value[5+shop.details.brakes.sort]);
                            Console.ForegroundColor:=ConsoleColor.Black
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,4);write(inter[28].face[1],': ');
                          for var i:=0 to 2 do
                          begin
                            Console.SetCursorPosition(1,5+i);
                            write($'({i+1}) ');
                            case i of
                              0: Console.ForegroundColor:=Balance.IFace.braketype._1;
                              1: Console.ForegroundColor:=Balance.IFace.braketype._2;
                              2: Console.ForegroundColor:=Balance.IFace.braketype._3;
                            end;
                            write(items[12].value[6+i]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,8);write('(D) ',inter[22].face[14]);
                          Console.SetCursorPosition(1,9);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.cards.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.cards.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.cards.fset.input.Left(1)='/' then con(shop.details.cards.fset.input);
                          
                          if shop.details.cards.fset.input='0' then shop.details.cards.fset.status:=false;
                          
                          if shop.details.cards.fset.input.ToLower='d' then
                          begin
                            shop.details.cards.onsort:=false;
                            shop.details.cards.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.cards.fset.input,shop.details.cards.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if (shop.details.cards.fset.output>=1) and (shop.details.cards.fset.output<=3) then
                            begin
                              shop.details.cards.fset.status:=false;
                              shop.details.cards.onsort:=true;
                              shop.details.cards.sort:=shop.details.cards.fset.output;
                            end;
                          end;
                          
                        end;
                      end;
                      
                      if shop.details.cards.output=-6 then
                      begin
                        shop.details.cards.fset.status:=true;
                        while shop.details.cards.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.cards.fset.output, shop.details.cards.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[27].face[0]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.cards.onmineff then
                          begin
                            if (shop.details.cards.mineff>=balance.IFace.cardhits._0.min) and (shop.details.cards.mineff<balance.IFace.cardhits._0.max) then Console.ForegroundColor:=Balance.IFace.cardhits._0.indicate
                              else
                            if (shop.details.cards.mineff>=balance.IFace.cardhits._1.min) and (shop.details.cards.mineff<balance.IFace.cardhits._1.max) then Console.ForegroundColor:=Balance.IFace.cardhits._1.indicate
                              else
                            if (shop.details.cards.mineff>=balance.IFace.cardhits._2.min) and (shop.details.cards.mineff<balance.IFace.cardhits._2.max) then Console.ForegroundColor:=Balance.IFace.cardhits._2.indicate
                              else
                            if (shop.details.cards.mineff>=balance.IFace.cardhits._3.min) and (shop.details.cards.mineff<balance.IFace.cardhits._3.max) then Console.ForegroundColor:=Balance.IFace.cardhits._3.indicate;
                            write(shop.details.cards.mineff div 1000,' ',inter[0].face[8]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[27].face[2]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.cards.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.cards.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.cards.fset.input.Left(1)='/' then con(shop.details.cards.fset.input);
                          
                          if shop.details.cards.fset.input='0' then shop.details.cards.fset.status:=false;
                          
                          if shop.details.cards.fset.input.ToLower='d' then
                          begin
                            shop.details.cards.onmineff:=false;
                            shop.details.cards.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.cards.fset.input,shop.details.cards.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.cards.fset.output>0 then
                            begin
                              shop.details.cards.fset.status:=false;
                              shop.details.cards.onmineff:=true;
                              shop.details.cards.mineff:=shop.details.cards.fset.output*1000;
                            end;
                          end;
                          
                        end;
                      end;
                      if shop.details.cards.output=-7 then
                      begin
                        shop.details.cards.fset.status:=true;
                        while shop.details.cards.fset.status do
                        begin
                          Console.Clear;KTX.resize;
                          outnull(shop.details.cards.fset.output, shop.details.cards.fset.input);
                          
                          Console.SetCursorPosition(1,1);write(inter[27].face[1]);
                          Console.SetCursorPosition(1,2);write(inter[22].face[8],': ');
                          if shop.details.cards.onmaxeff then
                          begin
                            if (shop.details.cards.maxeff>=balance.IFace.cardhits._0.min) and (shop.details.cards.maxeff<balance.IFace.cardhits._0.max) then Console.ForegroundColor:=Balance.IFace.cardhits._0.indicate
                              else
                            if (shop.details.cards.maxeff>=balance.IFace.cardhits._1.min) and (shop.details.cards.maxeff<balance.IFace.cardhits._1.max) then Console.ForegroundColor:=Balance.IFace.cardhits._1.indicate
                              else
                            if (shop.details.cards.maxeff>=balance.IFace.cardhits._2.min) and (shop.details.cards.maxeff<balance.IFace.cardhits._2.max) then Console.ForegroundColor:=Balance.IFace.cardhits._2.indicate
                              else
                            if (shop.details.cards.maxeff>=balance.IFace.cardhits._3.min) and (shop.details.cards.maxeff<balance.IFace.cardhits._3.max) then Console.ForegroundColor:=Balance.IFace.cardhits._3.indicate;
                            write(shop.details.cards.maxeff div 1000,' ',inter[0].face[8]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.DarkYellow;
                            write(inter[21].face[9]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,3);write(inter[27].face[2]);
                          Console.SetCursorPosition(1,4);write(inter[22].face[10]);
                          Console.SetCursorPosition(1,5);write(inter[22].face[11]);
                          
                          KTX.read_1;
                          while (shop.details.cards.fset.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.cards.fset.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.cards.fset.input.Left(1)='/' then con(shop.details.cards.fset.input);
                          
                          if shop.details.cards.fset.input='0' then shop.details.cards.fset.status:=false;
                          
                          if shop.details.cards.fset.input.ToLower='d' then
                          begin
                            shop.details.cards.onmaxeff:=false;
                            shop.details.cards.fset.status:=false;
                          end;
                          
                          var _1e: integer;
                          val(shop.details.cards.fset.input,shop.details.cards.fset.output,_1e);
                          
                          if _1e=0 then
                          begin
                            if shop.details.cards.fset.output>0 then
                            begin
                              shop.details.cards.fset.status:=false;
                              shop.details.cards.onmaxeff:=true;
                              shop.details.cards.maxeff:=shop.details.cards.fset.output*1000;
                            end;
                          end;
                          
                        end;
                      end;
                      {$endregion}
                      
                      if (shop.details.cards.output>0) and (SCards<>nil) and (shop.details.cards.output<=SCards.Length) then
                      begin
                        shop.details.cards.buy.status:=true;
                        while shop.details.cards.buy.status do
                        begin
                          
                          var index:=shop.details.cards.output-1;
                          var price:=Round(SCards[index].price*map[player.position].kprice);
                        
                          Console.Clear;KTX.resize;
                          outnull(shop.details.cards.buy.output, shop.details.cards.buy.input);upface;
                          
                          
                          Console.SetCursorPosition(1,2);write(inter[27].face[3],' ',Rome(SCards[index].lvl),' ',SCards[index].name);
                          
                          Console.SetCursorPosition(1,4);write(inter[21].face[12],': ',dgt(price),' ',rub(price));
                          Console.SetCursorPosition(1,5);write(inter[21].face[11],': ',SCards[index].veight/1000,' ',inter[0].face[10]);
                          
                          Console.SetCursorPosition(1,7);write(inter[27].face[4],': ');
                          if (SCards[index].maxeff>=balance.IFace.cardhits._0.min) and (SCards[index].maxeff<balance.IFace.cardhits._0.max) then Console.ForegroundColor:=Balance.IFace.cardhits._0.indicate
                            else
                          if (SCards[index].maxeff>=balance.IFace.cardhits._1.min) and (SCards[index].maxeff<balance.IFace.cardhits._1.max) then Console.ForegroundColor:=Balance.IFace.cardhits._1.indicate
                            else
                          if (SCards[index].maxeff>=balance.IFace.cardhits._2.min) and (SCards[index].maxeff<balance.IFace.cardhits._2.max) then Console.ForegroundColor:=Balance.IFace.cardhits._2.indicate
                            else
                          if (SCards[index].maxeff>=balance.IFace.cardhits._3.min) and (SCards[index].maxeff<balance.IFace.cardhits._3.max) then Console.ForegroundColor:=Balance.IFace.cardhits._3.indicate;
                          write(inter[27].face[5],' ',SCards[index].maxeff div 1000,' ',inter[0].face[8]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          Console.SetCursorPosition(1,8);write(inter[28].face[0],': ');
                          case SCards[index].sort of
                            1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                            2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                            3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                          end;
                          write(items[12].value[5+SCards[index].sort]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          Console.SetCursorPosition(1,KTX.maxy-5);
                          if player.money>=price then
                          begin
                            write('(1) ',inter[21].face[13]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',inter[21].face[13]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',inter[21].face[14],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
                          
                          KTX.read_1;
                          while (shop.details.cards.buy.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                          begin
                            Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                            readln(shop.details.cards.buy.input);
                          end;
                          KTX.read_0;
                          
                          if shop.details.cards.buy.input.Left(1)='/' then con(shop.details.cards.buy.input);
                          
                          if shop.details.cards.buy.input='0' then shop.details.cards.buy.output:=0;
                          if (shop.details.cards.buy.input='1') and (player.money>=price) then shop.details.cards.buy.output:=1;
                          
                          if shop.details.cards.buy.output=0 then shop.details.cards.buy.status:=false;
                          
                          if shop.details.cards.buy.output=1 then
                          begin
                            shop.details.cards.buy.check.status:=true;
                            while shop.details.cards.buy.check.status do
                            begin
                              Console.Clear;KTX.resize;
                              outnull(shop.details.cards.buy.check.output, shop.details.cards.buy.check.input);
                              
                              Console.SetCursorPosition(1,1);write(inter[28].face[2],'?');
                              Console.SetCursorPosition(1,2);write(inter[28].face[3],'?');
                              Console.SetCursorPosition(1,4);write('(1) ',inter[28].face[4]);
                              
                              Console.SetCursorPosition(1,5);
                              if allveight(SCards[index].veight)<=player.maxveight then
                              begin
                                write('(2) ',inter[22].face[19]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(2) ',inter[22].face[19]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[0],')');
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                              Console.SetCursorPosition(1,6);write('(0) ',inter[22].face[20]);
                              
                              KTX.read_1;
                              while (shop.details.cards.buy.check.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                              begin
                                Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                readln(shop.details.cards.buy.check.input);
                              end;
                              KTX.read_0;
                              
                              if shop.details.cards.buy.check.input.Left(1)='/' then con(shop.details.cards.buy.check.input);
                              
                              if shop.details.cards.buy.check.input='0' then shop.details.cards.buy.check.output:=0;
                              
                              if shop.details.cards.buy.check.input='1' then shop.details.cards.buy.check.output:=1;
                              
                              if (shop.details.cards.buy.check.input='2') and (allveight(SCards[index].veight)<=player.maxveight) then shop.details.cards.buy.check.output:=2;
                              
                              if shop.details.cards.buy.check.output=0 then shop.details.cards.buy.check.status:=false;
                              
                              if shop.details.cards.buy.check.output=1 then
                              begin
                                var BB: TBlock;
                                BB.status:=true;
                                while BB.status do
                                begin
                                  Console.Clear;KTX.resize;
                                  outnull(BB.output, BB.input);
                                  
                                  Console.SetCursorPosition(1,1);write(inter[28].face[5],'?');
                                  
                                  Console.SetCursorPosition(1,3);
                                  if player.bike.backbreak.flag then
                                  begin
                                    if player.energy>=balance.timing.it_breakcarding.energy then
                                    begin
                                      write('(1) ',inter[28].face[6]);
                                    end
                                    else
                                    begin
                                      Console.ForegroundColor:=consolecolor.Gray;
                                      write('(1) ',inter[28].face[6]);
                                      Console.ForegroundColor:=consolecolor.Red;
                                      write('(',items[0].value[7],')');
                                      Console.ForegroundColor:=consolecolor.Black;
                                    end;
                                  end
                                  else
                                  begin
                                    Console.ForegroundColor:=consolecolor.Gray;
                                    write('(1) ',inter[28].face[6]);
                                    Console.ForegroundColor:=consolecolor.Red;
                                    write('(',items[17].value[21],')');
                                    Console.ForegroundColor:=consolecolor.Black;
                                  end;
                                  
                                  Console.SetCursorPosition(1,4);
                                  if player.bike.frontbreak.flag then
                                  begin
                                    if player.energy>=balance.timing.it_breakcarding.energy then
                                    begin
                                      write('(2) ',inter[28].face[7]);
                                    end
                                    else
                                    begin
                                      Console.ForegroundColor:=consolecolor.Gray;
                                      write('(2) ',inter[28].face[7]);
                                      Console.ForegroundColor:=consolecolor.Red;
                                      write('(',items[0].value[7],')');
                                      Console.ForegroundColor:=consolecolor.Black;
                                    end;
                                  end
                                  else
                                  begin
                                    Console.ForegroundColor:=consolecolor.Gray;
                                    write('(2) ',inter[28].face[7]);
                                    Console.ForegroundColor:=consolecolor.Red;
                                    write('(',items[17].value[21],')');
                                    Console.ForegroundColor:=consolecolor.Black;
                                  end;
                                  
                                  Console.SetCursorPosition(1,5);write('(0) ',inter[28].face[8]);
                              
                                  KTX.read_1;
                                  while (BB.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                                  begin
                                    Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                                    readln(BB.input);
                                  end;
                                  KTX.read_0;
                                  
                                  if BB.input.Left(1)='/' then con(BB.input);
                                  
                                  if BB.input='1' then
                                  begin
                                    if (player.bike.backbreak.flag)
                                    and (player.energy>=balance.timing.it_breakcarding.energy) then BB.output:=1;
                                  end;
                                  if BB.input='2' then
                                  begin
                                    if (player.bike.frontbreak.flag)
                                    and (player.energy>=balance.timing.it_breakcarding.energy) then BB.output:=2;
                                  end;
                                  if BB.input='0' then BB.output:=0;
                                  
                                  if BB.output=0 then BB.status:=false;
                                  
                                  if BB.output=1 then
                                  begin
                                    looping(balance.timing.it_breakcarding,items[18].value[2]);
                                    var sw: TItem;
                                    sw.tpsort:=8;
                                    sw.name:=player.bike.backbreak.cardname;
                                    sw.cardname:=player.bike.backbreak.cardname;
                                    sw.effection:=player.bike.backbreak.effection;
                                    sw.maxeffection:=player.bike.backbreak.maxeffection;
                                    sw.sort:=player.bike.backbreak.sort;
                                    AddItem(sw);
                                    player.money-=price;
                                    
                                    player.bike.backbreak.cardname:=SCards[index].name;
                                    player.bike.backbreak.maxeffection:=SCards[index].maxeff;
                                    player.bike.backbreak.effection:=player.bike.backbreak.maxeffection;
                                    
                                    BB.status:=false;
                                    shop.details.cards.buy.check.status:=false;
                                    shop.details.cards.buy.status:=false;
                                    
                                    if svg.autosave then save;
                                  end;
                                  if BB.output=2 then
                                  begin
                                    looping(balance.timing.it_breakcarding,items[18].value[3]);
                                    var sw: TItem;
                                    sw.tpsort:=8;
                                    sw.name:=player.bike.frontbreak.cardname;
                                    sw.cardname:=player.bike.frontbreak.cardname;
                                    sw.effection:=player.bike.frontbreak.effection;
                                    sw.maxeffection:=player.bike.frontbreak.maxeffection;
                                    sw.sort:=player.bike.frontbreak.sort;
                                    AddItem(sw);
                                    player.money-=price;
                                    
                                    player.bike.frontbreak.cardname:=SCards[index].name;
                                    player.bike.frontbreak.maxeffection:=SCards[index].maxeff;
                                    player.bike.frontbreak.effection:=player.bike.frontbreak.maxeffection;
                                    
                                    BB.status:=false;
                                    shop.details.cards.buy.check.status:=false;
                                    shop.details.cards.buy.status:=false;
                                    
                                    if svg.autosave then save;
                                  end;
                                end;
                              end;
                              
                              if shop.details.cards.buy.check.output=2 then
                              begin
                                var sw: TItem;
                                sw.tpsort:=8;
                                sw.name:=SCards[index].name;
                                sw.cardname:=SCards[index].name;
                                sw.maxeffection:=SCards[index].maxeff;
                                sw.effection:=sw.maxeffection;
                                sw.sort:=SCards[index].sort;
                                AddItem(sw);
                                
                                player.money-=price;
                                
                                if svg.autosave then save;
                                shop.details.cards.buy.check.status:=false;
                                shop.details.cards.buy.status:=false;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                    
                  end;
                end;
                {$endregion}
                
              end;
            end;
            {$endregion}
            
            {$region Cameras}
            if shop.output=4 then
            begin
              var cams: TBlock;
              cams.status:=true;
              while cams.status do
              begin
                Console.Clear;KTX.resize;
                outnull(cams.output, cams.input);upface;
                
                Console.SetCursorPosition(1,2);
                write(inter[36].face[0]);
                
                var _Cnt:=CameraCount;
                var _k: integer;
                if player.level>balance.CameraPrice.maxlvl then _k:=balance.CameraPrice.min+balance.CameraPrice.add*balance.CameraPrice.maxlvl
                else _k:=balance.CameraPrice.min+balance.CameraPrice.add*player.level;
                var price:=Round(map[player.position].kprice*_k);
                
                Console.SetCursorPosition(1,4);
                write(inter[36].face[1],': ',_Cnt,' ');
                case _Cnt mod 100 of
                  1,21,31,41,51,61,71,81,91: write(inter[36].face[2]);
                  2..4,22..24,32..34,42..44,52..54,62..64,72..74,82..84,92..94: write(inter[36].face[3]);
                  0,5..20,25..30,35..40,45..50,55..60,65..70,75..80,85..90,95..99: write(inter[36].face[4]);
                end;
                
                Console.SetCursorPosition(1,6);
                if price<=player.money then
                begin
                  if AllVeight(balance.cameraveight)<=player.maxveight then
                  begin
                    write('(1) ',inter[36].face[5],' (',dgt(price),' ',rub(price),')');
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    write('(1) ',inter[36].face[5],' (',dgt(price),' ',rub(price),')');
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',items[0].value[0],')');
                    Console.ForegroundColor:=consolecolor.Black;
                  end;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(1) ',inter[36].face[5]);
                  Console.ForegroundColor:=consolecolor.Red;
                  write(' (',dgt(price),' ',rub(price),')');
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                
                Console.SetCursorPosition(1,7);
                if _Cnt>=1 then
                begin
                  write('(2) ',inter[36].face[6]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(2) ',inter[36].face[6]);
                  Console.ForegroundColor:=consolecolor.Red;
                  write(' (',inter[36].face[7],')');
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                
                Console.SetCursorPosition(1,8);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (cams.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(cams.input);
                end;
                KTX.read_0;
                
                if cams.input.Left(1)='/' then con(cams.input);
                
                if cams.input='0' then cams.output:=0;
                
                if (cams.input='1') and (price<=player.money) and (AllVeight(balance.cameraveight)<=player.maxveight) then cams.output:=1;
                
                if (cams.input='2') and (_Cnt>=1) then cams.output:=2;
                
                if cams.output=0 then cams.status:=false;
                
                if cams.output=1 then
                begin
                  GetCamera();
                  player.money-=price;
                  if svg.autosave then save;
                end;
                
                if cams.output=2 then
                begin
                  var _kk: integer;
                  if player.itemcount>0 then
                  for var i:=0 to player.items.Length-1 do
                  begin
                    if player.items[i].tpsort=9 then
                    begin
                      _kk:=i;
                      break;
                    end;
                  end;
                  RemoveItem(_kk);
                  player.money+=price;
                  if svg.autosave then save;
                end;
              end;
            end;
            
            {$endregion}
            
            {$region NeedleBoxes}
            if shop.output=5 then
            begin
              var cams: TBlock;
              cams.status:=true;
              while cams.status do
              begin
                Console.Clear;KTX.resize;
                outnull(cams.output, cams.input);upface;
                
                Console.SetCursorPosition(1,2);
                write(inter[37].face[0]);
                
                var _Cnt:=NeedleCount;
                var _k: integer;
                if player.level>balance.NeedlePrice.maxlvl then _k:=balance.NeedlePrice.min+balance.CameraPrice.add*balance.NeedlePrice.maxlvl
                else _k:=balance.NeedlePrice.min+balance.NeedlePrice.add*player.level;
                var price:=Round(map[player.position].kprice*_k);
                
                Console.SetCursorPosition(1,4);
                write(inter[37].face[1],': ',_Cnt,' ');
                case _Cnt mod 100 of
                  1,21,31,41,51,61,71,81,91: write(inter[37].face[2]);
                  2..4,22..24,32..34,42..44,52..54,62..64,72..74,82..84,92..94: write(inter[37].face[3]);
                  0,5..20,25..30,35..40,45..50,55..60,65..70,75..80,85..90,95..99: write(inter[37].face[4]);
                end;
                
                Console.SetCursorPosition(1,6);
                if price<=player.money then
                begin
                  if AllVeight(balance.needleveight)<=player.maxveight then
                  begin
                    write('(1) ',inter[37].face[5],' (',dgt(price),' ',rub(price),')');
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    write('(1) ',inter[37].face[5],' (',dgt(price),' ',rub(price),')');
                    Console.ForegroundColor:=consolecolor.Red;
                    write(' (',items[0].value[0],')');
                    Console.ForegroundColor:=consolecolor.Black;
                  end;
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(1) ',inter[37].face[5]);
                  Console.ForegroundColor:=consolecolor.Red;
                  write(' (',dgt(price),' ',rub(price),')');
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                
                Console.SetCursorPosition(1,7);
                if _Cnt>=1 then
                begin
                  write('(2) ',inter[37].face[6]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(2) ',inter[37].face[6]);
                  Console.ForegroundColor:=consolecolor.Red;
                  write(' (',inter[37].face[7],')');
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                
                Console.SetCursorPosition(1,8);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (cams.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(cams.input);
                end;
                KTX.read_0;
                
                if cams.input.Left(1)='/' then con(cams.input);
                
                if cams.input='0' then cams.output:=0;
                
                if (cams.input='1') and (price<=player.money) and (AllVeight(balance.needleveight)<=player.maxveight) then cams.output:=1;
                
                if (cams.input='2') and (_Cnt>=1) then cams.output:=2;
                
                if cams.output=0 then cams.status:=false;
                
                if cams.output=1 then
                begin
                  GetNeedleBox();
                  player.money-=price;
                  if svg.autosave then save;
                end;
                
                if cams.output=2 then
                begin
                  var _kk: integer;
                  if player.itemcount>0 then
                  for var i:=0 to player.items.Length-1 do
                  begin
                    if player.items[i].tpsort=12 then
                    begin
                      _kk:=i;
                      break;
                    end;
                  end;
                  RemoveItem(_kk);
                  player.money+=price;
                  if svg.autosave then save;
                end;
              end;
            end;
            
            {$endregion}
            
            {$region Sell}
            if shop.output=6 then
            begin
              var sell: TBlock;
              sell.status:=true;
              while sell.status do
              begin
                Console.Clear;KTX.resize;
                outnull(sell.output, sell.input);upface;
                
                Console.SetCursorPosition(1,2);write(inter[38].face[0],'?');
                
                var _U: array of TSell = nil;
                
                var _k: real;
                if player.level>balance.Sell.Oldermaxlvl then
                  _k:=balance.Sell.Oldermin+balance.Sell.Olderadd*balance.Sell.Oldermaxlvl
                else
                  _k:=balance.Sell.Oldermin+balance.Sell.Olderadd*player.level;
                
                for var i:=0 to player.items.Length-1 do
                begin
                  if (player.items[i].tpsort>=1) and (player.items[i].tpsort<=7) then
                  begin
                    if _U=nil then setlength(_u,1)
                    else setlength(_u,_u.Length+1);
                    _u[_u.Length-1].id:=i;
                    _u[_u.Length-1].item:=player.items[i];
                  end;
                end;
                
                var size: integer;
                if _U<>nil then size:=_U.Length
                else size:=1;
                
                var _Const:=8;
                
                if size>=(KTX.maxy-_Const) then Console.SetBufferSize(KTX.maxx,size+_Const);
                
                if _U<>nil then
                for var i:=0 to _U.Length-1 do
                begin
                  Console.SetCursorPosition(1,_Const+i-4);
                  write('(',i+1,') ',items[2].value[_U[i].item.tpsort-1],' ',_U[i].item.name);
                  var _prc:=Round(_U[i].item.price*map[player.position].kprice*((_U[i].item.hitpoints/_U[i].item.maxhitpoints)**(_k)));
                  write(' (',dgt(_prc),' ',rub(_prc),')');
                end;
                if _U=nil then
                begin
                  Console.SetCursorPosition(1,_Const-4);
                  write(inter[38].face[5]);
                end;
                Console.SetCursorPosition(1,_Const+size-4);
                write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (sell.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  if size>=(KTX.maxy-_Const) then
                  begin
                    Console.SetCursorPosition(1,size+_Const-1);
                    Console.SetCursorPosition(1,size+_Const-2);
                  end
                  else Console.SetCursorPosition(1,KTX.maxy-2);
                  write(': ');
                  readln(sell.input);
                end;
                KTX.read_0;
                
                if sell.input.Left(1)='/' then con(sell.input);
                
                if sell.input='0' then sell.output:=0;
                
                var a,e: integer;
                val(sell.input,a,e);
                if (e=0) and (a>0) then sell.output:=a;
                
                if sell.output=0 then sell.status:=false;
                
                if (sell.output>0)and (sell.output<=size) then
                begin
                  var sold: TBlock;
                  sold.status:=true;
                  while sold.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(sold.output, sold.input);
                    
                    var _prc:=Round(_U[sell.output-1].item.price*map[player.position].kprice*((_U[sell.output-1].item.hitpoints/_U[sell.output-1].item.maxhitpoints)**(_k)));
                    
                    Console.SetCursorPosition(1,1);write(inter[38].face[1],' ',
                    inter[39].face[_U[sell.output-1].item.tpsort-1].ToLower,' ',
                    _U[sell.output-1].item.name,'?');
                    
                    Console.SetCursorPosition(1,2);write(inter[38].face[2],' ',dgt(_prc),' ',rub(_prc));
                    
                    Console.SetCursorPosition(1,4);write('(1) ',inter[38].face[3]);
                    Console.SetCursorPosition(1,5);write('(0) ',inter[38].face[4]);
                    
                    KTX.read_1;
                    while (sold.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(sold.input);
                    end;
                    KTX.read_0;
                    
                    if sold.input.Left(1)='/' then con(sold.input);
                    
                    if sold.input='0' then sold.output:=0;
                    
                    if sold.input='1' then sold.output:=1;
                    
                    if sold.output=0 then sold.status:=false;
                    
                    if sold.output=1 then
                    begin
                      RemoveItem(_U[sell.output-1].id);
                      player.money+=_prc;
                      sold.status:=false;
                      if svg.autosave then save;
                    end;
                  end;
                end;
              end;
            end;
            {$endregion}
            
          end;
        end;{$endregion}
        
        if game.output=5 then
        {$region GAME.ITEMS}
        begin
          game.item.status:=true;
          while game.item.status do
          begin
            Console.Clear;KTX.resize;
            outnull(game.item.output, game.item.input);upface;
            
            
            game.item.arrcount:=0;
            SetLength(game.item.arr,0);
            if player.itemcount>0 then
            for var i:=0 to player.items.Length-1 do
            begin
              if (player.items[i].tpsort<>9) and (player.items[i].tpsort<>12) then
              begin
                game.item.arrcount+=1;
                SetLength(game.item.arr,game.item.arrcount);
                game.item.arr[game.item.arrcount-1].it:=player.items[i];
                game.item.arr[game.item.arrcount-1].id:=i;
              end;
            end;
            
            var itemsize: integer = game.item.arrcount;
            if itemsize>=(KTX.maxy-11) then Console.SetBufferSize(KTX.maxx,itemsize+11);
            
            {$region}
            Console.SetCursorPosition(1,2);write(items[0].value[1],': ');
            
            if allveight/player.maxveight<0.25 then Console.ForegroundColor:=ConsoleColor.DarkBlue
            else if allveight/player.maxveight<0.5 then Console.ForegroundColor:=ConsoleColor.DarkGreen
            else if allveight/player.maxveight<0.75 then Console.ForegroundColor:=ConsoleColor.DarkYellow
            else if allveight/player.maxveight<=1 then Console.ForegroundColor:=ConsoleColor.DarkRed
            else if allveight>player.maxveight then Console.ForegroundColor:=ConsoleColor.Red;
            
            write((allveight)/1000,' / ',player.maxveight/1000,' ',inter[0].face[10]);
            Console.ForegroundColor:=ConsoleColor.Black;
            
            Console.SetCursorPosition(1,4);write(items[1].value[2],': ');
            Console.ForegroundColor:=consolecolor.DarkBlue;
            write(Round(player.water/10)/100,' / ',player.maxwater/1000,' ',inter[0].face[13]);
            Console.ForegroundColor:=consolecolor.Black;
            
            Console.SetCursorPosition(1,5);write(items[1].value[3],': ');
            Console.ForegroundColor:=consolecolor.DarkYellow;
            write(Round(player.food/10)/100,' / ',player.maxfood/1000,' ',inter[0].face[10]);
            Console.ForegroundColor:=consolecolor.Black;
            
            Console.SetCursorPosition(Round(KTX.maxx/3),4);
            if cameraavailable then
            begin
              write(items[1].value[0],': ',CameraCount,' (',Round(cameraveight/100)/10,' ',inter[0].face[10],')');
            end
            else
            begin
              write(items[1].value[0],': ',CameraCount);
            end;
            
            Console.SetCursorPosition(Round(KTX.maxx/3),5);
            if needleavailable then
            begin
              write(items[1].value[1],': ',NeedleCount,' (',Round(needleveight/100)/10,' ',inter[0].face[10],')');
            end
            else
            begin
              write(items[1].value[1],': ',NeedleCount);
            end;{$endregion}
            
            if game.item.arrcount>0 then
            for var i:=0 to game.item.arr.Length-1 do
            begin
              Console.SetCursorPosition(1,7+i);write('(',i+1,') ');
              if (game.item.arr[i].it.tpsort>0) and (game.item.arr[i].it.tpsort<=12) and (game.item.arr[i].it.tpsort<>10) then write(items[2].value[game.item.arr[i].it.tpsort-1],' ',game.item.arr[i].it.name)
              else if game.item.arr[i].it.tpsort=10 then write(game.item.arr[i].it.name);
              write(' (',game.item.arr[i].it.veight/1000,' ',inter[0].face[10],')');
            end;
            Console.SetCursorPosition(1,7+game.item.arrcount);write('(0) ',inter[0].face[5]);
            
            
            KTX.read_1;
            while (game.item.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              if itemsize>=(KTX.maxy-11) then
              begin
                Console.SetCursorPosition(1,itemsize+10);
                Console.SetCursorPosition(1,itemsize+9);
              end
              else Console.SetCursorPosition(1,KTX.maxy-2);
              write(': ');
              readln(game.item.input);
            end;
            KTX.read_0;
            
            if game.item.input.Left(1)='/' then con(game.item.input)
            else if game.item.input='0' then game.item.output:=0
            else
            begin
              var a, e: integer;
              val (game.item.input,a,e);
              if (e=0) and (a>0) and (a<=game.item.arrcount) then game.item.output:=a;
            end;
            
            if game.item.output=0 then
            begin
              game.item.status:=false;
            end;
            
            if game.item.output>0 then
            begin
              
              game.item.item.status:=true;
              while game.item.item.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.item.item.output, game.item.item.input);upface;
                
                {$region ITEM.TRASH}
                Console.SetCursorPosition(1,2);
                if (game.item.arr[game.item.output-1].it.tpsort>=1)
                and (game.item.arr[game.item.output-1].it.tpsort<=12) then write(items[2].value[game.item.arr[game.item.output-1].it.tpsort-1],' ');
                if (game.item.arr[game.item.output-1].it.tpsort<>11) then write(game.item.arr[game.item.output-1].it.name);
                
                if (game.item.arr[game.item.output-1].it.tpsort>=1)
                and (game.item.arr[game.item.output-1].it.tpsort<=9)
                and (game.item.arr[game.item.output-1].it.tpsort<>8) then
                begin
                  Console.SetCursorPosition(1,4);write(items[0].value[2],': ');
                  var pircent: real = game.item.arr[game.item.output-1].it.hitpoints/game.item.arr[game.item.output-1].it.maxhitpoints;
                  
                  var marker := pircent;
                  if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                  begin
                    Console.ForegroundColor:=balance.status._verygood.color;
                    write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                  end;
                  if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                  begin
                    Console.ForegroundColor:=balance.status._good.color;
                    write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                  end;
                  if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                  begin
                    Console.ForegroundColor:=balance.status._normal.color;
                    write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                  end;
                  if (game.item.arr[game.item.output-1].it.tpsort<>6) then
                  begin
                    if (game.item.arr[game.item.output-1].it.hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                    begin
                      Console.ForegroundColor:=balance.status._bad.color;
                      write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    if (game.item.arr[game.item.output-1].it.hitpoints<=balance.criticalhp) then
                    begin
                      Console.ForegroundColor:=balance.status._verybad.color;
                      write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                  end
                  else
                  begin
                    if (marker<balance.status._bad.max) then
                    begin
                      Console.ForegroundColor:=balance.status._bad.color;
                      write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                  end;
                  Console.ForegroundColor:=consolecolor.Black;
                
                  Console.SetCursorPosition(1,5);write(items[0].value[3],': ');
                  write(dgt(Round(game.item.arr[game.item.output-1].it.price*pircent)),' ',rub(Round(game.item.arr[game.item.output-1].it.price*pircent)));
                  Console.SetCursorPosition(1,6);write(items[0].value[4],': ');
                  write(game.item.arr[game.item.output-1].it.veight/1000,' ',inter[0].face[10]);
                end;
                
                case game.item.arr[game.item.output-1].it.tpsort of
                  11:
                  begin
                    Console.SetCursorPosition(1,3);write(items[0].value[5],': ',types[map[game.item.arr[game.item.output-1].it.town].sort],' ',map[game.item.arr[game.item.output-1].it.town].name);
                    Console.SetCursorPosition(1,4);write(items[0].value[6],': ');
                    var str: string;
                    if svg.time_type=0 then
                    begin
                      str:=str+game.item.arr[game.item.output-1].it.timemax.Day;
                      str:=str+' '+month[game.item.arr[game.item.output-1].it.timemax.Month-1]+' '+game.item.arr[game.item.output-1].it.timemax.Year+' ';
                    end;
                    if svg.time_type=1 then
                    begin
                      str:=str+game.item.arr[game.item.output-1].it.timemax.Day;
                      str:=str+' '+month[game.item.arr[game.item.output-1].it.timemax.Month-1].Left(3)+' '+game.item.arr[game.item.output-1].it.timemax.Year+' ';
                    end;
                    if svg.time_type=2 then
                    begin
                      if game.item.arr[game.item.output-1].it.timemax.Day<10 then str:=str+'0'+str+game.item.arr[game.item.output-1].it.timemax.Day+'.'
                      else str:=str+game.item.arr[game.item.output-1].it.timemax.Day+'.';
                      if game.item.arr[game.item.output-1].it.timemax.Month<10 then str:=str+'0'+str+game.item.arr[game.item.output-1].it.timemax.Month+'.'
                      else str:=str+game.item.arr[game.item.output-1].it.timemax.Month+'.';
                      str:=str+game.item.arr[game.item.output-1].it.timemax.Year+' ';
                    end;
                    str:=str+game.item.arr[game.item.output-1].it.timemax.Hour;
                    str:=str+':';
                    if game.item.arr[game.item.output-1].it.timemax.Minute < 10 then str:=str+'0'+game.item.arr[game.item.output-1].it.timemax.Minute
                    else str:=str+game.item.arr[game.item.output-1].it.timemax.Minute;
                    write(str);
                  end;
                  1:
                  begin
                    Console.SetCursorPosition(1,8);write(items[3].value[0],': ');
                    if (game.item.arr[game.item.output-1].it.material>=0) and (game.item.arr[game.item.output-1].it.material<=4) then
                    begin
                      case game.item.arr[game.item.output-1].it.material of
                        0: Console.ForegroundColor:=Balance.IFace.framematerial.Steel;
                        1: Console.ForegroundColor:=Balance.IFace.framematerial.SteelPlus;
                        2: Console.ForegroundColor:=Balance.IFace.framematerial.Alu6061;
                        3: Console.ForegroundColor:=Balance.IFace.framematerial.Alu7075;
                        4: Console.ForegroundColor:=Balance.IFace.framematerial.Titan;
                      end;
                      write(items[3].value[1+game.item.arr[game.item.output-1].it.material]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end;
                      
                    Console.SetCursorPosition(1,9);write(items[4].value[0],': ');
                    if game.item.arr[game.item.output-1].it.suspensionflag then
                    begin
                      Console.ForegroundColor:=ConsoleColor.DarkGreen;
                      write(items[4].value[1])
                    end
                    else
                    begin
                      Console.ForegroundColor:=ConsoleColor.Red;
                      write(items[4].value[2]);
                    end;
                    Console.ForegroundColor:=ConsoleColor.Black;
                  end;
                  2:
                  begin
                    Console.SetCursorPosition(1,8);write(items[5].value[0],': ');
                    if game.item.arr[game.item.output-1].it.suspensionflag then
                    begin
                      Console.ForegroundColor:=ConsoleColor.DarkGreen;
                      write(items[5].value[1]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=ConsoleColor.Red;
                      write(items[5].value[2]);
                    end;
                    Console.ForegroundColor:=ConsoleColor.Black;
                    
                    if game.item.arr[game.item.output-1].it.suspensionflag then
                    begin
                      Console.SetCursorPosition(1,9);write(items[6].value[0],': ');
                      if (game.item.arr[game.item.output-1].it.suspension>=0)
                      and (game.item.arr[game.item.output-1].it.suspension<=5) then
                      begin
                        case game.item.arr[game.item.output-1].it.suspension of
                          0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                          1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                          2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                          3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                          4: Console.ForegroundColor:=Balance.IFace.susptype.OilPlus;
                          5: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                        end;
                        write(items[6].value[1+game.item.arr[game.item.output-1].it.suspension]);
                        Console.ForegroundColor:=ConsoleColor.Black;
                      end;
                      Console.SetCursorPosition(1,10);write(items[7].value[0],': ');
                      
                      if (game.item.arr[game.item.output-1].it.travel>=balance.IFace.susptravel._0.min) and (game.item.arr[game.item.output-1].it.travel<=balance.IFace.susptravel._0.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                      if (game.item.arr[game.item.output-1].it.travel>=balance.IFace.susptravel._1.min) and (game.item.arr[game.item.output-1].it.travel<=balance.IFace.susptravel._1.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                      if (game.item.arr[game.item.output-1].it.travel>=balance.IFace.susptravel._2.min) and (game.item.arr[game.item.output-1].it.travel<=balance.IFace.susptravel._2.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                      if (game.item.arr[game.item.output-1].it.travel>=balance.IFace.susptravel._3.min) and (game.item.arr[game.item.output-1].it.travel<=balance.IFace.susptravel._3.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                      
                      write(game.item.arr[game.item.output-1].it.travel,' ',inter[0].face[11]);
                      
                      Console.ForegroundColor:=ConsoleColor.Black;
                      
                      Console.SetCursorPosition(1,11);write(items[8].value[0],': ');
                      if game.item.arr[game.item.output-1].it.block then
                      begin
                        Console.ForegroundColor:=ConsoleColor.DarkGreen;
                        write(items[8].value[1]);
                      end
                      else
                      begin
                        Console.ForegroundColor:=ConsoleColor.Red;
                        write(items[8].value[2]);
                      end;
                      Console.ForegroundColor:=ConsoleColor.Black;
                      
                    end;
                  end;
                  3:
                  begin
                    Console.SetCursorPosition(1,8);write(items[9].value[0],': ');
                    if (game.item.arr[game.item.output-1].it.suspension>=0)
                    and (game.item.arr[game.item.output-1].it.suspension<=4) then
                    begin
                      case game.item.arr[game.item.output-1].it.suspension of
                        0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                        1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                        2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                        3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                        4: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                      end;
                      write(items[9].value[1+game.item.arr[game.item.output-1].it.suspension]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end;
                    Console.SetCursorPosition(1,9);write(items[7].value[0],': ');
                    
                    if (game.item.arr[game.item.output-1].it.travel>=balance.IFace.susptravel._0.min) and (game.item.arr[game.item.output-1].it.travel<=balance.IFace.susptravel._0.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                      if (game.item.arr[game.item.output-1].it.travel>=balance.IFace.susptravel._1.min) and (game.item.arr[game.item.output-1].it.travel<=balance.IFace.susptravel._1.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                      if (game.item.arr[game.item.output-1].it.travel>=balance.IFace.susptravel._2.min) and (game.item.arr[game.item.output-1].it.travel<=balance.IFace.susptravel._2.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                      if (game.item.arr[game.item.output-1].it.travel>=balance.IFace.susptravel._3.min) and (game.item.arr[game.item.output-1].it.travel<=balance.IFace.susptravel._3.max)
                        then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                    
                    write(game.item.arr[game.item.output-1].it.travel,' ',inter[0].face[11]);
                    Console.ForegroundColor:=ConsoleColor.Black;
                    
                    Console.SetCursorPosition(1,10);write(items[8].value[0],': ');
                    if game.item.arr[game.item.output-1].it.block then
                    begin
                      Console.ForegroundColor:=ConsoleColor.DarkGreen;
                      write(items[8].value[1]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=ConsoleColor.Red;
                      write(items[8].value[2]);
                    end;
                    Console.ForegroundColor:=ConsoleColor.Black;
                  end;
                  5:
                  begin
                    Console.SetCursorPosition(1,8);write(items[10].value[0],': ');
                    if (game.item.arr[game.item.output-1].it.sort>=0)
                    and (game.item.arr[game.item.output-1].it.sort<=2) then
                    begin
                      case game.item.arr[game.item.output-1].it.sort of
                        0: Console.ForegroundColor:=Balance.IFace.ruddertype._0;
                        1: Console.ForegroundColor:=Balance.IFace.ruddertype._1;
                        2: Console.ForegroundColor:=Balance.IFace.ruddertype._2;
                      end;
                      write(items[10].value[1+game.item.arr[game.item.output-1].it.sort]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end;
                  end;
                  4:
                  begin
                    Console.SetCursorPosition(1,8);write(items[11].value[0],': ');
                    
                    case game.item.arr[game.item.output-1].it.count of
                      1: Console.ForegroundColor:=Balance.IFace.backcount._1;
                      6: Console.ForegroundColor:=Balance.IFace.backcount._6;
                      7: Console.ForegroundColor:=Balance.IFace.backcount._7;
                      8: Console.ForegroundColor:=Balance.IFace.backcount._8;
                      9: Console.ForegroundColor:=Balance.IFace.backcount._9;
                      10: Console.ForegroundColor:=Balance.IFace.backcount._10;
                      11..9999: Console.ForegroundColor:=Balance.IFace.backcount._11;
                    end;
                    
                    write(game.item.arr[game.item.output-1].it.count,' ');
                    case game.item.arr[game.item.output-1].it.count mod 100 of
                      1,21,31,41,51,61,71,81,91: write(bikes[6].value[2]);
                      2..4,22..24,32..34,42..44,52..54,62..64,72..74,82..84,92..94: write(bikes[6].value[3]);
                      5..20,25..30,35..40,45..50,55..60,65..70,75..80,85..90,95..99: write(bikes[6].value[4]);
                    end;
                    
                    Console.ForegroundColor:=consolecolor.Black;
                    
                    Console.SetCursorPosition(1,9);write(items[11].value[1],': ');
                    if not game.item.arr[game.item.output-1].it.fores then
                    begin
                      Console.ForegroundColor:=Balance.IFace.forecount._1;
                      write('1 ',items[11].value[2]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=Balance.IFace.forecount._3;
                      write('3 ',items[11].value[3]);
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                  end;
                  6:
                  begin
                    Console.SetCursorPosition(1,8);write(items[12].value[0],': ');
                    if (game.item.arr[game.item.output-1].it.sort>=1)
                    and (game.item.arr[game.item.output-1].it.sort<=3) then
                    begin
                      case game.item.arr[game.item.output-1].it.sort of
                        1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                        2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                        3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                      end;
                      write(items[12].value[game.item.arr[game.item.output-1].it.sort]);
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,9);write(items[12].value[4],': ');
                    var marker:= game.item.arr[game.item.output-1].it.effection/game.item.arr[game.item.output-1].it.maxeffection;
                    if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                    begin
                      Console.ForegroundColor:=balance.status._verygood.color;
                      write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                    begin
                      Console.ForegroundColor:=balance.status._good.color;
                      write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                    begin
                      Console.ForegroundColor:=balance.status._normal.color;
                      write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    if (marker>balance.bk.allbreak.minimal) and (marker<balance.status._bad.max) then
                    begin
                      Console.ForegroundColor:=balance.status._bad.color;
                      write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    if (marker<=balance.bk.allbreak.minimal) then
                    begin
                      Console.ForegroundColor:=balance.status._verybad.color;
                      write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                  end;
                  7:
                  begin
                    Console.SetCursorPosition(1,8);write(items[13].value[0],': ');
                    if game.item.arr[game.item.output-1].it.needles=balance.bk.wheel.needle.maximum then Console.ForegroundColor:=consolecolor.DarkBlue
                    else if game.item.arr[game.item.output-1].it.needles>=balance.bk.wheel.needle.average then Console.ForegroundColor:=consolecolor.DarkGreen
                    else if game.item.arr[game.item.output-1].it.needles>=balance.bk.wheel.needle.minimum then Console.ForegroundColor:=consolecolor.DarkYellow
                    else Console.ForegroundColor:=consolecolor.Red;
                    write(game.item.arr[game.item.output-1].it.needles,' ');
                    case game.item.arr[game.item.output-1].it.needles mod 100 of
                      1,21,31: write(items[13].value[1]);
                      2..4,22..24,32: write(items[13].value[2]);
                      0,5..20,25..30: write(items[13].value[3]);
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                    Console.SetCursorPosition(1,9);write(items[14].value[0],': ');
                    if game.item.arr[game.item.output-1].it.camerahit then
                    begin
                      Console.ForegroundColor:=ConsoleColor.Red;
                      write(items[14].value[1]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=ConsoleColor.DarkGreen;
                      write(items[14].value[2]);
                    end;
                    Console.ForegroundColor:=ConsoleColor.Black;
                  end;
                  8:
                  begin
                    Console.SetCursorPosition(1,4);write(items[12].value[5],': ');
                    
                    if (game.item.arr[game.item.output-1].it.sort>=1) and (game.item.arr[game.item.output-1].it.sort<=3) then
                    begin
                      case game.item.arr[game.item.output-1].it.sort of
                        1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                        2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                        3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                      end;
                      write(items[12].value[5+game.item.arr[game.item.output-1].it.sort]);
                      Console.ForegroundColor:=ConsoleColor.Black;
                    end;
                    
                    Console.SetCursorPosition(1,5);write(items[12].value[4],': ');
                    var marker:= game.item.arr[game.item.output-1].it.effection/game.item.arr[game.item.output-1].it.maxeffection;
                    if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                    begin
                      Console.ForegroundColor:=balance.status._verygood.color;
                      write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                    begin
                      Console.ForegroundColor:=balance.status._good.color;
                      write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                    begin
                      Console.ForegroundColor:=balance.status._normal.color;
                      write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    if (marker>balance.bk.allbreak.minimal) and (marker<balance.status._bad.max) then
                    begin
                      Console.ForegroundColor:=balance.status._bad.color;
                      write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    if (marker<=balance.bk.allbreak.minimal) then
                    begin
                      Console.ForegroundColor:=balance.status._verybad.color;
                      write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                    end;
                    Console.ForegroundColor:=consolecolor.Black;
                  end;
                end;
                
                if (game.item.arr[game.item.output-1].it.tpsort>=1)
                and (game.item.arr[game.item.output-1].it.tpsort<=12)
                and (game.item.arr[game.item.output-1].it.tpsort<>11)
                and (game.item.arr[game.item.output-1].it.tpsort<>10) then
                begin
                  Console.SetCursorPosition(1,KTX.maxy-7);
                  write('(1) ',items[15].value[0]);
                  if map[player.position].apartment.apartment then
                  begin
                    Console.SetCursorPosition(1,KTX.maxy-6);
                    write('(2) ',items[15].value[1]);
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    Console.SetCursorPosition(1,KTX.maxy-6);
                    write('(2) ',items[15].value[1]);
                  end;
                  Console.ForegroundColor:=consolecolor.Black;
                  
                  Console.SetCursorPosition(1,KTX.maxy-5);
                  write('(3) ',items[15].value[2]);
                end
                else if (game.item.arr[game.item.output-1].it.tpsort=10) then
                begin
                  if map[player.position].apartment.apartment then
                  begin
                    Console.SetCursorPosition(1,KTX.maxy-5);
                    write('(1) ',items[15].value[1]);
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    Console.SetCursorPosition(1,KTX.maxy-5);
                    write('(1) ',items[15].value[1]);
                  end;
                  Console.ForegroundColor:=consolecolor.Black;
                end
                else if (game.item.arr[game.item.output-1].it.tpsort=11) then
                begin
                  if game.item.arr[game.item.output-1].it.town=player.position then
                  begin
                    Console.SetCursorPosition(1,KTX.maxy-5);
                    write('(1) ',items[16].value[0]);
                  end
                  else
                  begin
                    Console.ForegroundColor:=consolecolor.Gray;
                    Console.SetCursorPosition(1,KTX.maxy-5);
                    write('(1) ',items[16].value[0]);
                  end;
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                {$endregion}
                
                if (game.item.arr[game.item.output-1].it.tpsort>=1)
                and (game.item.arr[game.item.output-1].it.tpsort<=12) then
                begin
                  Console.SetCursorPosition(1,KTX.maxy-4);
                  write('(0) ',inter[0].face[5]);
                end;
                
                KTX.read_1;
                while (game.item.item.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.item.item.input);
                end;
                KTX.read_0;
                
                if game.item.item.input.Left(1)='/' then con(game.item.item.input);
                if game.item.item.input='0' then game.item.item.output:=0;
                if (game.item.arr[game.item.output-1].it.tpsort>=1)
                and (game.item.arr[game.item.output-1].it.tpsort<=12)
                and (game.item.arr[game.item.output-1].it.tpsort<>11)
                and (game.item.arr[game.item.output-1].it.tpsort<>10)
                and (game.item.item.input='1') then game.item.item.output:=1;
                
                if (game.item.arr[game.item.output-1].it.tpsort>=1)
                and (game.item.arr[game.item.output-1].it.tpsort<=12)
                and (game.item.arr[game.item.output-1].it.tpsort<>11)
                and (game.item.arr[game.item.output-1].it.tpsort<>10)
                and (map[player.position].apartment.apartment)
                and (game.item.item.input='2') then game.item.item.output:=2;
                
                if (game.item.arr[game.item.output-1].it.tpsort>=1)
                and (game.item.arr[game.item.output-1].it.tpsort<=12)
                and (game.item.arr[game.item.output-1].it.tpsort<>11)
                and (game.item.arr[game.item.output-1].it.tpsort<>10)
                and (game.item.item.input='3') then game.item.item.output:=3;
                
                if (game.item.arr[game.item.output-1].it.tpsort=10)
                and (map[player.position].apartment.apartment)
                and (game.item.item.input='1') then game.item.item.output:=2;
                
                if (game.item.arr[game.item.output-1].it.tpsort=11)
                and (game.item.item.input='1') 
                and (player.position=game.item.arr[game.item.output-1].it.town) then game.item.item.output:=4;
                
                if game.item.item.output=0 then game.item.item.status:=false;
                
                //To Bike
                if game.item.item.output=1 then
                {$region BikeReplace}
                begin
                  game.item.item.sets.status:=true;
                  while game.item.item.sets.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(game.item.item.sets.output, game.item.item.sets.input);upface;
                    {$region ITEMES}
                    
                    var g_item:=game.item.arr[game.item.output-1].it;
                    
                    if (g_item.tpsort=1) then
                    begin
                      if (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) then
                      begin
                        if (allveight(player.bike.frame.veight,-g_item.veight,player.bike.bsusp.veight)<=player.maxveight) then
                        begin
                          if (player.energy>=(balance.timing.it_framing.energy+balance.timing.bsusp_demontage.energy)) then
                          begin
                            Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                            Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                            Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                          end
                          else
                          begin
                            Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                            Console.ForegroundColor:=consolecolor.Gray;
                            Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',items[0].value[7],')');
                            Console.ForegroundColor:=consolecolor.Black;
                            
                            Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                          end;
                        end
                        else
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                          Console.ForegroundColor:=consolecolor.Gray;
                          Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[0],')');
                          Console.ForegroundColor:=consolecolor.Black;
                          
                          Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                        end;
                      end
                      else
                      begin
                        if (allveight(player.bike.frame.veight,-g_item.veight)<=player.maxveight) then
                        begin
                          if (player.energy>=(balance.timing.it_framing.energy)) then
                          begin
                            Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                            Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                            Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                          end
                          else
                          begin
                            Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                            Console.ForegroundColor:=consolecolor.Gray;
                            Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',items[0].value[7],')');
                            Console.ForegroundColor:=consolecolor.Black;
                            
                            Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                          end;
                        end
                        else
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                          Console.ForegroundColor:=consolecolor.Gray;
                          Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[0],')');
                          Console.ForegroundColor:=consolecolor.Black;
                          
                          Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                        end;
                      end;
                    end;
                    
                    if (g_item.tpsort=2) then
                    begin
                      if (allveight(player.bike.fork.veight,-g_item.veight)<=player.maxveight) then
                      begin
                        if (player.energy>=(balance.timing.it_forking.energy)) then
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[3],'?');
                          Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                          Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                        end
                        else
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[3],'?');
                          Console.ForegroundColor:=consolecolor.Gray;
                          Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[7],')');
                          Console.ForegroundColor:=consolecolor.Black;
                          
                          Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                        end;
                      end
                      else
                      begin
                        Console.SetCursorPosition(1,2);write(items[17].value[3],'?');
                        Console.ForegroundColor:=consolecolor.Gray;
                        Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[0].value[0],')');
                        Console.ForegroundColor:=consolecolor.Black;
                        
                        Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                      end;
                    end;
                    
                    if (g_item.tpsort=3) then
                    begin
                      if player.bike.frame.suspensionflag then
                      begin
                        if (not player.bike.bsusp.flag) and (player.bike.bsusp.veight<>0) then player.bike.bsusp.veight:=0;
                        if (allveight(player.bike.bsusp.veight,-g_item.veight)<=player.maxveight) then
                        begin
                          if ((player.energy>=(balance.timing.it_bsusping.energy)) and (not player.bike.bsusp.flag))
                          or ((player.energy>=(balance.timing.it_bsusping.energy+balance.timing.bsusp_demontage.energy)) and (player.bike.bsusp.flag)) then
                          begin
                            Console.SetCursorPosition(1,2);
                            if player.bike.bsusp.flag then
                              write(items[17].value[4],'?')
                            else write(items[17].value[5],'?');
                            
                            Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                            Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                          end
                          else
                          begin
                            Console.SetCursorPosition(1,2);
                            if player.bike.bsusp.flag then
                              write(items[17].value[4],'?')
                            else write(items[17].value[5],'?');
                            
                            Console.ForegroundColor:=consolecolor.Gray;
                            Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',items[0].value[7],')');
                            Console.ForegroundColor:=consolecolor.Black;
                            
                            Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                          end;
                        end
                        else
                        begin
                          Console.SetCursorPosition(1,2);
                          if player.bike.bsusp.flag then
                            write(items[17].value[4],'?')
                          else write(items[17].value[5],'?');
                          
                          Console.ForegroundColor:=consolecolor.Gray;
                          Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[0],')');
                          Console.ForegroundColor:=consolecolor.Black;
                          
                          Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                        end;
                      end
                      else
                      begin
                        Console.SetCursorPosition(1,2);write(items[17].value[5],'?');
                        
                        Console.ForegroundColor:=consolecolor.Gray;
                        Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[17].value[24],')');
                        Console.ForegroundColor:=consolecolor.Black;
                        
                        Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                      end;
                    end;
                    
                    if (g_item.tpsort=4) then
                    begin
                      if (allveight(player.bike.transmission.veight,-g_item.veight)<=player.maxveight) then
                      begin
                        if (player.energy>=(balance.timing.it_transing.energy)) then
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[6],'?');
                          Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                          Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                        end
                        else
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[6],'?');
                          Console.ForegroundColor:=consolecolor.Gray;
                          Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[7],')');
                          Console.ForegroundColor:=consolecolor.Black;
                          
                          Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                        end;
                      end
                      else
                      begin
                        Console.SetCursorPosition(1,2);write(items[17].value[6],'?');
                        Console.ForegroundColor:=consolecolor.Gray;
                        Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[0].value[0],')');
                        Console.ForegroundColor:=consolecolor.Black;
                        
                        Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                      end;
                    end;
                    
                    if (g_item.tpsort=5) then
                    begin
                      if (allveight(player.bike.rudder.veight,-g_item.veight)<=player.maxveight) then
                      begin
                        if (player.energy>=(balance.timing.it_ruddering.energy)) then
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[7],'?');
                          Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                          Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                        end
                        else
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[7],'?');
                          Console.ForegroundColor:=consolecolor.Gray;
                          Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[7],')');
                          Console.ForegroundColor:=consolecolor.Black;
                          
                          Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                        end;
                      end
                      else
                      begin
                        Console.SetCursorPosition(1,2);write(items[17].value[7],'?');
                        Console.ForegroundColor:=consolecolor.Gray;
                        Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[0].value[0],')');
                        Console.ForegroundColor:=consolecolor.Black;
                        
                        Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                      end;
                    end;
                    
                    if (g_item.tpsort=6) then
                    begin
                      if (not player.bike.backbreak.flag) and (player.bike.backbreak.veight<>0) then player.bike.backbreak.veight:=0;
                      if (not player.bike.frontbreak.flag) and (player.bike.frontbreak.veight<>0) then player.bike.frontbreak.veight:=0;
                      
                      Console.SetCursorPosition(1,2);write(items[17].value[8],'?');
                      
                      Console.SetCursorPosition(1,4);
                      if (allveight(player.bike.backbreak.veight,-g_item.veight)<=player.maxveight) then
                      begin
                        if ((player.bike.backbreak.flag) and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy))
                        or ((not player.bike.backbreak.flag) and (player.energy>=balance.timing.it_breaking.energy)) then
                        begin
                          write('(1) ',items[17].value[9]);
                          if (player.bike.backbreak.flag) then write(' (',items[17].value[12],')') else write(' (',items[17].value[13],')');
                        end
                        else
                        begin
                          Console.ForegroundColor:=consolecolor.Gray;
                          write('(1) ',items[17].value[9]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[7],')');
                          Console.ForegroundColor:=consolecolor.Black;
                        end;
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.Gray;
                        write('(1) ',items[17].value[9]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[0].value[0],')');
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      
                      Console.SetCursorPosition(1,5);
                      if (allveight(player.bike.frontbreak.veight,-g_item.veight)<=player.maxveight) then
                      begin
                        if ((player.bike.frontbreak.flag) and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy))
                        or ((not player.bike.frontbreak.flag) and (player.energy>=balance.timing.it_breaking.energy)) then
                        begin
                          write('(2) ',items[17].value[10]);
                          if (player.bike.frontbreak.flag) then write(' (',items[17].value[12],')') else write(' (',items[17].value[13],')');
                        end
                        else
                        begin
                          Console.ForegroundColor:=consolecolor.Gray;
                          write('(2) ',items[17].value[10]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[7],')');
                          Console.ForegroundColor:=consolecolor.Black;
                        end;
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.Gray;
                        write('(2) ',items[17].value[10]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[0].value[0],')');
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      
                      Console.SetCursorPosition(1,6);
                      write('(0) ',items[17].value[11]);
                    end;
                    
                    if (g_item.tpsort=7) then
                    begin
                      Console.SetCursorPosition(1,2);write(items[17].value[14],'?');
                      
                      Console.SetCursorPosition(1,4);
                      if (allveight(player.bike.backwheel.veight,-g_item.veight)<=player.maxveight) then
                      begin
                        if (player.energy>=balance.timing.it_wheeling.energy) then
                        begin
                          write('(1) ',items[17].value[15]);
                        end
                        else
                        begin
                          Console.ForegroundColor:=consolecolor.Gray;
                          write('(1) ',items[17].value[15]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[7],')');
                          Console.ForegroundColor:=consolecolor.Black;
                        end;
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.Gray;
                        write('(1) ',items[17].value[15]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[0].value[0],')');
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      
                      Console.SetCursorPosition(1,5);
                      if (allveight(player.bike.frontwheel.veight,-g_item.veight)<=player.maxveight) then
                      begin
                        if (player.energy>=balance.timing.it_wheeling.energy) then
                        begin
                          write('(2) ',items[17].value[16]);
                        end
                        else
                        begin
                          Console.ForegroundColor:=consolecolor.Gray;
                          write('(2) ',items[17].value[16]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[7],')');
                          Console.ForegroundColor:=consolecolor.Black;
                        end;
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.Gray;
                        write('(2) ',items[17].value[16]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[0].value[0],')');
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      
                      Console.SetCursorPosition(1,6);write('(0) ',items[17].value[17]);
                    end;
                    
                    if (g_item.tpsort=8) then
                    begin
                      Console.SetCursorPosition(1,2);write(items[17].value[18],'?');
                      
                      Console.SetCursorPosition(1,4);
                      if (player.bike.backbreak.flag) then
                      begin
                        if (g_item.sort=player.bike.backbreak.sort) then
                        begin
                          if (player.energy>=balance.timing.it_breakcarding.energy) then
                          begin
                            write('(1) ',items[17].value[19]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',items[17].value[19]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',items[0].value[7],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                        end
                        else
                        begin
                          Console.ForegroundColor:=consolecolor.Gray;
                          write('(1) ',items[17].value[19]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[17].value[23],')');
                          Console.ForegroundColor:=consolecolor.Black;
                        end;
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.Gray;
                        write('(1) ',items[17].value[19]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[17].value[22],')');
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      
                      Console.SetCursorPosition(1,5);
                      if (player.bike.frontbreak.flag) then
                      begin
                        if (g_item.sort=player.bike.frontbreak.sort) then
                        begin
                          if (player.energy>=balance.timing.it_breakcarding.energy) then
                          begin
                            write('(2) ',items[17].value[20]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(2) ',items[17].value[20]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',items[0].value[7],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                        end
                        else
                        begin
                          Console.ForegroundColor:=consolecolor.Gray;
                          write('(2) ',items[17].value[20]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[17].value[23],')');
                          Console.ForegroundColor:=consolecolor.Black;
                        end;
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.Gray;
                        write('(2) ',items[17].value[20]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[17].value[22],')');
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      
                      Console.SetCursorPosition(1,6);write('(0) ',items[17].value[21]);
                    end;
                    
                    
                    KTX.read_1;
                    while (game.item.item.sets.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(game.item.item.sets.input);
                    end;
                    KTX.read_0;
                    
                    if game.item.item.sets.input.Left(1)='/' then con(game.item.item.sets.input);
                    
                    if game.item.item.sets.input='0' then game.item.item.sets.output:=0;
                    
                    if (game.item.item.sets.input='1')
                    and ((g_item.tpsort=6) and ((allveight(player.bike.backbreak.veight,g_item.veight*(-1))<=player.maxveight)))
                    and (((player.bike.frontbreak.flag) and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy))
                    or ((not player.bike.frontbreak.flag) and (player.energy>=balance.timing.it_breaking.energy)))
                    then game.item.item.sets.output:=1;
                    
                    if (game.item.item.sets.input='2')
                    and ((g_item.tpsort=6) and ((allveight(player.bike.frontbreak.veight,g_item.veight*(-1))<=player.maxveight)))
                    and (((player.bike.frontbreak.flag) and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy))
                    or ((not player.bike.frontbreak.flag) and (player.energy>=balance.timing.it_breaking.energy)))
                    then game.item.item.sets.output:=2;
                    
                    if (game.item.item.sets.input='1')
                    and ((g_item.tpsort=8) and ((player.bike.backbreak.flag) and (player.bike.backbreak.sort=g_item.sort)))
                    and (player.energy>=balance.timing.it_breakcarding.energy)
                    then game.item.item.sets.output:=3;
                    
                    if (game.item.item.sets.input='2')
                    and ((g_item.tpsort=8) and ((player.bike.frontbreak.flag) and (player.bike.frontbreak.sort=g_item.sort)))
                    and (player.energy>=balance.timing.it_breakcarding.energy)
                    then game.item.item.sets.output:=4;
                    
                    if (game.item.item.sets.input='1') and (allveight(player.bike.backwheel.veight,g_item.veight*(-1))<=player.maxveight)
                    and (g_item.tpsort=7) and (player.energy>=balance.timing.it_wheeling.energy) then game.item.item.sets.output:=5;
                    
                    if (game.item.item.sets.input='2') and (allveight(player.bike.frontwheel.veight,g_item.veight*(-1))<=player.maxveight)
                    and (g_item.tpsort=7) and (player.energy>=balance.timing.it_wheeling.energy) then game.item.item.sets.output:=6;
                    
                    if (game.item.item.sets.input='1') and (g_item.tpsort=1) then
                    begin
                      if (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) then
                      begin
                        if (allveight(player.bike.frame.veight,-g_item.veight,player.bike.bsusp.veight)<=player.maxveight)
                        and (player.energy>=(balance.timing.it_framing.energy+balance.timing.bsusp_demontage.energy)) then game.item.item.sets.output:=-7;
                      end
                      else
                      begin
                        if (allveight(player.bike.frame.veight,-g_item.veight)<=player.maxveight)
                        and (player.energy>=balance.timing.it_framing.energy) then game.item.item.sets.output:=7;
                      end;
                    end;
                    
                    
                    
                    {
                    if (game.item.item.sets.input='1') and (g_item.tpsort=1)
                    
                    and ((((player.bike.frame.suspensionflag) and (player.bike.bsusp.flag))
                    
                    and (allveight(player.bike.frame.veight,-g_item.veight)<=player.maxveight)
                    and (player.energy>=balance.timing.it_framing.energy) 
                    
                    ) or (((player.bike.frame.suspensionflag) and (player.bike.bsusp.flag))
                    
                    
                    ))
                    then game.item.item.sets.output:=7;}
                    
                    if (game.item.item.sets.input='1') and (g_item.tpsort=2)
                    and (allveight(player.bike.fork.veight,-g_item.veight)<=player.maxveight)
                    and (player.energy>=balance.timing.it_forking.energy) then game.item.item.sets.output:=8;
                    
                    if (game.item.item.sets.input='1') and (g_item.tpsort=3)
                    and (allveight(player.bike.bsusp.veight,-g_item.veight)<=player.maxveight)
                    and (((player.energy>=balance.timing.it_bsusping.energy) and (not player.bike.bsusp.flag))
                    or ((player.energy>=balance.timing.it_bsusping.energy+balance.timing.bsusp_demontage.energy) and (player.bike.bsusp.flag)))
                    and (player.bike.frame.suspensionflag) then game.item.item.sets.output:=9;
                    
                    if (game.item.item.sets.input='1') and (g_item.tpsort=4)
                    and (allveight(player.bike.transmission.veight,-g_item.veight)<=player.maxveight)
                    and (player.energy>=balance.timing.it_transing.energy) then game.item.item.sets.output:=10;
                    
                    if (game.item.item.sets.input='1') and (g_item.tpsort=5)
                    and (allveight(player.bike.rudder.veight,-g_item.veight)<=player.maxveight)
                    and (player.energy>=balance.timing.it_ruddering.energy) then game.item.item.sets.output:=11;
                    {$endregion}

                    {
                    //OUTPUTS:
                          0 - Exit
                          1 - Back Break
                          2 - Front Break
                          3 - Back BCards
                          4 - Front BCards
                          5 - Back Wheel
                          6 - Front Wheel
                          
                          -7 - Frame with suspension
                          7 - Frame
                          8 - Fork
                          9 - BackSuspension
                          10 - Transmission
                          11 - Rudder
                    }
                     
                    if game.item.item.sets.output=0 then
                    begin
                      game.item.item.sets.status:=false;
                    end;
                    
                    {$region BackBreak}
                    if game.item.item.sets.output=1 then
                    begin
                      if player.bike.backbreak.flag then
                      begin
                        looping(balance.timing.break_demontage,bikes[8].value[6]);
                        var subtp: TItem;
                        subtp.tpsort:=6;
                        subtp.name:=player.bike.backbreak.name;
                        subtp.sort:=player.bike.backbreak.sort;
                        subtp.effection:=player.bike.backbreak.effection;
                        subtp.maxeffection:=player.bike.backbreak.maxeffection;
                        subtp.hitpoints:=player.bike.backbreak.hitpoints;
                        subtp.maxhitpoints:=player.bike.backbreak.maxhitpoints;
                        subtp.price:=player.bike.backbreak.price;
                        subtp.veight:=player.bike.backbreak.veight;
                        AddItem(subtp);
                      end;
                      
                      looping(balance.timing.it_breaking,items[18].value[0]);
                      player.bike.backbreak.flag:=true;
                      player.bike.backbreak.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.backbreak.sort:=game.item.arr[game.item.output-1].it.sort;
                      player.bike.backbreak.effection:=game.item.arr[game.item.output-1].it.effection;
                      player.bike.backbreak.maxeffection:=game.item.arr[game.item.output-1].it.maxeffection;
                      player.bike.backbreak.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.backbreak.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.backbreak.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.backbreak.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      if svg.autosave then save;
                      
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region FrontBreak}
                    if game.item.item.sets.output=2 then
                    begin
                    
                      if player.bike.frontbreak.flag then
                      begin
                        looping(balance.timing.break_demontage,bikes[8].value[7]);
                        var subtp: TItem;
                        subtp.tpsort:=6;
                        subtp.name:=player.bike.frontbreak.name;
                        subtp.sort:=player.bike.frontbreak.sort;
                        subtp.effection:=player.bike.frontbreak.effection;
                        subtp.maxeffection:=player.bike.frontbreak.maxeffection;
                        subtp.hitpoints:=player.bike.frontbreak.hitpoints;
                        subtp.maxhitpoints:=player.bike.frontbreak.maxhitpoints;
                        subtp.price:=player.bike.frontbreak.price;
                        subtp.veight:=player.bike.frontbreak.veight;
                        AddItem(subtp);
                      end;
                      
                      looping(balance.timing.it_breaking,items[18].value[1]);
                      player.bike.frontbreak.flag:=true;
                      player.bike.frontbreak.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.frontbreak.sort:=game.item.arr[game.item.output-1].it.sort;
                      player.bike.frontbreak.effection:=game.item.arr[game.item.output-1].it.effection;
                      player.bike.frontbreak.maxeffection:=game.item.arr[game.item.output-1].it.maxeffection;
                      player.bike.frontbreak.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.frontbreak.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.frontbreak.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.frontbreak.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      if svg.autosave then save;
                      
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region BackBCards}
                    if game.item.item.sets.output=3 then
                    begin
                      looping(balance.timing.it_breakcarding,items[18].value[2]);
                      
                      var subtp: TItem;
                      subtp.tpsort:=8;
                      subtp.name:=player.bike.backbreak.cardname;
                      subtp.cardname:=player.bike.backbreak.cardname;
                      subtp.sort:=player.bike.backbreak.sort;
                      subtp.effection:=player.bike.backbreak.effection;
                      subtp.maxeffection:=player.bike.backbreak.maxeffection;
                      AddItem(subtp);
                      
                      player.bike.backbreak.cardname:=game.item.arr[game.item.output-1].it.name;
                      player.bike.backbreak.effection:=game.item.arr[game.item.output-1].it.effection;
                      player.bike.backbreak.maxeffection:=game.item.arr[game.item.output-1].it.maxeffection;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      if svg.autosave then save;
                      
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region FrontBCards}
                    if game.item.item.sets.output=4 then
                    begin
                      looping(balance.timing.it_breakcarding,items[18].value[3]);
                      
                      var subtp: TItem;
                      subtp.tpsort:=8;
                      subtp.name:=player.bike.frontbreak.cardname;
                      subtp.cardname:=player.bike.frontbreak.cardname;
                      subtp.sort:=player.bike.frontbreak.sort;
                      subtp.effection:=player.bike.frontbreak.effection;
                      subtp.maxeffection:=player.bike.frontbreak.maxeffection;
                      AddItem(subtp);
                      
                      player.bike.frontbreak.cardname:=game.item.arr[game.item.output-1].it.name;
                      player.bike.frontbreak.effection:=game.item.arr[game.item.output-1].it.effection;
                      player.bike.frontbreak.maxeffection:=game.item.arr[game.item.output-1].it.maxeffection;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      if svg.autosave then save;
                      
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region BackWheel}
                    if game.item.item.sets.output=5 then
                    begin
                      looping(balance.timing.it_wheeling,items[18].value[4]);
                      
                      var subtp: TItem;
                      subtp.tpsort:=7;
                      subtp.name:=player.bike.backwheel.name;
                      subtp.camerahit:=player.bike.backwheel.camerahit;
                      subtp.needles:=player.bike.backwheel.needles;
                      subtp.hitpoints:=player.bike.backwheel.hitpoints;
                      subtp.maxhitpoints:=player.bike.backwheel.maxhitpoints;
                      subtp.price:=player.bike.backwheel.price;
                      subtp.veight:=player.bike.backwheel.veight;
                      AddItem(subtp);
                      
                      player.bike.backwheel.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.backwheel.camerahit:=game.item.arr[game.item.output-1].it.camerahit;
                      player.bike.backwheel.needles:=game.item.arr[game.item.output-1].it.needles;
                      player.bike.backwheel.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.backwheel.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.backwheel.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.backwheel.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      player.bike.backwheel.pressure:=0;
                      
                      if svg.autosave then save;
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                      
                    end;{$endregion}
                    
                    {$region FrontWheel}
                    if game.item.item.sets.output=6 then
                    begin
                      looping(balance.timing.it_wheeling,items[18].value[5]);
                      
                      var subtp: TItem;
                      subtp.tpsort:=7;
                      subtp.name:=player.bike.frontwheel.name;
                      subtp.camerahit:=player.bike.frontwheel.camerahit;
                      subtp.needles:=player.bike.frontwheel.needles;
                      subtp.hitpoints:=player.bike.frontwheel.hitpoints;
                      subtp.maxhitpoints:=player.bike.frontwheel.maxhitpoints;
                      subtp.price:=player.bike.frontwheel.price;
                      subtp.veight:=player.bike.frontwheel.veight;
                      AddItem(subtp);
                      
                      player.bike.frontwheel.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.frontwheel.camerahit:=game.item.arr[game.item.output-1].it.camerahit;
                      player.bike.frontwheel.needles:=game.item.arr[game.item.output-1].it.needles;
                      player.bike.frontwheel.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.frontwheel.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.frontwheel.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.frontwheel.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      player.bike.frontwheel.pressure:=0;
                      
                      if svg.autosave then save;
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region FRAME with suspension}
                    if game.item.item.sets.output=-7 then
                    begin
                      looping(balance.timing.bsusp_demontage,bikes[5].value[10]);
                      looping(balance.timing.it_framing,items[18].value[6]);
                      
                      var subtp1: TItem;
                      subtp1.tpsort:=1;
                      subtp1.name:=player.bike.frame.name;
                      subtp1.material:=player.bike.frame.material;
                      subtp1.suspensionflag:=player.bike.frame.suspensionflag;
                      
                      subtp1.hitpoints:=player.bike.frame.hitpoints;
                      subtp1.maxhitpoints:=player.bike.frame.maxhitpoints;
                      subtp1.price:=player.bike.frame.price;
                      subtp1.veight:=player.bike.frame.veight;
                      AddItem(subtp1);
                      
                      var subtp2: TItem;
                      subtp2.tpsort:=3;
                      subtp2.name:=player.bike.bsusp.name;
                      subtp2.suspension:=player.bike.bsusp.suspension;
                      subtp2.travel:=player.bike.bsusp.travel;
                      subtp2.block:=player.bike.bsusp.block;
                      
                      subtp2.hitpoints:=player.bike.bsusp.hitpoints;
                      subtp2.maxhitpoints:=player.bike.bsusp.maxhitpoints;
                      subtp2.price:=player.bike.bsusp.price;
                      subtp2.veight:=player.bike.bsusp.veight;
                      AddItem(subtp2);
                      
                      player.bike.bsusp.flag:=false;
                      
                      player.bike.frame.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.frame.material:=game.item.arr[game.item.output-1].it.material;
                      player.bike.frame.suspensionflag:=game.item.arr[game.item.output-1].it.suspensionflag;
                      player.bike.frame.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.frame.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.frame.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.frame.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      
                      if svg.autosave then save;
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region FRAME without suspension}
                    if game.item.item.sets.output=7 then
                    begin
                      looping(balance.timing.it_framing,items[18].value[6]);
                      
                      var subtp: TItem;
                      subtp.tpsort:=1;
                      subtp.name:=player.bike.frame.name;
                      subtp.material:=player.bike.frame.material;
                      subtp.suspensionflag:=player.bike.frame.suspensionflag;
                      
                      subtp.hitpoints:=player.bike.frame.hitpoints;
                      subtp.maxhitpoints:=player.bike.frame.maxhitpoints;
                      subtp.price:=player.bike.frame.price;
                      subtp.veight:=player.bike.frame.veight;
                      AddItem(subtp);
                      
                      player.bike.frame.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.frame.material:=game.item.arr[game.item.output-1].it.material;
                      player.bike.frame.suspensionflag:=game.item.arr[game.item.output-1].it.suspensionflag;
                      player.bike.frame.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.frame.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.frame.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.frame.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      
                      if svg.autosave then save;
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region FORK}
                    if game.item.item.sets.output=8 then
                    begin
                      looping(balance.timing.it_forking,items[18].value[7]);
                      
                      var subtp: TItem;
                      subtp.tpsort:=2;
                      subtp.name:=player.bike.fork.name;
                      subtp.suspensionflag:=player.bike.fork.suspensionflag;
                      if player.bike.fork.suspensionflag then
                      begin
                        subtp.suspension:=player.bike.fork.suspension;
                        subtp.travel:=player.bike.fork.travel;
                        subtp.block:=player.bike.fork.block;
                      end
                      else
                      begin
                        subtp.suspension:=0;
                        subtp.travel:=0;
                        subtp.block:=false;
                      end;
                      subtp.hitpoints:=player.bike.fork.hitpoints;
                      subtp.maxhitpoints:=player.bike.fork.maxhitpoints;
                      subtp.price:=player.bike.fork.price;
                      subtp.veight:=player.bike.fork.veight;
                      
                      
                      AddItem(subtp);
                      player.bike.fork.blocks:=false;
                      player.bike.fork.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.fork.suspensionflag:=game.item.arr[game.item.output-1].it.suspensionflag;
                      if game.item.arr[game.item.output-1].it.suspensionflag then
                      begin
                        player.bike.fork.block:=game.item.arr[game.item.output-1].it.block;
                        player.bike.fork.suspension:=game.item.arr[game.item.output-1].it.suspension;
                        player.bike.fork.travel:=game.item.arr[game.item.output-1].it.travel;
                      end;
                      player.bike.fork.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.fork.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.fork.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.fork.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      
                      if svg.autosave then save;
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region BSUSP}
                    if game.item.item.sets.output=9 then
                    begin
                      if player.bike.bsusp.flag then
                      begin
                        looping(balance.timing.bsusp_demontage,bikes[5].value[10]);
                        looping(balance.timing.it_bsusping,items[18].value[8]);
                      end
                      else
                      begin
                        looping(balance.timing.it_bsusping,items[18].value[8]);
                      end;
                      
                      if player.bike.bsusp.flag then
                      begin
                        var subtp: TItem;
                        subtp.tpsort:=3;
                        subtp.name:=player.bike.bsusp.name;
                        subtp.suspension:=player.bike.bsusp.suspension;
                        subtp.travel:=player.bike.bsusp.travel;
                        subtp.block:=player.bike.bsusp.block;
                          
                        subtp.hitpoints:=player.bike.bsusp.hitpoints;
                        subtp.maxhitpoints:=player.bike.bsusp.maxhitpoints;
                        subtp.price:=player.bike.bsusp.price;
                        subtp.veight:=player.bike.bsusp.veight;
                        
                        AddItem(subtp);
                      end;
                      
                      player.bike.bsusp.flag:=true;
                      player.bike.bsusp.blocks:=false;
                      
                      player.bike.bsusp.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.bsusp.block:=game.item.arr[game.item.output-1].it.block;
                      player.bike.bsusp.suspension:=game.item.arr[game.item.output-1].it.suspension;
                      player.bike.bsusp.travel:=game.item.arr[game.item.output-1].it.travel;
                      player.bike.bsusp.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.bsusp.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.bsusp.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.bsusp.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      
                      if svg.autosave then save;
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region TRANSMISSION}
                    if game.item.item.sets.output=10 then
                    begin
                      looping(balance.timing.it_transing,items[18].value[9]);
                      
                      var subtp: TItem;
                      subtp.tpsort:=4;
                      subtp.name:=player.bike.transmission.name;
                      subtp.count:=player.bike.transmission.count;
                      subtp.fores:=player.bike.transmission.fores;
                      
                      subtp.hitpoints:=player.bike.transmission.hitpoints;
                      subtp.maxhitpoints:=player.bike.transmission.maxhitpoints;
                      subtp.price:=player.bike.transmission.price;
                      subtp.veight:=player.bike.transmission.veight;
                      AddItem(subtp);
                      
                      player.bike.transmission.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.transmission.count:=game.item.arr[game.item.output-1].it.count;
                      player.bike.transmission.fores:=game.item.arr[game.item.output-1].it.fores;
                      player.bike.transmission.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.transmission.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.transmission.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.transmission.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      
                      if svg.autosave then save;
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                    {$region RUDDER}
                    if game.item.item.sets.output=11 then
                    begin
                      looping(balance.timing.it_ruddering,items[18].value[10]);
                      
                      var subtp: TItem;
                      subtp.tpsort:=5;
                      subtp.name:=player.bike.rudder.name;
                      subtp.sort:=player.bike.rudder.sort;
                      
                      subtp.hitpoints:=player.bike.rudder.hitpoints;
                      subtp.maxhitpoints:=player.bike.rudder.maxhitpoints;
                      subtp.price:=player.bike.rudder.price;
                      subtp.veight:=player.bike.rudder.veight;
                      AddItem(subtp);
                      
                      player.bike.rudder.name:=game.item.arr[game.item.output-1].it.name;
                      player.bike.rudder.sort:=game.item.arr[game.item.output-1].it.sort;
                      player.bike.rudder.hitpoints:=game.item.arr[game.item.output-1].it.hitpoints;
                      player.bike.rudder.maxhitpoints:=game.item.arr[game.item.output-1].it.maxhitpoints;
                      player.bike.rudder.price:=game.item.arr[game.item.output-1].it.price;
                      player.bike.rudder.veight:=game.item.arr[game.item.output-1].it.veight;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      
                      if svg.autosave then save;
                      game.item.item.sets.status:=false;
                      game.item.item.status:=false;
                    end;{$endregion}
                    
                  end;
                end;{$endregion}
                
                if game.item.item.output=2 then
                {$region ApartReplace}
                begin
                  game.item.item.replace.status:=true;
                  while game.item.item.replace.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(game.item.item.replace.output, game.item.item.replace.input);upface;
                    
                    Console.SetCursorPosition(1,2);write(items[19].value[0],'?');
                    
                    if player.energy>=balance.timing.it_replacing.energy then
                    begin
                      Console.SetCursorPosition(1,4);write('(1) ',items[19].value[1]);
                    end
                    else
                    begin
                      Console.ForegroundColor:=consolecolor.Gray;
                      Console.SetCursorPosition(1,4);write('(1) ',items[19].value[1]);
                      Console.ForegroundColor:=consolecolor.Red;
                      write(' (',items[0].value[7],')');
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    Console.SetCursorPosition(1,5);write('(0) ',items[19].value[2]);
                    
                    KTX.read_1;
                    while (game.item.item.replace.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(game.item.item.replace.input);
                    end;
                    KTX.read_0;
                    
                    if game.item.item.replace.input.Left(1)='/' then con(game.item.item.replace.input);
                    if game.item.item.replace.input='0' then game.item.item.replace.output:=0;
                    if (game.item.item.replace.input='1')
                    and (player.energy>=balance.timing.it_replacing.energy) then game.item.item.replace.output:=1;
                    
                    if game.item.item.replace.output=0 then
                    begin
                      game.item.item.replace.status:=false;
                    end;
                    
                    if game.item.item.replace.output=1 then
                    begin
                      looping(balance.timing.it_replacing,items[19].value[3]);
                      var it_cur: TItem = game.item.arr[game.item.output-1].it;
                      
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      ap_AddItem(player.position,it_cur);
                      
                      if svg.autosave then save;
                      game.item.item.replace.status:=false;
                      game.item.item.status:=false;
                    end;
                    
                  end;
                end;{$endregion}
                
                if game.item.item.output=3 then
                {$region Trash}
                begin
                  game.item.item.drop.status:=true;
                  while game.item.item.drop.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(game.item.item.drop.output, game.item.item.drop.input);upface;
                    
                    Console.SetCursorPosition(1,2);write(items[20].value[0],' ');
                    case game.item.arr[game.item.output-1].it.tpsort of
                      1..8: write(items[20].value[game.item.arr[game.item.output-1].it.tpsort+2],' ');
                    end;
                    write(game.item.arr[game.item.output-1].it.name);write('?');
                    
                    Console.SetCursorPosition(1,4);write('(1) ',items[20].value[1]);
                    Console.SetCursorPosition(1,5);write('(0) ',items[20].value[2]);
                    
                    KTX.read_1;
                    while (game.item.item.drop.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(game.item.item.drop.input);
                    end;
                    KTX.read_0;
                    
                    if game.item.item.drop.input.Left(1)='/' then con(game.item.item.drop.input);
                    
                    if game.item.item.drop.input='0' then game.item.item.drop.output:=0;
                    if game.item.item.drop.input='1' then game.item.item.drop.output:=1;
                    
                    if game.item.item.drop.output=0 then
                    begin
                      game.item.item.drop.status:=false;
                    end;
                    
                    if game.item.item.drop.output=1 then
                    begin
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      game.item.item.drop.status:=false;
                      game.item.item.status:=false;
                      if svg.autosave then save;
                    end;
                    
                  end;
                end;{$endregion}
                
                if game.item.item.output=4 then
                {$region Sends}
                begin
                  game.item.item.send.status:=true;
                  while game.item.item.send.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(game.item.item.send.output, game.item.item.send.input);upface;
                    
                    var send_tm: DateTime = new DateTime(player.time.Ticks-game.item.arr[game.item.output-1].it.timeStart.Ticks);
                    if send_tm.Ticks >= TimeSpan.TicksPerDay then
                      send_tm:=send_tm.AddDays(-1);
                    var pcent: real = 1-((player.time.Ticks-game.item.arr[game.item.output-1].it.timeStart.Ticks)/(game.item.arr[game.item.output-1].it.timeMax.Ticks-game.item.arr[game.item.output-1].it.timeStart.Ticks));
                    var rb:=Round(game.item.arr[game.item.output-1].it.price*pcent);
                    
                    Console.SetCursorPosition(1,2);write(items[21].value[0],' ');
                    write(send_tm.Day,' ');
                    case send_tm.Day mod 100 of
                      1,21,31: write(items[21].value[1]);
                      2..4,22..24: write(items[21].value[2]);
                      0,5..20,25..30: write(items[21].value[3]);
                    end;write(' ');
                    
                    write(send_tm.Hour,' ');
                    case send_tm.Hour mod 100 of
                      1,21: write(items[21].value[4]);
                      2..4,22..24: write(items[21].value[5]);
                      0,5..20: write(items[21].value[6]);
                    end;write(' ');
                    
                    write(send_tm.Minute,' ');
                    case send_tm.Minute mod 100 of
                      1,21,31,41,51: write(items[21].value[7]);
                      2..4,22..24,32..34,42..44,52..54: write(items[21].value[8]);
                      0,5..20,25..30,35..40,45..50,55..59: write(items[21].value[9]);
                    end;
                    
                    Console.SetCursorPosition(1,4);write(items[21].value[10],': ',Round(pcent*100),'% ',items[21].value[11]);
                    Console.SetCursorPosition(1,5);write(items[21].value[12],': ',dgt(rb),' ',rub(rb));
                    
                    Console.SetCursorPosition(1,KTX.maxy-4);write('(1) ',items[21].value[13]);
                    
                    KTX.read_1;
                    while (game.item.item.send.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(game.item.item.send.input);
                    end;
                    KTX.read_0;
                    
                    if game.item.item.send.input.Left(1)='/' then con(game.item.item.send.input);
                    
                    if game.item.item.send.input='1' then game.item.item.send.output:=1;
                    
                    if game.item.item.send.output=1 then
                    begin
                      game.item.item.send.status:=false;
                      RemoveItem(game.item.arr[game.item.output-1].id);
                      player.money+=rb;
                      player.sending:=CheckAllOnSending;
                      game.item.item.status:=false;
                      player.respect+=rb div 2;
                      if player.respect>balance.Send.maxrespect then player.respect:=balance.Send.maxrespect;
                      if svg.autosave then save;
                    end;
                    
                  end;
                end;{$endregion}
                
              end;
            end;
            
            
          end;
        end;
        {$endregion}
        
        if game.output=6 then
        {$region GAME.APART}
        begin
          game.apart.status:=true;
          while game.apart.status do
          begin
            Console.Clear;KTX.resize;
            outnull(game.apart.output, game.apart.input);upface;
            
            if (map[player.position].apartment.apartment) then
            begin
              if (map[player.position].apartment.itemcount=0) then
              begin
                Console.SetCursorPosition(1,2);
                Console.ForegroundColor:=consolecolor.Gray;
                write('(1) ',inter[12].face[0]);
                Console.ForegroundColor:=consolecolor.Red;
                write(' (',inter[12].face[4],')');
                Console.ForegroundColor:=consolecolor.Black;
              end
              else
              begin
                Console.SetCursorPosition(1,2);write('(1) ',inter[12].face[0]);
              end;
            end
            else
            begin
              Console.SetCursorPosition(1,2);
              Console.ForegroundColor:=consolecolor.Gray;
              write('(1) ',inter[12].face[0]);
              Console.ForegroundColor:=consolecolor.Red;
              case map[player.position].sort of
                0: write(' (',inter[12].face[5],')');
                1: write(' (',inter[12].face[6],')');
                2: write(' (',inter[12].face[7],')');
              end;
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,3);
            if (map[player.position].apartment.apartment) and (player.position<>0) then
            begin
              write('(2) ',inter[12].face[2]);
            end
            else if player.position=0 then
            begin
              Console.ForegroundColor:=consolecolor.Gray;
              write('(2) ',inter[12].face[2]);
              Console.ForegroundColor:=consolecolor.Black;
            end
            else
            begin
              write('(2) ',inter[12].face[3]);
            end;
            Console.SetCursorPosition(1,4);
            write('(0) ',inter[0].face[5]);
            
            KTX.read_1;
            while (game.apart.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
              readln(game.apart.input);
            end;
            KTX.read_0;
            
            if game.apart.input.Left(1)='/' then con(game.apart.input);
            
            if game.apart.input='0' then game.apart.output:=0;
            
            if (game.apart.input='1') and (map[player.position].apartment.apartment)
            and (map[player.position].apartment.itemcount>0)
            then game.apart.output:=1;
            
            if (game.apart.input='2') and (not map[player.position].apartment.apartment) and (player.position<>0)
            then game.apart.output:=2;
            
            if (game.apart.input='2') and (map[player.position].apartment.apartment)  and (player.position<>0)
            then game.apart.output:=3;
            
            {Outputs:
              1 - Items in apartment
              2 - Buy apartment
              3 - Sell apartment
            }
            
            if game.apart.output=0 then
            begin
              game.apart.status:=false;
            end;
            
            
            
            {$region APART.ITEMS}
            if game.apart.output=1 then
            begin              
              game.apart.item.status:=true;
              while game.apart.item.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.apart.item.output, game.apart.item.input);upface;
                
                game.item.arrcount:=0;
                SetLength(game.item.arr,0);
                for var i:=0 to player.items.Length-1 do
                begin
                  if (player.items[i].tpsort<>9) and (player.items[i].tpsort<>12) then
                  begin
                    game.item.arrcount+=1;
                    SetLength(game.item.arr,game.item.arrcount);
                    game.item.arr[game.item.arrcount-1].it:=player.items[i];
                    game.item.arr[game.item.arrcount-1].id:=i;
                  end;
                end;
                
                var apitemsize: integer = map[player.position].apartment.items.Length;
                if apitemsize>=(KTX.maxy-6) then Console.SetBufferSize(KTX.maxx,apitemsize+6);
                
                if map[player.position].apartment.itemcount>0 then
                for var i:=0 to map[player.position].apartment.items.Length-1 do
                begin
                  Console.SetCursorPosition(1,2+i);write('(',i+1,') ');
                  if (map[player.position].apartment.items[i].tpsort>0) and (map[player.position].apartment.items[i].tpsort<=12) and (map[player.position].apartment.items[i].tpsort<>10) then write(items[2].value[map[player.position].apartment.items[i].tpsort-1],' ',map[player.position].apartment.items[i].name)
                  else if map[player.position].apartment.items[i].tpsort=10 then write(map[player.position].apartment.items[i].name);
                  write(' (',map[player.position].apartment.items[i].veight/1000,' ',inter[0].face[10],')');
                end;
                Console.SetCursorPosition(1,2+apitemsize);write('(0) ',inter[0].face[5]);
                
                
                KTX.read_1;
                while (game.apart.item.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  if apitemsize>=(KTX.maxy-6) then
                  begin
                    Console.SetCursorPosition(1,apitemsize+5);
                    Console.SetCursorPosition(1,apitemsize+4);
                  end
                  else Console.SetCursorPosition(1,KTX.maxy-2);
                  write(': ');
                  readln(game.apart.item.input);
                end;
                KTX.read_0;
                
                if game.apart.item.input.Left(1)='/' then con(game.apart.item.input)
                else
                if game.apart.item.input='0' then game.apart.item.output:=0
                else
                begin
                  var a,e: integer;
                  val(game.apart.item.input,a,e);
                  if (e=0) and (a>=0) and (a<=map[player.position].apartment.items.Length) then game.apart.item.output:=a;
                end;
                
                if game.apart.item.output=0 then game.apart.item.status:=false;
                
                if game.apart.item.output>0 then
                begin
                  game.apart.item.items.status:=true;
                  while game.apart.item.items.status do
                  begin
                    Console.Clear;KTX.resize;
                    outnull(game.apart.item.items.output, game.apart.item.items.input);upface;
                    
                    {$region ITEM.TRASH}
                    Console.SetCursorPosition(1,2);
                    if (map[player.position].apartment.items[game.apart.item.output-1].tpsort>=1)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<=12) then write(items[2].value[map[player.position].apartment.items[game.apart.item.output-1].tpsort-1],' ');
                    if (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>11) then write(map[player.position].apartment.items[game.apart.item.output-1].name);
                    
                    if (map[player.position].apartment.items[game.apart.item.output-1].tpsort>=1)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<=9)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>8) then
                    begin
                      Console.SetCursorPosition(1,4);write(items[0].value[2],': ');
                      var pircent: real = map[player.position].apartment.items[game.apart.item.output-1].hitpoints/map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                      
                      var marker := pircent;
                      if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                      begin
                        Console.ForegroundColor:=balance.status._verygood.color;
                        write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                      end;
                      if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                      begin
                        Console.ForegroundColor:=balance.status._good.color;
                        write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                      end;
                      if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                      begin
                        Console.ForegroundColor:=balance.status._normal.color;
                        write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                      end;
                      if (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>6) then
                      begin
                        if (map[player.position].apartment.items[game.apart.item.output-1].hitpoints>balance.criticalhp) and (marker<balance.status._bad.max) then
                        begin
                          Console.ForegroundColor:=balance.status._bad.color;
                          write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        if (map[player.position].apartment.items[game.apart.item.output-1].hitpoints<=balance.criticalhp) then
                        begin
                          Console.ForegroundColor:=balance.status._verybad.color;
                          write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                      end
                      else
                      begin
                        if (marker<balance.status._bad.max) then
                        begin
                          Console.ForegroundColor:=balance.status._bad.color;
                          write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                      end;
                      Console.ForegroundColor:=consolecolor.Black;
                    
                      Console.SetCursorPosition(1,5);write(items[0].value[3],': ');
                      write(dgt(Round(map[player.position].apartment.items[game.apart.item.output-1].price*pircent)),' ',rub(Round(map[player.position].apartment.items[game.apart.item.output-1].price*pircent)));
                      Console.SetCursorPosition(1,6);write(items[0].value[4],': ');
                      write(map[player.position].apartment.items[game.apart.item.output-1].veight/1000,' ',inter[0].face[10]);
                    end;
                    
                    case map[player.position].apartment.items[game.apart.item.output-1].tpsort of
                      11:
                      begin
                        Console.SetCursorPosition(1,3);write(items[0].value[5],': ',types[map[map[player.position].apartment.items[game.apart.item.output-1].town].sort],' ',map[map[player.position].apartment.items[game.apart.item.output-1].town].name);
                        Console.SetCursorPosition(1,4);write(items[0].value[6],': ');
                        var str: string;
                        if svg.time_type=0 then
                        begin
                          str:=str+map[player.position].apartment.items[game.apart.item.output-1].timemax.Day;
                          str:=str+' '+month[map[player.position].apartment.items[game.apart.item.output-1].timemax.Month-1]+' '+map[player.position].apartment.items[game.apart.item.output-1].timemax.Year+' ';
                        end;
                        if svg.time_type=1 then
                        begin
                          str:=str+map[player.position].apartment.items[game.apart.item.output-1].timemax.Day;
                          str:=str+' '+month[map[player.position].apartment.items[game.apart.item.output-1].timemax.Month-1].Left(3)+' '+map[player.position].apartment.items[game.apart.item.output-1].timemax.Year+' ';
                        end;
                        if svg.time_type=2 then
                        begin
                          if map[player.position].apartment.items[game.apart.item.output-1].timemax.Day<10 then str:=str+'0'+str+map[player.position].apartment.items[game.apart.item.output-1].timemax.Day+'.'
                          else str:=str+map[player.position].apartment.items[game.apart.item.output-1].timemax.Day+'.';
                          if map[player.position].apartment.items[game.apart.item.output-1].timemax.Month<10 then str:=str+'0'+str+map[player.position].apartment.items[game.apart.item.output-1].timemax.Month+'.'
                          else str:=str+map[player.position].apartment.items[game.apart.item.output-1].timemax.Month+'.';
                          str:=str+map[player.position].apartment.items[game.apart.item.output-1].timemax.Year+' ';
                        end;
                        str:=str+map[player.position].apartment.items[game.apart.item.output-1].timemax.Hour;
                        str:=str+':';
                        if map[player.position].apartment.items[game.apart.item.output-1].timemax.Minute < 10 then str:=str+'0'+map[player.position].apartment.items[game.apart.item.output-1].timemax.Minute
                        else str:=str+map[player.position].apartment.items[game.apart.item.output-1].timemax.Minute;
                        write(str);
                      end;
                      1:
                      begin
                        Console.SetCursorPosition(1,8);write(items[3].value[0],': ');
                        if (map[player.position].apartment.items[game.apart.item.output-1].material>=0) and (map[player.position].apartment.items[game.apart.item.output-1].material<=4) then
                        begin
                          case map[player.position].apartment.items[game.apart.item.output-1].material of
                            0: Console.ForegroundColor:=Balance.IFace.framematerial.Steel;
                            1: Console.ForegroundColor:=Balance.IFace.framematerial.SteelPlus;
                            2: Console.ForegroundColor:=Balance.IFace.framematerial.Alu6061;
                            3: Console.ForegroundColor:=Balance.IFace.framematerial.Alu7075;
                            4: Console.ForegroundColor:=Balance.IFace.framematerial.Titan;
                          end;
                          write(items[3].value[1+map[player.position].apartment.items[game.apart.item.output-1].material]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                        end;
                          
                        Console.SetCursorPosition(1,9);write(items[4].value[0],': ');
                        if map[player.position].apartment.items[game.apart.item.output-1].suspensionflag then
                        begin
                          Console.ForegroundColor:=ConsoleColor.DarkGreen;
                          write(items[4].value[1])
                        end
                        else
                        begin
                          Console.ForegroundColor:=ConsoleColor.Red;
                          write(items[4].value[2]);
                        end;
                        Console.ForegroundColor:=ConsoleColor.Black;
                      end;
                      2:
                      begin
                        Console.SetCursorPosition(1,8);write(items[5].value[0],': ');
                        if map[player.position].apartment.items[game.apart.item.output-1].suspensionflag then
                        begin
                          Console.ForegroundColor:=ConsoleColor.DarkGreen;
                          write(items[5].value[1]);
                        end
                        else
                        begin
                          Console.ForegroundColor:=ConsoleColor.Red;
                          write(items[5].value[2]);
                        end;
                        Console.ForegroundColor:=ConsoleColor.Black;
                        
                        if map[player.position].apartment.items[game.apart.item.output-1].suspensionflag then
                        begin
                          Console.SetCursorPosition(1,9);write(items[6].value[0],': ');
                          if (map[player.position].apartment.items[game.apart.item.output-1].suspension>=0)
                          and (map[player.position].apartment.items[game.apart.item.output-1].suspension<=5) then
                          begin
                            case map[player.position].apartment.items[game.apart.item.output-1].suspension of
                              0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                              1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                              2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                              3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                              4: Console.ForegroundColor:=Balance.IFace.susptype.OilPlus;
                              5: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                            end;
                            write(items[6].value[1+map[player.position].apartment.items[game.apart.item.output-1].suspension]);
                            Console.ForegroundColor:=ConsoleColor.Black;
                          end;
                          Console.SetCursorPosition(1,10);write(items[7].value[0],': ');
                          
                          if (map[player.position].apartment.items[game.apart.item.output-1].travel>=balance.IFace.susptravel._0.min) and (map[player.position].apartment.items[game.apart.item.output-1].travel<=balance.IFace.susptravel._0.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                          if (map[player.position].apartment.items[game.apart.item.output-1].travel>=balance.IFace.susptravel._1.min) and (map[player.position].apartment.items[game.apart.item.output-1].travel<=balance.IFace.susptravel._1.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                          if (map[player.position].apartment.items[game.apart.item.output-1].travel>=balance.IFace.susptravel._2.min) and (map[player.position].apartment.items[game.apart.item.output-1].travel<=balance.IFace.susptravel._2.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                          if (map[player.position].apartment.items[game.apart.item.output-1].travel>=balance.IFace.susptravel._3.min) and (map[player.position].apartment.items[game.apart.item.output-1].travel<=balance.IFace.susptravel._3.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                          
                          write(map[player.position].apartment.items[game.apart.item.output-1].travel,' ',inter[0].face[11]);
                          
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                          Console.SetCursorPosition(1,11);write(items[8].value[0],': ');
                          if map[player.position].apartment.items[game.apart.item.output-1].block then
                          begin
                            Console.ForegroundColor:=ConsoleColor.DarkGreen;
                            write(items[8].value[1]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=ConsoleColor.Red;
                            write(items[8].value[2]);
                          end;
                          Console.ForegroundColor:=ConsoleColor.Black;
                          
                        end;
                      end;
                      3:
                      begin
                        Console.SetCursorPosition(1,8);write(items[9].value[0],': ');
                        if (map[player.position].apartment.items[game.apart.item.output-1].suspension>=0)
                        and (map[player.position].apartment.items[game.apart.item.output-1].suspension<=4) then
                        begin
                          case map[player.position].apartment.items[game.apart.item.output-1].suspension of
                            0: Console.ForegroundColor:=Balance.IFace.susptype.Steel;
                            1: Console.ForegroundColor:=Balance.IFace.susptype.Elastomer;
                            2: Console.ForegroundColor:=Balance.IFace.susptype.Pneumatic;
                            3: Console.ForegroundColor:=Balance.IFace.susptype.Oil;
                            4: Console.ForegroundColor:=Balance.IFace.susptype.PneumaticPlus;
                          end;
                          write(items[9].value[1+map[player.position].apartment.items[game.apart.item.output-1].suspension]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                        end;
                        Console.SetCursorPosition(1,9);write(items[7].value[0],': ');
                        
                        if (map[player.position].apartment.items[game.apart.item.output-1].travel>=balance.IFace.susptravel._0.min) and (map[player.position].apartment.items[game.apart.item.output-1].travel<=balance.IFace.susptravel._0.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._0.indicate;
                          if (map[player.position].apartment.items[game.apart.item.output-1].travel>=balance.IFace.susptravel._1.min) and (map[player.position].apartment.items[game.apart.item.output-1].travel<=balance.IFace.susptravel._1.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._1.indicate;
                          if (map[player.position].apartment.items[game.apart.item.output-1].travel>=balance.IFace.susptravel._2.min) and (map[player.position].apartment.items[game.apart.item.output-1].travel<=balance.IFace.susptravel._2.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._2.indicate;
                          if (map[player.position].apartment.items[game.apart.item.output-1].travel>=balance.IFace.susptravel._3.min) and (map[player.position].apartment.items[game.apart.item.output-1].travel<=balance.IFace.susptravel._3.max)
                            then Console.ForegroundColor:=balance.IFace.susptravel._3.indicate;
                        
                        write(map[player.position].apartment.items[game.apart.item.output-1].travel,' ',inter[0].face[11]);
                        Console.ForegroundColor:=ConsoleColor.Black;
                        
                        Console.SetCursorPosition(1,10);write(items[8].value[0],': ');
                        if map[player.position].apartment.items[game.apart.item.output-1].block then
                        begin
                          Console.ForegroundColor:=ConsoleColor.DarkGreen;
                          write(items[8].value[1]);
                        end
                        else
                        begin
                          Console.ForegroundColor:=ConsoleColor.Red;
                          write(items[8].value[2]);
                        end;
                        Console.ForegroundColor:=ConsoleColor.Black;
                      end;
                      5:
                      begin
                        Console.SetCursorPosition(1,8);write(items[10].value[0],': ');
                        if (map[player.position].apartment.items[game.apart.item.output-1].sort>=0)
                        and (map[player.position].apartment.items[game.apart.item.output-1].sort<=2) then
                        begin
                          case map[player.position].apartment.items[game.apart.item.output-1].sort of
                            0: Console.ForegroundColor:=Balance.IFace.ruddertype._0;
                            1: Console.ForegroundColor:=Balance.IFace.ruddertype._1;
                            2: Console.ForegroundColor:=Balance.IFace.ruddertype._2;
                          end;
                          write(items[10].value[1+map[player.position].apartment.items[game.apart.item.output-1].sort]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                        end;
                      end;
                      4:
                      begin
                        Console.SetCursorPosition(1,8);write(items[11].value[0],': ');
                        
                        case map[player.position].apartment.items[game.apart.item.output-1].count of
                          1: Console.ForegroundColor:=Balance.IFace.backcount._1;
                          6: Console.ForegroundColor:=Balance.IFace.backcount._6;
                          7: Console.ForegroundColor:=Balance.IFace.backcount._7;
                          8: Console.ForegroundColor:=Balance.IFace.backcount._8;
                          9: Console.ForegroundColor:=Balance.IFace.backcount._9;
                          10: Console.ForegroundColor:=Balance.IFace.backcount._10;
                          11..9999: Console.ForegroundColor:=Balance.IFace.backcount._11;
                        end;
                        
                        write(map[player.position].apartment.items[game.apart.item.output-1].count,' ');
                        case map[player.position].apartment.items[game.apart.item.output-1].count mod 100 of
                          1,21,31,41,51,61,71,81,91: write(bikes[6].value[2]);
                          2..4,22..24,32..34,42..44,52..54,62..64,72..74,82..84,92..94: write(bikes[6].value[3]);
                          5..20,25..30,35..40,45..50,55..60,65..70,75..80,85..90,95..99: write(bikes[6].value[4]);
                        end;
                        
                        Console.ForegroundColor:=consolecolor.Black;
                        
                        Console.SetCursorPosition(1,9);write(items[11].value[1],': ');
                        if not map[player.position].apartment.items[game.apart.item.output-1].fores then
                        begin
                          Console.ForegroundColor:=Balance.IFace.forecount._1;
                          write('1 ',items[11].value[2]);
                        end
                        else
                        begin
                          Console.ForegroundColor:=Balance.IFace.forecount._3;
                          write('3 ',items[11].value[3]);
                        end;
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      6:
                      begin
                        Console.SetCursorPosition(1,8);write(items[12].value[0],': ');
                        if (map[player.position].apartment.items[game.apart.item.output-1].sort>=1)
                        and (map[player.position].apartment.items[game.apart.item.output-1].sort<=3) then
                        begin
                          case map[player.position].apartment.items[game.apart.item.output-1].sort of
                            1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                            2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                            3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                          end;
                          write(items[12].value[map[player.position].apartment.items[game.apart.item.output-1].sort]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                        end;
                        
                        Console.SetCursorPosition(1,9);write(items[12].value[4],': ');
                        var marker:= map[player.position].apartment.items[game.apart.item.output-1].effection/map[player.position].apartment.items[game.apart.item.output-1].maxeffection;
                        if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                        begin
                          Console.ForegroundColor:=balance.status._verygood.color;
                          write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                        begin
                          Console.ForegroundColor:=balance.status._good.color;
                          write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                        begin
                          Console.ForegroundColor:=balance.status._normal.color;
                          write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        if (marker>balance.bk.allbreak.minimal) and (marker<balance.status._bad.max) then
                        begin
                          Console.ForegroundColor:=balance.status._bad.color;
                          write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        if (marker<=balance.bk.allbreak.minimal) then
                        begin
                          Console.ForegroundColor:=balance.status._verybad.color;
                          write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      7:
                      begin
                        Console.SetCursorPosition(1,8);write(items[13].value[0],': ');
                        if map[player.position].apartment.items[game.apart.item.output-1].needles=balance.bk.wheel.needle.maximum then Console.ForegroundColor:=consolecolor.DarkBlue
                        else if map[player.position].apartment.items[game.apart.item.output-1].needles>=balance.bk.wheel.needle.average then Console.ForegroundColor:=consolecolor.DarkGreen
                        else if map[player.position].apartment.items[game.apart.item.output-1].needles>=balance.bk.wheel.needle.minimum then Console.ForegroundColor:=consolecolor.DarkYellow
                        else Console.ForegroundColor:=consolecolor.Red;
                        write(map[player.position].apartment.items[game.apart.item.output-1].needles,' ');
                        case map[player.position].apartment.items[game.apart.item.output-1].needles mod 100 of
                          1,21,31: write(items[13].value[1]);
                          2..4,22..24,32: write(items[13].value[2]);
                          0,5..20,25..30: write(items[13].value[3]);
                        end;
                        Console.ForegroundColor:=consolecolor.Black;
                        Console.SetCursorPosition(1,9);write(items[14].value[0],': ');
                        if map[player.position].apartment.items[game.apart.item.output-1].camerahit then
                        begin
                          Console.ForegroundColor:=ConsoleColor.Red;
                          write(items[14].value[1]);
                        end
                        else
                        begin
                          Console.ForegroundColor:=ConsoleColor.DarkGreen;
                          write(items[14].value[2]);
                        end;
                        Console.ForegroundColor:=ConsoleColor.Black;
                      end;
                      8:
                      begin
                        Console.SetCursorPosition(1,4);write(items[12].value[5],': ');
                        if (map[player.position].apartment.items[game.apart.item.output-1].sort>=1) and (map[player.position].apartment.items[game.apart.item.output-1].sort<=3) then
                        begin
                          case map[player.position].apartment.items[game.apart.item.output-1].sort of
                            1: Console.ForegroundColor:=Balance.IFace.braketype._1;
                            2: Console.ForegroundColor:=Balance.IFace.braketype._2;
                            3: Console.ForegroundColor:=Balance.IFace.braketype._3;
                          end;
                          write(items[12].value[5+map[player.position].apartment.items[game.apart.item.output-1].sort]);
                          Console.ForegroundColor:=ConsoleColor.Black;
                        end;
                        
                        Console.SetCursorPosition(1,5);write(items[12].value[4],': ');
                        var marker:= map[player.position].apartment.items[game.apart.item.output-1].effection/map[player.position].apartment.items[game.apart.item.output-1].maxeffection;
                        if (marker>=balance.status._verygood.min) and (marker<=balance.status._verygood.max) then
                        begin
                          Console.ForegroundColor:=balance.status._verygood.color;
                          write(bikes[2].value[1]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        if (marker>=balance.status._good.min) and (marker<balance.status._good.max) then
                        begin
                          Console.ForegroundColor:=balance.status._good.color;
                          write(bikes[2].value[2]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        if (marker>=balance.status._normal.min) and (marker<balance.status._normal.max) then
                        begin
                          Console.ForegroundColor:=balance.status._normal.color;
                          write(bikes[2].value[3]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        if (marker>balance.bk.allbreak.minimal) and (marker<balance.status._bad.max) then
                        begin
                          Console.ForegroundColor:=balance.status._bad.color;
                          write(bikes[2].value[4]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        if (marker<=balance.bk.allbreak.minimal) then
                        begin
                          Console.ForegroundColor:=balance.status._verybad.color;
                          write(bikes[2].value[5]);write(' (',Round(marker*1000)/10,'%)');
                        end;
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                    end;
                    
                    if (map[player.position].apartment.items[game.apart.item.output-1].tpsort>=1)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<=12)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>11)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>10) then
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-7);
                      write('(1) ',items[15].value[0]);
                      if allveight(map[player.position].apartment.items[game.apart.item.output-1].veight)<=player.maxveight then
                      begin
                        Console.SetCursorPosition(1,KTX.maxy-6);
                        write('(2) ',items[15].value[3]);
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.Gray;
                        Console.SetCursorPosition(1,KTX.maxy-6);
                        write('(2) ',items[15].value[3]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[0].value[0],')');
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      Console.ForegroundColor:=consolecolor.Black;
                      
                      Console.SetCursorPosition(1,KTX.maxy-5);
                      write('(3) ',items[15].value[2]);
                    end
                    else if (map[player.position].apartment.items[game.apart.item.output-1].tpsort=10) then
                    begin
                      if allveight(map[player.position].apartment.items[game.apart.item.output-1].veight)<=player.maxveight then
                      begin
                        Console.SetCursorPosition(1,KTX.maxy-5);
                        write('(1) ',items[15].value[3]);
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.Gray;
                        Console.SetCursorPosition(1,KTX.maxy-5);
                        write('(1) ',items[15].value[3]);
                        Console.ForegroundColor:=consolecolor.Red;
                        write(' (',items[0].value[0],')');
                        Console.ForegroundColor:=consolecolor.Black;
                      end;
                      Console.ForegroundColor:=consolecolor.Black;
                    end
                    else if (map[player.position].apartment.items[game.apart.item.output-1].tpsort=11) then
                    begin
                      if map[player.position].apartment.items[game.apart.item.output-1].town=player.position then
                      begin
                        Console.SetCursorPosition(1,KTX.maxy-5);
                        write('(1) ',items[16].value[0]);
                      end
                      else
                      begin
                        Console.ForegroundColor:=consolecolor.Gray;
                        Console.SetCursorPosition(1,KTX.maxy-5);
                        write('(1) ',items[16].value[0]);
                      end;
                      Console.ForegroundColor:=consolecolor.Black;
                    end;
                    {$endregion}
                    
                    if (map[player.position].apartment.items[game.apart.item.output-1].tpsort>=1)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<=12) then
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-4);
                      write('(0) ',inter[0].face[5]);
                    end;
                    
                    KTX.read_1;
                    while (game.apart.item.items.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                    begin
                      Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                      readln(game.apart.item.items.input);
                    end;
                    KTX.read_0;
                    
                    if game.apart.item.items.input.Left(1)='/' then con(game.apart.item.items.input);
                    
                    if game.apart.item.items.input='0' then game.apart.item.items.output:=0;
                
                    if (map[player.position].apartment.items[game.apart.item.output-1].tpsort>=1)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<=12)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>11)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>10)
                    and (game.apart.item.items.input='1') then game.apart.item.items.output:=1;
                    
                    if (map[player.position].apartment.items[game.apart.item.output-1].tpsort>=1)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<=12)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>11)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>10)
                    and (allveight(map[player.position].apartment.items[game.apart.item.output-1].veight)<=player.maxveight)
                    and (game.apart.item.items.input='2') then game.apart.item.items.output:=2;
                    
                    if (map[player.position].apartment.items[game.apart.item.output-1].tpsort>=1)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<=12)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>11)
                    and (map[player.position].apartment.items[game.apart.item.output-1].tpsort<>10)
                    and (game.apart.item.items.input='3') then game.apart.item.items.output:=3;
                    
                    if (map[player.position].apartment.items[game.apart.item.output-1].tpsort=10)
                    and (allveight(map[player.position].apartment.items[game.apart.item.output-1].veight)<=player.maxveight)
                    and (game.apart.item.items.input='1') then game.apart.item.items.output:=2;
                    
                    if game.apart.item.items.output=0 then
                    begin
                      game.apart.item.items.status:=false;
                    end;
                    
                    {
                      OUTPUTS
                        1 - To Bike
                        2 - To Items
                        3 - Drop
                    }
                    
                    {$region ToBike}
                    if game.apart.item.items.output=1 then
                    begin
                      game.apart.item.items.sets.status:=true;
                      while game.apart.item.items.sets.status do
                      begin
                        Console.Clear;KTX.resize;
                        outnull(game.apart.item.items.sets.output, game.apart.item.items.sets.input);upface;
                        {$region ITEMES}
                        
                        var g_item:=map[player.position].apartment.items[game.apart.item.output-1];
                        
                        if (g_item.tpsort=1) then
                        begin
                          if (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) then
                          begin
                            begin
                              if (player.energy>=(balance.timing.it_framing.energy+balance.timing.bsusp_demontage.energy)) then
                              begin
                                Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                                Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                                Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                              end
                              else
                              begin
                                Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                                Console.ForegroundColor:=consolecolor.Gray;
                                Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[7],')');
                                Console.ForegroundColor:=consolecolor.Black;
                                
                                Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                              end;
                            end;
                          end
                          else
                          begin
                            begin
                              if (player.energy>=(balance.timing.it_framing.energy)) then
                              begin
                                Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                                Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                                Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                              end
                              else
                              begin
                                Console.SetCursorPosition(1,2);write(items[17].value[0],'?');
                                Console.ForegroundColor:=consolecolor.Gray;
                                Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[7],')');
                                Console.ForegroundColor:=consolecolor.Black;
                                
                                Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                              end;
                            end;
                          end;
                        end;
                        
                        if (g_item.tpsort=2) then
                        begin
                          begin
                            if (player.energy>=(balance.timing.it_forking.energy)) then
                            begin
                              Console.SetCursorPosition(1,2);write(items[17].value[3],'?');
                              Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                              Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                            end
                            else
                            begin
                              Console.SetCursorPosition(1,2);write(items[17].value[3],'?');
                              Console.ForegroundColor:=consolecolor.Gray;
                              Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                              Console.ForegroundColor:=consolecolor.Red;
                              write(' (',items[0].value[7],')');
                              Console.ForegroundColor:=consolecolor.Black;
                              
                              Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                            end;
                          end;
                        end;
                        
                        if (g_item.tpsort=3) then
                        begin
                          if player.bike.frame.suspensionflag then
                          begin
                            if (not player.bike.bsusp.flag) and (player.bike.bsusp.veight<>0) then player.bike.bsusp.veight:=0;
                            begin
                              if ((player.energy>=(balance.timing.it_bsusping.energy)) and (not player.bike.bsusp.flag))
                              or ((player.energy>=(balance.timing.it_bsusping.energy+balance.timing.bsusp_demontage.energy)) and (player.bike.bsusp.flag)) then
                              begin
                                Console.SetCursorPosition(1,2);
                                if player.bike.bsusp.flag then
                                  write(items[17].value[4],'?')
                                else write(items[17].value[5],'?');
                                
                                Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                                Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                              end
                              else
                              begin
                                Console.SetCursorPosition(1,2);
                                if player.bike.bsusp.flag then
                                  write(items[17].value[4],'?')
                                else write(items[17].value[5],'?');
                                
                                Console.ForegroundColor:=consolecolor.Gray;
                                Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' (',items[0].value[7],')');
                                Console.ForegroundColor:=consolecolor.Black;
                                
                                Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                              end;
                            end;
                          end
                          else
                          begin
                            Console.SetCursorPosition(1,2);write(items[17].value[5],'?');
                            
                            Console.ForegroundColor:=consolecolor.Gray;
                            Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',items[17].value[24],')');
                            Console.ForegroundColor:=consolecolor.Black;
                            
                            Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                          end;
                        end;
                        
                        if (g_item.tpsort=4) then
                        begin
                          begin
                            if (player.energy>=(balance.timing.it_transing.energy)) then
                            begin
                              Console.SetCursorPosition(1,2);write(items[17].value[6],'?');
                              Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                              Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                            end
                            else
                            begin
                              Console.SetCursorPosition(1,2);write(items[17].value[6],'?');
                              Console.ForegroundColor:=consolecolor.Gray;
                              Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                              Console.ForegroundColor:=consolecolor.Red;
                              write(' (',items[0].value[7],')');
                              Console.ForegroundColor:=consolecolor.Black;
                              
                              Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                            end;
                          end;
                        end;
                        
                        if (g_item.tpsort=5) then
                        begin
                          begin
                            if (player.energy>=(balance.timing.it_ruddering.energy)) then
                            begin
                              Console.SetCursorPosition(1,2);write(items[17].value[7],'?');
                              Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                              Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                            end
                            else
                            begin
                              Console.SetCursorPosition(1,2);write(items[17].value[7],'?');
                              Console.ForegroundColor:=consolecolor.Gray;
                              Console.SetCursorPosition(1,4);write('(1) ',items[17].value[1]);
                              Console.ForegroundColor:=consolecolor.Red;
                              write(' (',items[0].value[7],')');
                              Console.ForegroundColor:=consolecolor.Black;
                              
                              Console.SetCursorPosition(1,5);write('(0) ',items[17].value[2]);
                            end;
                          end;
                        end;
                        
                        if (g_item.tpsort=6) then
                        begin
                          if (not player.bike.backbreak.flag) and (player.bike.backbreak.veight<>0) then player.bike.backbreak.veight:=0;
                          if (not player.bike.frontbreak.flag) and (player.bike.frontbreak.veight<>0) then player.bike.frontbreak.veight:=0;
                          
                          Console.SetCursorPosition(1,2);write(items[17].value[8],'?');
                          
                          Console.SetCursorPosition(1,4);
                          begin
                            if ((player.bike.backbreak.flag) and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy))
                            or ((not player.bike.backbreak.flag) and (player.energy>=balance.timing.it_breaking.energy)) then
                            begin
                              write('(1) ',items[17].value[9]);
                              if (player.bike.backbreak.flag) then write(' (',items[17].value[12],')') else write(' (',items[17].value[13],')');
                            end
                            else
                            begin
                              Console.ForegroundColor:=consolecolor.Gray;
                              write('(1) ',items[17].value[9]);
                              Console.ForegroundColor:=consolecolor.Red;
                              write(' ',items[0].value[7]);
                              Console.ForegroundColor:=consolecolor.Black;
                            end;
                          end;
                          
                          Console.SetCursorPosition(1,5);
                          begin
                            if ((player.bike.frontbreak.flag) and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy))
                            or ((not player.bike.frontbreak.flag) and (player.energy>=balance.timing.it_breaking.energy)) then
                            begin
                              write('(2) ',items[17].value[10]);
                              if (player.bike.frontbreak.flag) then write(' (',items[17].value[12],')') else write(' (',items[17].value[13],')');
                            end
                            else
                            begin
                              Console.ForegroundColor:=consolecolor.Gray;
                              write('(2) ',items[17].value[10]);
                              Console.ForegroundColor:=consolecolor.Red;
                              write(' ',items[0].value[7]);
                              Console.ForegroundColor:=consolecolor.Black;
                            end;
                          end;
                          
                          Console.SetCursorPosition(1,6);
                          write('(0) ',items[17].value[11]);
                        end;
                        
                        if (g_item.tpsort=7) then
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[14],'?');
                          
                          Console.SetCursorPosition(1,4);
                          begin
                            if (player.energy>=balance.timing.it_wheeling.energy) then
                            begin
                              write('(1) ',items[17].value[15]);
                            end
                            else
                            begin
                              Console.ForegroundColor:=consolecolor.Gray;
                              write('(1) ',items[17].value[15]);
                              Console.ForegroundColor:=consolecolor.Red;
                              write(' ',items[0].value[7]);
                              Console.ForegroundColor:=consolecolor.Black;
                            end;
                          end;
                          
                          Console.SetCursorPosition(1,5);
                          begin
                            if (player.energy>=balance.timing.it_wheeling.energy) then
                            begin
                              write('(2) ',items[17].value[16]);
                            end
                            else
                            begin
                              Console.ForegroundColor:=consolecolor.Gray;
                              write('(2) ',items[17].value[16]);
                              Console.ForegroundColor:=consolecolor.Red;
                              write(' ',items[0].value[7]);
                              Console.ForegroundColor:=consolecolor.Black;
                            end;
                          end;
                          
                          Console.SetCursorPosition(1,6);write('(0) ',items[17].value[17]);
                        end;
                        
                        if (g_item.tpsort=8) then
                        begin
                          Console.SetCursorPosition(1,2);write(items[17].value[18],'?');
                          
                          Console.SetCursorPosition(1,4);
                          if (player.bike.backbreak.flag) then
                          begin
                            if (g_item.sort=player.bike.backbreak.sort) then
                            begin
                              if (player.energy>=balance.timing.it_breakcarding.energy) then
                              begin
                                write('(1) ',items[17].value[19]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(1) ',items[17].value[19]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' ',items[0].value[7]);
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                            end
                            else
                            begin
                              Console.ForegroundColor:=consolecolor.Gray;
                              write('(1) ',items[17].value[19]);
                              Console.ForegroundColor:=consolecolor.Red;
                              write(' ',items[17].value[23]);
                              Console.ForegroundColor:=consolecolor.Black;
                            end;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(1) ',items[17].value[19]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' ',items[17].value[22]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          
                          Console.SetCursorPosition(1,5);
                          if (player.bike.frontbreak.flag) then
                          begin
                            if (g_item.sort=player.bike.frontbreak.sort) then
                            begin
                              if (player.energy>=balance.timing.it_breakcarding.energy) then
                              begin
                                write('(2) ',items[17].value[20]);
                              end
                              else
                              begin
                                Console.ForegroundColor:=consolecolor.Gray;
                                write('(2) ',items[17].value[20]);
                                Console.ForegroundColor:=consolecolor.Red;
                                write(' ',items[0].value[7]);
                                Console.ForegroundColor:=consolecolor.Black;
                              end;
                            end
                            else
                            begin
                              Console.ForegroundColor:=consolecolor.Gray;
                              write('(2) ',items[17].value[20]);
                              Console.ForegroundColor:=consolecolor.Red;
                              write(' ',items[17].value[23]);
                              Console.ForegroundColor:=consolecolor.Black;
                            end;
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            write('(2) ',items[17].value[20]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' ',items[17].value[22]);
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                          
                          Console.SetCursorPosition(1,6);write('(0) ',items[17].value[21]);
                        end;
                        
                        
                        KTX.read_1;
                        while (game.apart.item.items.sets.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                        begin
                          Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                          readln(game.apart.item.items.sets.input);
                        end;
                        KTX.read_0;
                        
                        if game.apart.item.items.sets.input.Left(1)='/' then con(game.apart.item.items.sets.input);
                        
                        if game.apart.item.items.sets.input='0' then game.apart.item.items.sets.output:=0;
                        
                        if (game.apart.item.items.sets.input='1')
                        and ((g_item.tpsort=6)
                        and (((player.bike.frontbreak.flag) and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy))
                        or ((not player.bike.frontbreak.flag) and (player.energy>=balance.timing.it_breaking.energy))))
                        then game.apart.item.items.sets.output:=1;
                        
                        if (game.apart.item.items.sets.input='2')
                        and ((g_item.tpsort=6)
                        and (((player.bike.frontbreak.flag) and (player.energy>=balance.timing.break_demontage.energy+balance.timing.it_breaking.energy))
                        or ((not player.bike.frontbreak.flag) and (player.energy>=balance.timing.it_breaking.energy))))
                        then game.apart.item.items.sets.output:=2;
                        
                        if (game.apart.item.items.sets.input='1')
                        and ((g_item.tpsort=8) and ((player.bike.backbreak.flag) and (player.bike.backbreak.sort=g_item.sort)))
                        and (player.energy>=balance.timing.it_breakcarding.energy)
                        then game.apart.item.items.sets.output:=3;
                        
                        if (game.apart.item.items.sets.input='2')
                        and ((g_item.tpsort=8) and ((player.bike.frontbreak.flag) and (player.bike.frontbreak.sort=g_item.sort)))
                        and (player.energy>=balance.timing.it_breakcarding.energy)
                        then game.apart.item.items.sets.output:=4;
                        
                        if (game.apart.item.items.sets.input='1')
                        and (g_item.tpsort=7) and (player.energy>=balance.timing.it_wheeling.energy) then game.apart.item.items.sets.output:=5;
                        
                        if (game.apart.item.items.sets.input='2')
                        and (g_item.tpsort=7) and (player.energy>=balance.timing.it_wheeling.energy) then game.apart.item.items.sets.output:=6;
                        
                        if (game.apart.item.items.sets.input='1') and (g_item.tpsort=1) then
                        begin
                          if (player.bike.frame.suspensionflag) and (player.bike.bsusp.flag) then
                          begin
                            if (player.energy>=(balance.timing.it_framing.energy+balance.timing.bsusp_demontage.energy)) then game.apart.item.items.sets.output:=-7;
                          end
                          else
                          begin
                            if (player.energy>=balance.timing.it_framing.energy) then game.apart.item.items.sets.output:=7;
                          end;
                        end;
                        
                        
                        
                        {
                        if (game.apart.item.items.sets.input='1') and (g_item.tpsort=1)
                        
                        and ((((player.bike.frame.suspensionflag) and (player.bike.bsusp.flag))
                        
                        and (allveight(player.bike.frame.veight,-g_item.veight)<=player.maxveight)
                        and (player.energy>=balance.timing.it_framing.energy) 
                        
                        ) or (((player.bike.frame.suspensionflag) and (player.bike.bsusp.flag))
                        
                        
                        ))
                        then game.apart.item.items.sets.output:=7;}
                        
                        if (game.apart.item.items.sets.input='1') and (g_item.tpsort=2)
                        and (player.energy>=balance.timing.it_forking.energy) then game.apart.item.items.sets.output:=8;
                        
                        if (game.apart.item.items.sets.input='1') and (g_item.tpsort=3)
                        and (((player.energy>=balance.timing.it_bsusping.energy) and (not player.bike.bsusp.flag))
                        or ((player.energy>=balance.timing.it_bsusping.energy+balance.timing.bsusp_demontage.energy) and (player.bike.bsusp.flag)))
                        and (player.bike.frame.suspensionflag) then game.apart.item.items.sets.output:=9;
                        
                        if (game.apart.item.items.sets.input='1') and (g_item.tpsort=4)
                        and (player.energy>=balance.timing.it_transing.energy) then game.apart.item.items.sets.output:=10;
                        
                        if (game.apart.item.items.sets.input='1') and (g_item.tpsort=5)
                        and (player.energy>=balance.timing.it_ruddering.energy) then game.apart.item.items.sets.output:=11;
                        {$endregion}
        
                        {
                        //OUTPUTS:
                              0 - Exit
                              1 - Back Break
                              2 - Front Break
                              3 - Back BCards
                              4 - Front BCards
                              5 - Back Wheel
                              6 - Front Wheel
                              
                              -7 - Frame with suspension
                              7 - Frame
                              8 - Fork
                              9 - BackSuspension
                              10 - Transmission
                              11 - Rudder
                        }
                         
                        if game.apart.item.items.sets.output=0 then
                        begin
                          game.apart.item.items.sets.status:=false;
                        end;
                        
                        {$region BackBreak}
                        if game.apart.item.items.sets.output=1 then
                        begin
                          if player.bike.backbreak.flag then
                          begin
                            looping(balance.timing.break_demontage,bikes[8].value[6]);
                            var subtp: TItem;
                            subtp.tpsort:=6;
                            subtp.name:=player.bike.backbreak.name;
                            subtp.sort:=player.bike.backbreak.sort;
                            subtp.effection:=player.bike.backbreak.effection;
                            subtp.maxeffection:=player.bike.backbreak.maxeffection;
                            subtp.hitpoints:=player.bike.backbreak.hitpoints;
                            subtp.maxhitpoints:=player.bike.backbreak.maxhitpoints;
                            subtp.price:=player.bike.backbreak.price;
                            subtp.veight:=player.bike.backbreak.veight;
                            ap_AddItem(player.position,subtp);
                          end;
                          
                          looping(balance.timing.it_breaking,items[18].value[0]);
                          player.bike.backbreak.flag:=true;
                          player.bike.backbreak.name:=game.item.arr[game.item.output-1].it.name;
                          player.bike.backbreak.sort:=map[player.position].apartment.items[game.apart.item.output-1].sort;
                          player.bike.backbreak.effection:=map[player.position].apartment.items[game.apart.item.output-1].effection;
                          player.bike.backbreak.maxeffection:=map[player.position].apartment.items[game.apart.item.output-1].maxeffection;
                          player.bike.backbreak.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.backbreak.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.backbreak.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.backbreak.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          if svg.autosave then save;
                          
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region FrontBreak}
                        if game.apart.item.items.sets.output=2 then
                        begin
                        
                          if player.bike.frontbreak.flag then
                          begin
                            looping(balance.timing.break_demontage,bikes[8].value[7]);
                            var subtp: TItem;
                            subtp.tpsort:=6;
                            subtp.name:=player.bike.frontbreak.name;
                            subtp.sort:=player.bike.frontbreak.sort;
                            subtp.effection:=player.bike.frontbreak.effection;
                            subtp.maxeffection:=player.bike.frontbreak.maxeffection;
                            subtp.hitpoints:=player.bike.frontbreak.hitpoints;
                            subtp.maxhitpoints:=player.bike.frontbreak.maxhitpoints;
                            subtp.price:=player.bike.frontbreak.price;
                            subtp.veight:=player.bike.frontbreak.veight;
                            ap_AddItem(player.position,subtp);
                          end;
                          
                          looping(balance.timing.it_breaking,items[18].value[1]);
                          player.bike.frontbreak.flag:=true;
                          player.bike.frontbreak.name:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.frontbreak.sort:=map[player.position].apartment.items[game.apart.item.output-1].sort;
                          player.bike.frontbreak.effection:=map[player.position].apartment.items[game.apart.item.output-1].effection;
                          player.bike.frontbreak.maxeffection:=map[player.position].apartment.items[game.apart.item.output-1].maxeffection;
                          player.bike.frontbreak.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.frontbreak.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.frontbreak.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.frontbreak.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          if svg.autosave then save;
                          
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region BackBCards}
                        if game.apart.item.items.sets.output=3 then
                        begin
                          looping(balance.timing.it_breaking,items[18].value[2]);
                          
                          var subtp: TItem;
                          subtp.tpsort:=8;
                          subtp.name:=player.bike.backbreak.cardname;
                          subtp.cardname:=player.bike.backbreak.cardname;
                          subtp.sort:=player.bike.backbreak.sort;
                          subtp.effection:=player.bike.backbreak.effection;
                          subtp.maxeffection:=player.bike.backbreak.maxeffection;
                          ap_AddItem(player.position,subtp);
                          
                          player.bike.backbreak.cardname:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.backbreak.effection:=map[player.position].apartment.items[game.apart.item.output-1].effection;
                          player.bike.backbreak.maxeffection:=map[player.position].apartment.items[game.apart.item.output-1].maxeffection;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          if svg.autosave then save;
                          
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region FrontBCards}
                        if game.apart.item.items.sets.output=4 then
                        begin
                          looping(balance.timing.it_breaking,items[18].value[3]);
                          
                          var subtp: TItem;
                          subtp.tpsort:=8;
                          subtp.name:=player.bike.frontbreak.cardname;
                          subtp.cardname:=player.bike.frontbreak.cardname;
                          subtp.sort:=player.bike.frontbreak.sort;
                          subtp.effection:=player.bike.frontbreak.effection;
                          subtp.maxeffection:=player.bike.frontbreak.maxeffection;
                          ap_AddItem(player.position,subtp);
                          
                          player.bike.frontbreak.cardname:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.frontbreak.effection:=map[player.position].apartment.items[game.apart.item.output-1].effection;
                          player.bike.frontbreak.maxeffection:=map[player.position].apartment.items[game.apart.item.output-1].maxeffection;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          if svg.autosave then save;
                          
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region BackWheel}
                        if game.apart.item.items.sets.output=5 then
                        begin
                          looping(balance.timing.it_wheeling,items[18].value[4]);
                          
                          var subtp: TItem;
                          subtp.tpsort:=7;
                          subtp.name:=player.bike.backwheel.name;
                          subtp.camerahit:=player.bike.backwheel.camerahit;
                          subtp.needles:=player.bike.backwheel.needles;
                          subtp.hitpoints:=player.bike.backwheel.hitpoints;
                          subtp.maxhitpoints:=player.bike.backwheel.maxhitpoints;
                          subtp.price:=player.bike.backwheel.price;
                          subtp.veight:=player.bike.backwheel.veight;
                          ap_AddItem(player.position,subtp);
                          
                          player.bike.backwheel.name:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.backwheel.camerahit:=map[player.position].apartment.items[game.apart.item.output-1].camerahit;
                          player.bike.backwheel.needles:=map[player.position].apartment.items[game.apart.item.output-1].needles;
                          player.bike.backwheel.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.backwheel.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.backwheel.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.backwheel.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          player.bike.backwheel.pressure:=0;
                          
                          if svg.autosave then save;
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                          
                        end;{$endregion}
                        
                        {$region FrontWheel}
                        if game.apart.item.items.sets.output=6 then
                        begin
                          looping(balance.timing.it_wheeling,items[18].value[5]);
                          
                          var subtp: TItem;
                          subtp.tpsort:=7;
                          subtp.name:=player.bike.frontwheel.name;
                          subtp.camerahit:=player.bike.frontwheel.camerahit;
                          subtp.needles:=player.bike.frontwheel.needles;
                          subtp.hitpoints:=player.bike.frontwheel.hitpoints;
                          subtp.maxhitpoints:=player.bike.frontwheel.maxhitpoints;
                          subtp.price:=player.bike.frontwheel.price;
                          subtp.veight:=player.bike.frontwheel.veight;
                          ap_AddItem(player.position,subtp);
                          
                          player.bike.frontwheel.name:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.frontwheel.camerahit:=map[player.position].apartment.items[game.apart.item.output-1].camerahit;
                          player.bike.frontwheel.needles:=map[player.position].apartment.items[game.apart.item.output-1].needles;
                          player.bike.frontwheel.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.frontwheel.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.frontwheel.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.frontwheel.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          player.bike.frontwheel.pressure:=0;
                          
                          if svg.autosave then save;
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region FRAME with suspension}
                        if game.apart.item.items.sets.output=-7 then
                        begin
                          looping(balance.timing.bsusp_demontage,bikes[5].value[10]);
                          looping(balance.timing.it_framing,items[18].value[6]);
                          
                          var subtp1: TItem;
                          subtp1.tpsort:=1;
                          subtp1.name:=player.bike.frame.name;
                          subtp1.material:=player.bike.frame.material;
                          subtp1.suspensionflag:=player.bike.frame.suspensionflag;
                          
                          subtp1.hitpoints:=player.bike.frame.hitpoints;
                          subtp1.maxhitpoints:=player.bike.frame.maxhitpoints;
                          subtp1.price:=player.bike.frame.price;
                          subtp1.veight:=player.bike.frame.veight;
                          ap_AddItem(player.position,subtp1);
                          
                          var subtp2: TItem;
                          subtp2.tpsort:=3;
                          subtp2.name:=player.bike.bsusp.name;
                          subtp2.suspension:=player.bike.bsusp.suspension;
                          subtp2.travel:=player.bike.bsusp.travel;
                          subtp2.block:=player.bike.bsusp.block;
                          
                          subtp2.hitpoints:=player.bike.bsusp.hitpoints;
                          subtp2.maxhitpoints:=player.bike.bsusp.maxhitpoints;
                          subtp2.price:=player.bike.bsusp.price;
                          subtp2.veight:=player.bike.bsusp.veight;
                          ap_AddItem(player.position,subtp2);
                          
                          player.bike.bsusp.flag:=false;
                          
                          player.bike.frame.name:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.frame.material:=map[player.position].apartment.items[game.apart.item.output-1].material;
                          player.bike.frame.suspensionflag:=map[player.position].apartment.items[game.apart.item.output-1].suspensionflag;
                          player.bike.frame.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.frame.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.frame.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.frame.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          
                          if svg.autosave then save;
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region FRAME without suspension}
                        if game.apart.item.items.sets.output=7 then
                        begin
                          looping(balance.timing.it_framing,items[18].value[6]);
                          
                          var subtp: TItem;
                          subtp.tpsort:=1;
                          subtp.name:=player.bike.frame.name;
                          subtp.material:=player.bike.frame.material;
                          subtp.suspensionflag:=player.bike.frame.suspensionflag;
                          
                          subtp.hitpoints:=player.bike.frame.hitpoints;
                          subtp.maxhitpoints:=player.bike.frame.maxhitpoints;
                          subtp.price:=player.bike.frame.price;
                          subtp.veight:=player.bike.frame.veight;
                          ap_AddItem(player.position,subtp);
                          
                          player.bike.frame.name:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.frame.material:=map[player.position].apartment.items[game.apart.item.output-1].material;
                          player.bike.frame.suspensionflag:=map[player.position].apartment.items[game.apart.item.output-1].suspensionflag;
                          player.bike.frame.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.frame.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.frame.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.frame.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          
                          if svg.autosave then save;
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region FORK}
                        if game.apart.item.items.sets.output=8 then
                        begin
                          looping(balance.timing.it_forking,items[18].value[7]);
                          
                          var subtp: TItem;
                          subtp.tpsort:=2;
                          subtp.name:=player.bike.fork.name;
                          subtp.suspensionflag:=player.bike.fork.suspensionflag;
                          if player.bike.fork.suspensionflag then
                          begin
                            subtp.suspension:=player.bike.fork.suspension;
                            subtp.travel:=player.bike.fork.travel;
                            subtp.block:=player.bike.fork.block;
                          end
                          else
                          begin
                            subtp.suspension:=0;
                            subtp.travel:=0;
                            subtp.block:=false;
                          end;
                          subtp.hitpoints:=player.bike.fork.hitpoints;
                          subtp.maxhitpoints:=player.bike.fork.maxhitpoints;
                          subtp.price:=player.bike.fork.price;
                          subtp.veight:=player.bike.fork.veight;
                          
                          
                          ap_AddItem(player.position,subtp);
                          player.bike.fork.blocks:=false;
                          player.bike.fork.name:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.fork.suspensionflag:=map[player.position].apartment.items[game.apart.item.output-1].suspensionflag;
                          if map[player.position].apartment.items[game.apart.item.output-1].suspensionflag then
                          begin
                            player.bike.fork.block:=map[player.position].apartment.items[game.apart.item.output-1].block;
                            player.bike.fork.suspension:=map[player.position].apartment.items[game.apart.item.output-1].suspension;
                            player.bike.fork.travel:=map[player.position].apartment.items[game.apart.item.output-1].travel;
                          end;
                          player.bike.fork.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.fork.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.fork.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.fork.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          
                          if svg.autosave then save;
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region BSUSP}
                        if game.apart.item.items.sets.output=9 then
                        begin
                          if player.bike.bsusp.flag then
                          begin
                            looping(balance.timing.bsusp_demontage,bikes[5].value[10]);
                            looping(balance.timing.it_bsusping,items[18].value[8]);
                          end
                          else
                          begin
                            looping(balance.timing.it_bsusping,items[18].value[8]);
                          end;
                          
                          if player.bike.bsusp.flag then
                          begin
                            var subtp: TItem;
                            subtp.tpsort:=3;
                            subtp.name:=player.bike.bsusp.name;
                            subtp.suspension:=player.bike.bsusp.suspension;
                            subtp.travel:=player.bike.bsusp.travel;
                            subtp.block:=player.bike.bsusp.block;
                              
                            subtp.hitpoints:=player.bike.bsusp.hitpoints;
                            subtp.maxhitpoints:=player.bike.bsusp.maxhitpoints;
                            subtp.price:=player.bike.bsusp.price;
                            subtp.veight:=player.bike.bsusp.veight;
                            
                            ap_AddItem(player.position,subtp);
                          end;
                          
                          player.bike.bsusp.flag:=true;
                          player.bike.bsusp.blocks:=false;
                          
                          player.bike.bsusp.name:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.bsusp.block:=map[player.position].apartment.items[game.apart.item.output-1].block;
                          player.bike.bsusp.suspension:=map[player.position].apartment.items[game.apart.item.output-1].suspension;
                          player.bike.bsusp.travel:=map[player.position].apartment.items[game.apart.item.output-1].travel;
                          player.bike.bsusp.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.bsusp.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.bsusp.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.bsusp.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          
                          if svg.autosave then save;
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region TRANSMISSION}
                        if game.apart.item.items.sets.output=10 then
                        begin
                          looping(balance.timing.it_framing,items[18].value[9]);
                          
                          var subtp: TItem;
                          subtp.tpsort:=4;
                          subtp.name:=player.bike.transmission.name;
                          subtp.count:=player.bike.transmission.count;
                          subtp.fores:=player.bike.transmission.fores;
                          
                          subtp.hitpoints:=player.bike.transmission.hitpoints;
                          subtp.maxhitpoints:=player.bike.transmission.maxhitpoints;
                          subtp.price:=player.bike.transmission.price;
                          subtp.veight:=player.bike.transmission.veight;
                          ap_AddItem(player.position,subtp);
                          
                          player.bike.transmission.name:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.transmission.count:=map[player.position].apartment.items[game.apart.item.output-1].count;
                          player.bike.transmission.fores:=map[player.position].apartment.items[game.apart.item.output-1].fores;
                          player.bike.transmission.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.transmission.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.transmission.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.transmission.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          
                          if svg.autosave then save;
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                        {$region RUDDER}
                        if game.apart.item.items.sets.output=11 then
                        begin
                          looping(balance.timing.it_framing,items[18].value[10]);
                          
                          var subtp: TItem;
                          subtp.tpsort:=5;
                          subtp.name:=player.bike.rudder.name;
                          subtp.sort:=player.bike.rudder.sort;
                          
                          subtp.hitpoints:=player.bike.rudder.hitpoints;
                          subtp.maxhitpoints:=player.bike.rudder.maxhitpoints;
                          subtp.price:=player.bike.rudder.price;
                          subtp.veight:=player.bike.rudder.veight;
                          ap_AddItem(player.position,subtp);
                          
                          player.bike.rudder.name:=map[player.position].apartment.items[game.apart.item.output-1].name;
                          player.bike.rudder.sort:=map[player.position].apartment.items[game.apart.item.output-1].sort;
                          player.bike.rudder.hitpoints:=map[player.position].apartment.items[game.apart.item.output-1].hitpoints;
                          player.bike.rudder.maxhitpoints:=map[player.position].apartment.items[game.apart.item.output-1].maxhitpoints;
                          player.bike.rudder.price:=map[player.position].apartment.items[game.apart.item.output-1].price;
                          player.bike.rudder.veight:=map[player.position].apartment.items[game.apart.item.output-1].veight;
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          
                          if svg.autosave then save;
                          game.apart.item.items.sets.status:=false;
                          game.apart.item.items.status:=false;
                        end;{$endregion}
                        
                      end;
                    end;
                    {$endregion}
                    
                    {$region To Items}
                    if game.apart.item.items.output=2 then
                    begin
                      game.apart.item.items.replace.status:=true;
                      while game.apart.item.items.replace.status do
                      begin
                        Console.Clear;KTX.resize;
                        outnull(game.apart.item.items.replace.output, game.apart.item.items.replace.input);upface;
                        
                        Console.SetCursorPosition(1,2);write(items[19].value[4],'?');
                        if allveight(map[player.position].apartment.items[game.apart.item.output-1].veight)<=player.maxveight then
                        begin
                          if player.energy>=balance.timing.it_replacing.energy then
                          begin
                            Console.SetCursorPosition(1,4);write('(1) ',items[19].value[1]);
                          end
                          else
                          begin
                            Console.ForegroundColor:=consolecolor.Gray;
                            Console.SetCursorPosition(1,4);write('(1) ',items[19].value[1]);
                            Console.ForegroundColor:=consolecolor.Red;
                            write(' (',items[0].value[7],')');
                            Console.ForegroundColor:=consolecolor.Black;
                          end;
                        end
                        else
                        begin
                          Console.ForegroundColor:=consolecolor.Gray;
                          Console.SetCursorPosition(1,4);write('(1) ',items[19].value[1]);
                          Console.ForegroundColor:=consolecolor.Red;
                          write(' (',items[0].value[0],')');
                          Console.ForegroundColor:=consolecolor.Black;
                        end;
                        Console.SetCursorPosition(1,5);write('(0) ',items[19].value[2]);
                        
                        KTX.read_1;
                        while (game.apart.item.items.replace.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                        begin
                          Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                          readln(game.apart.item.items.replace.input);
                        end;
                        KTX.read_0;
                        
                        if game.apart.item.items.replace.input.Left(1)='/' then con(game.apart.item.items.replace.input);
                        if game.apart.item.items.replace.input='0' then game.apart.item.items.replace.output:=0;
                        if (game.apart.item.items.replace.input='1')
                        and (player.energy>=balance.timing.it_replacing.energy) then game.apart.item.items.replace.output:=1;
                        
                        if game.apart.item.items.replace.output=0 then
                        begin
                          game.apart.item.items.replace.status:=false;
                        end;
                        
                        if game.apart.item.items.replace.output=1 then
                        begin
                          looping(balance.timing.it_replacing,items[19].value[5]);
                          var it_cur: TItem = map[player.position].apartment.items[game.apart.item.output-1];
                          
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          AddItem(it_cur);
                          
                          if svg.autosave then save;
                          game.apart.item.items.replace.status:=false;
                          game.apart.item.items.status:=false;
                        end;
                        
                      end;
                    end;{$endregion}
                    
                    {$region Drop}
                    if game.apart.item.items.output=3 then
                    begin
                      game.apart.item.items.drop.status:=true;
                      while game.apart.item.items.drop.status do
                      begin
                        Console.Clear;KTX.resize;
                        outnull(game.item.item.drop.output, game.apart.item.items.drop.input);upface;
                        
                        Console.SetCursorPosition(1,2);write(items[20].value[0],' ');
                        case map[player.position].apartment.items[game.apart.item.output-1].tpsort of
                          1..8: write(items[20].value[map[player.position].apartment.items[game.apart.item.output-1].tpsort+2],' ');
                        end;
                        write(map[player.position].apartment.items[game.apart.item.output-1].name);write('?');
                        
                        Console.SetCursorPosition(1,4);write('(1) ',items[20].value[1]);
                        Console.SetCursorPosition(1,5);write('(0) ',items[20].value[2]);
                        
                        KTX.read_1;
                        while (game.apart.item.items.drop.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                        begin
                          Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                          readln(game.apart.item.items.drop.input);
                        end;
                        KTX.read_0;
                        
                        if game.apart.item.items.drop.input.Left(1)='/' then con(game.apart.item.items.drop.input);
                        
                        if game.apart.item.items.drop.input='0' then game.apart.item.items.drop.output:=0;
                        if game.apart.item.items.drop.input='1' then game.apart.item.items.drop.output:=1;
                        
                        if game.apart.item.items.drop.output=0 then
                        begin
                          game.apart.item.items.drop.status:=false;
                        end;
                        
                        if game.apart.item.items.drop.output=1 then
                        begin
                          ap_RemoveItem(player.position,game.apart.item.output-1);
                          game.apart.item.items.drop.status:=false;
                          game.apart.item.items.status:=false;
                          if svg.autosave then save;
                        end;
                      end;
                    end;{$endregion}
                    
                  end;
                end;
                
                if map[player.position].apartment.itemcount=0 then game.apart.item.status:=false;
              end;
            end;{$endregion}
            
            {$region APART.BUY}
            if game.apart.output=2 then
            begin
              game.apart.buy.status:=true;
              while game.apart.buy.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.apart.buy.output, game.apart.buy.input);upface;
                
                var gapb_price: integer;
                case map[player.position].sort of
                  0: gapb_price:=Round(map[player.position].kprice*balance.apartmentprice0);
                  1: gapb_price:=Round(map[player.position].kprice*balance.apartmentprice1);
                  2: gapb_price:=Round(map[player.position].kprice*balance.apartmentprice2);
                end;
                
                Console.SetCursorPosition(1,2);write(inter[13].face[0]);
                
                Console.SetCursorPosition(1,4);write(inter[13].face[1],': ',player.nickname);
                Console.SetCursorPosition(1,5);write(inter[13].face[2],': ',types[map[player.position].sort],' ',map[player.position].name);
                Console.SetCursorPosition(1,6);write(inter[13].face[3],': ',dgt(gapb_price),' ',rub(gapb_price));
                
                Console.SetCursorPosition(1,8);write(inter[13].face[4],'?');
                
                if (player.money>=gapb_price) then
                begin
                  Console.SetCursorPosition(1,KTX.maxy-5);write('(1) ',inter[13].face[5]);
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  Console.SetCursorPosition(1,KTX.maxy-5);write('(1) ',inter[13].face[5]);
                  Console.ForegroundColor:=consolecolor.Red;
                  write(' (',inter[13].face[7],')');
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                
                Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[13].face[6]);
                
                KTX.read_1;
                while (game.apart.buy.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.apart.buy.input);
                end;
                KTX.read_0;
                
                if game.apart.buy.input.Left(1)='/' then con(game.apart.buy.input);
                
                if game.apart.buy.input='0' then game.apart.buy.output:=0;
                
                if (game.apart.buy.input='1')
                and (player.money>=gapb_price) then game.apart.buy.output:=1;
                
                if game.apart.buy.output=0 then
                begin
                  game.apart.buy.status:=false;
                end;
                
                if game.apart.buy.output=1 then
                begin
                  looping(balance.timing.ap_buy,inter[13].face[8]);
                  map[player.position].apartment.apartment:=true;
                  case map[player.position].sort of
                    0: map[player.position].apartment.price:=balance.apartmentprice0;
                    1: map[player.position].apartment.price:=balance.apartmentprice1;
                    2: map[player.position].apartment.price:=balance.apartmentprice2;
                  end;
                  player.money-=gapb_price;
                  if svg.autosave then save;
                  game.apart.buy.status:=false;
                end;
                
              end;
            end;{$endregion}
            
            {$region APART.SELL}
            if game.apart.output=3 then
            begin
              game.apart.sell.status:=true;
              while game.apart.sell.status do
              begin
                Console.Clear;KTX.resize;
                outnull(game.apart.sell.output, game.apart.sell.input);upface;
                
                Console.SetCursorPosition(1,2);
                write(inter[14].face[0]);
                
                Console.SetCursorPosition(1,4);
                write(inter[14].face[1],': ',player.nickname);
                
                Console.SetCursorPosition(1,5);
                write(inter[14].face[2],': ',types[map[player.position].sort],' ',map[player.position].name);
                
                var gaps_price:=Round(map[player.position].apartment.price*map[player.position].kprice);
                
                Console.SetCursorPosition(1,6);
                write(inter[14].face[3],': ',dgt(gaps_price),' ',rub(gaps_price));
                
                Console.SetCursorPosition(1,8);write(inter[14].face[4],'?');
                Console.SetCursorPosition(1,9);write(inter[14].face[5]);
                
                Console.SetCursorPosition(1,KTX.maxy-5);write('(1) ',inter[14].face[6]);
                Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[14].face[7]);
                
                KTX.read_1;
                while (game.apart.sell.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(game.apart.sell.input);
                end;
                KTX.read_0;
                
                if game.apart.sell.input.Left(1)='/' then con(game.apart.sell.input);
                
                if game.apart.sell.input='0' then game.apart.sell.output:=0;
                
                if game.apart.sell.input='1' then game.apart.sell.output:=1;
                
                if game.apart.sell.output=0 then
                begin
                  game.apart.sell.status:=false;
                end;
                
                if game.apart.sell.output=1 then
                begin
                  looping(balance.timing.ap_sell,inter[14].face[8]);
                  player.money+=gaps_price;
                  map[player.position].apartment.apartment:=false;
                  if svg.autosave then save;
                  game.apart.sell.status:=false;
                end;
              end;
            end;{$endregion}
            
            
          end;
        end;{$endregion}
        
        if game.output=7 then
        {$region GAME.QUESTS}
        begin
          var qq: TBlock;
          qq.status := true;
          SubQuest := true;
          while qq.status do
          begin
            var _qqc: boolean = CheckAllOnSending;
            Console.Clear;KTX.resize;
            outnull(qq.output, qq.input);upface;
            
            var qsize: integer = 0;
            
            for var i:=0 to questcount-1 do
            begin
              if quests[i].stage>0 then inc(qsize);
            end;
            
            var _Const := 11;
            
            if qsize>=(KTX.maxy-_Const) then Console.SetBufferSize(KTX.maxx,qsize+_Const);
            
            Console.SetCursorPosition(1,2);write(Rome(player.level));
            Console.SetCursorPosition(KTX.maxx - 1 - Rome(player.level+1).Length,2);write(Rome(player.level+1));
            
            var pcent:=Round(player.experience/(balance.levelup.expmin+balance.levelup.expk*player.level)*(KTX.maxx-2));
            var strpcent:=Round(player.experience/(balance.levelup.expmin+balance.levelup.expk*player.level)*100)+'%';
            Console.SetCursorPosition((KTX.maxx div 2) - (strpcent.Length div 2),2);
            write(strpcent);
            
            Console.SetCursorPosition(1,3);
            Console.ForegroundColor:=consolecolor.DarkGreen;
            loop pcent do write(KTX.subgraph_a[1]);
            Console.ForegroundColor:=consolecolor.DarkGray;
            loop KTX.maxx-2-pcent do write(KTX.subgraph_a[1]);
            Console.ForegroundColor:=consolecolor.Black;
            
            var counter: integer = 0;
            for var i:=0 to questcount-1 do
            begin
              if (quests[i].stage>0) then
              begin
                Console.SetCursorPosition(1,5+counter);
                counter+=1;
                write(quests[i].name,': ');
                if quests[i].stagesname<>nil then
                for var j:=0 to quests[i].stagesname.Length-1 do
                begin
                 if quests[i].stage=quests[i].stagesname[j].id then write(quests[i].stagesname[j].purpose);
                end;
              end;
            end;
            Console.SetCursorPosition(1,6+counter);
            if not _qqc then
            begin;
              if AllVeight(balance.Send.Sends[0].veight)<=player.maxveight then
              begin
                write('(1) ',inter[33].face[0]);
              end
              else
              begin
                Console.ForegroundColor:=consolecolor.Gray;
                write('(1) ',inter[33].face[0]);
                Console.ForegroundColor:=consolecolor.Red;
                write(' (',items[0].value[0],')');
                Console.ForegroundColor:=consolecolor.Black;
              end;
            end
            else
            begin
              Console.ForegroundColor:=consolecolor.Gray;
              write('(1) ',inter[33].face[0]);
              Console.ForegroundColor:=consolecolor.Red;
              write(' (',inter[35].face[0],')');
              Console.ForegroundColor:=consolecolor.Black;
            end;
            Console.SetCursorPosition(1,7+counter);write('(0) ',inter[0].face[5]);
            
            KTX.read_1;
            while (qq.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              if qsize>=(KTX.maxy-_Const) then
              begin
                Console.SetCursorPosition(1,qsize+_Const-1);
                Console.SetCursorPosition(1,qsize+_Const-2);
              end
              else Console.SetCursorPosition(1,KTX.maxy-2);
              write(': ');
              readln(qq.input);
            end;
            KTX.read_0;
            
            if qq.input.Left(1)='/' then con(qq.input);
            
            if qq.input='0' then qq.output:=0;
            
            if (qq.input='1') and (not _qqc) then qq.output:=1;
            
            if qq.output=0 then qq.status:=false;
            
            if qq.output=1 then
            begin
              var wt: TItem;
              if AllVeight(balance.Send.Sends[0].veight)<=player.maxveight then
              begin
                var k: integer;
                var x:=balance.Send.Sends;
                var ids: List<integer> = new List<integer>;
                ids.Add(0);
                for var i:=x.Length-1 downto 0 do
                begin
                  if AllVeight(x[i].veight)<player.maxveight then
                  begin
                    ids.Add(i);
                  end;
                end;
                k:=ids[PABCSystem.Random(ids.Count)];
                wt.name:=inter[34].face[k];
                repeat
                  wt.town:=PABCSystem.Random(map.Length);
                until wt.town <> player.position;
                wt.tpsort:=11;
                wt.timeStart:=player.time;
                wt.veight:=balance.Send.Sends[k].veight;
                wt.timeMax:=player.time.AddDays(balance.Send.Sends[k].days+(Round(distance(map[player.position],map[wt.town])) div (player.maxenergy div 1000)));
                wt.price:=Round(SendKF()*PABCSystem.Random(balance.Send.Sends[k].minprice,balance.Send.Sends[k].maxprice)*(Round(distance(map[player.position],map[wt.town]))/100));
                var qs: TBlock;
                qs.status:=true;
                while qs.status do
                begin
                  Console.Clear;KTX.resize;
                  outnull(qs.output, qs.input);upface;
                  
                  Console.SetCursorPosition(1,2);write(inter[34].face[k]);
                  Console.SetCursorPosition(1,3);write(items[0].value[5],': ',types[map[wt.town].sort],' ',map[wt.town].name);
                  Console.SetCursorPosition(1,4);write(items[0].value[6],': ');
                  var str: string;
                  if svg.time_type=0 then
                  begin
                    str:=str+wt.timemax.Day;
                    str:=str+' '+month[wt.timemax.Month-1]+' '+wt.timemax.Year+' ';
                  end;
                  if svg.time_type=1 then
                  begin
                    str:=str+wt.timemax.Day;
                    str:=str+' '+month[wt.timemax.Month-1].Left(3)+' '+wt.timemax.Year+' ';
                  end;
                  if svg.time_type=2 then
                  begin
                    if wt.timemax.Day<10 then str:=str+'0'+str+wt.timemax.Day+'.'
                    else str:=str+wt.timemax.Day+'.';
                    if wt.timemax.Month<10 then str:=str+'0'+str+wt.timemax.Month+'.'
                    else str:=str+wt.timemax.Month+'.';
                    str:=str+wt.timemax.Year+' ';
                  end;
                  str:=str+wt.timemax.Hour;
                  str:=str+':';
                  if wt.timemax.Minute < 10 then str:=str+'0'+wt.timemax.Minute
                  else str:=str+wt.timemax.Minute;
                  write(str);
                  
                  Console.SetCursorPosition(1,6);write('(1) ',inter[35].face[1]);
                  Console.SetCursorPosition(1,7);write('(2) ',inter[35].face[2]);
                  Console.SetCursorPosition(1,8);write('(3) ',inter[35].face[3]);
                  Console.SetCursorPosition(1,9);write('(0) ',inter[0].face[5]);
                  
                  KTX.read_1;
                  while (qs.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                  begin
                    Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                    readln(qs.input);
                  end;
                  KTX.read_0;
                  
                  if qs.input.Left(1)='/' then con(qs.input);
                  
                  if qs.input='0' then qs.output:=0;
                  
                  if qs.input='1' then qs.output:=1;
                  
                  if qs.input='2' then qs.output:=2;
                  
                  if qs.input='3' then qs.output:=3;
                  
                  if qs.output=0 then qs.status:=false;
                  
                  if qs.output=1 then
                  begin
                    qs.status:=false;
                    AddItem(wt);
                  end;
                  
                  if qs.output=2 then
                  begin
                    x:=balance.Send.Sends;
                    ids:= new List<integer>;
                    ids.Add(0);
                    for var i:=x.Length-1 downto 0 do
                    begin
                      if AllVeight(x[i].veight)<player.maxveight then
                      begin
                        ids.Add(i);
                      end;
                    end;
                    k:=ids[PABCSystem.Random(ids.Count)];
                    wt.name:=inter[34].face[k];
                    repeat
                      wt.town:=PABCSystem.Random(map.Length);
                    until wt.town <> player.position;
                    wt.tpsort:=11;
                    wt.timeStart:=player.time;
                    wt.veight:=balance.Send.Sends[k].veight;
                    wt.timeMax:=player.time.AddDays(balance.Send.Sends[k].days+(Round(distance(map[player.position],map[wt.town])) div (player.maxenergy div 2000)));
                    wt.price:=Round(SendKF()*PABCSystem.Random(balance.Send.Sends[k].minprice,balance.Send.Sends[k].maxprice)*(Round(distance(map[player.position],map[wt.town]))/50));
                  end;
                  
                  if qs.output=3 then
                  begin
                    var s:=wt.town+' '+mapviewer.minscalable+' '+mapviewer.maxscalable+' '+mapviewer.stepscalable;
                    if FileExists('mapview.exe') then exec('mapview.exe',s);
                  end;
                end;
              end;
            end;
          end;
        end;
        {$endregion}
        
        if game.output=8 then
        {$region GAME.WAIT}
        begin
          var wt: TBlock;
          wt.status:=true;
          while wt.status do
          begin
            Console.Clear;KTX.resize;
            outnull(wt.output, wt.input);upface;
            
            Console.SetCursorPosition(1,2);write(inter[32].face[0],' (',inter[0].face[15],': ',balance.Wait.maxminutes,')');
            Console.SetCursorPosition(1,3);write(inter[32].face[1]);
            
            KTX.read_1;
            while (wt.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
              readln(wt.input);
            end;
            KTX.read_0;
            
            if wt.input.Left(1)='/' then con(wt.input);
            
            if wt.input='0' then wt.output:=0;
            
            var e,wt2: integer;
            val(wt.input,wt2,e);
            if e=0 then
            begin
              if (wt2>0) and (wt2<=balance.Wait.maxminutes) and (player.energy>=-Round(wt2*balance.Wait.energyatminute)) then wt.output:=1;
            end;
            
            if wt.output=0 then wt.status:=false;
            
            if wt.output=1 then
            begin
              GoWait(wt2);
            end;
          end;
        end;
        {$endregion}
        
        if game.output=9 then
        {$region GAME.SLEEP}
        begin
          var slp: TBlock;
          slp.status:=true;
          while slp.status do
          begin
            Console.Clear;KTX.resize;
            outnull(slp.output, slp.input);upface;
            
            var Stat:=player.energy/player.maxenergy;
            var AtHour: real;
            if player.level>balance.Sleep.pcahmaxlvl then AtHour:=balance.Sleep.pcentathour+balance.Sleep.pcahadd*balance.Sleep.pcahmaxlvl
            else AtHour:=balance.Sleep.pcentathour+balance.Sleep.pcahadd*player.level;
            
            Console.SetCursorPosition(1,2);write(inter[29].face[0],': ');
            if (stat<=balance.Sleep._90100.max) and (stat>=balance.Sleep._90100.min) then
            begin
              Console.ForegroundColor:=Balance.Sleep._90100.color;
              write(Round(stat*100),'%, ');
              write(inter[29].face[1]);
            end;
            if (stat<balance.Sleep._7590.max) and (stat>=balance.Sleep._7590.min) then
            begin
              Console.ForegroundColor:=Balance.Sleep._7590.color;
              write(Round(stat*100),'%, ');
              write(inter[29].face[2]);
            end;
            if (stat<balance.Sleep._5075.max) and (stat>=balance.Sleep._5075.min) then
            begin
              Console.ForegroundColor:=Balance.Sleep._5075.color;
              write(Round(stat*100),'%, ');
              write(inter[29].face[3]);
            end;
            if (stat<balance.Sleep._2550.max) and (stat>=balance.Sleep._2550.min) then
            begin
              Console.ForegroundColor:=Balance.Sleep._2550.color;
              write(Round(stat*100),'%, ');
              write(inter[29].face[4]);
            end;
            if (stat<balance.Sleep._025.max) and (stat>=balance.Sleep._025.min) then
            begin
              Console.ForegroundColor:=Balance.Sleep._025.color;
              write(Round(stat*100),'%, ');
              write(inter[29].face[5]);
            end;
            Console.ForegroundColor:=ConsoleColor.Black;
            
            if stat<balance.Sleep._90100.min then
            begin
              Console.SetCursorPosition(1,4);
              if map[player.position].apartment.apartment then
              begin
                write('(1) ',inter[29].face[6]);
              end
              else
              begin
                Console.ForegroundColor:=consolecolor.Gray;
                write('(1) ',inter[29].face[6]);
                Console.ForegroundColor:=consolecolor.Red;
                case map[player.position].sort of
                  0..2: write(' (',inter[29].face[7+map[player.position].sort],')');
                end;
                Console.ForegroundColor:=consolecolor.Black;
              end;
              
              Console.SetCursorPosition(1,5);            
              if player.tent then write('(2) ',inter[29].face[11])
              else
              begin
                Console.ForegroundColor:=consolecolor.Gray;
                write('(2) ',inter[29].face[11]);
                Console.ForegroundColor:=consolecolor.Red;
                write(' (',inter[29].face[12],')');
                Console.ForegroundColor:=consolecolor.Black;
              end;
              
              Console.SetCursorPosition(1,6);write('(3) ',inter[29].face[10]);
              Console.SetCursorPosition(1,7);write('(4) ',inter[29].face[13]);
            end
            else
            begin
              Console.ForegroundColor:=consolecolor.Gray;
              Console.SetCursorPosition(1,4);write('(1) ',inter[29].face[6]);
              Console.SetCursorPosition(1,5);write('(2) ',inter[29].face[11]);
              Console.SetCursorPosition(1,6);write('(3) ',inter[29].face[10]);
              Console.SetCursorPosition(1,7);write('(4) ',inter[29].face[13]);
              Console.ForegroundColor:=consolecolor.Black;
            end;
            
            Console.SetCursorPosition(1,8);write('(0) ',inter[0].face[5]);
            
            
            KTX.read_1;
            while (slp.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
              readln(slp.input);
            end;
            KTX.read_0;
            
            if slp.input.Left(1)='/' then con(slp.input);
            
            if slp.input='0' then slp.output:=0;
            
            if  (Stat<balance.Sleep._90100.min) then
            begin
              if (slp.input='1') and (map[player.position].apartment.apartment) then slp.output:=1;
              
              if (slp.input='2') and (player.tent) then slp.output:=2;
              
              if (slp.input='3') then slp.output:=3;
              
              if (slp.input='4') then slp.output:=4;
            end;
            
            if slp.output=0 then slp.status:=false;
            
            
            {$region Sleep at home}
            if slp.output=1 then
            begin
              var _sleep: TBlock;
              _sleep.status:=true;
              while _sleep.status do
              begin
                Console.Clear;KTX.resize;
                outnull(_sleep.output, _sleep.input);upface;
                var _Alarm:=new DateTime(Alarm.Date);
                var Stats:=new TimeSpan(Round((1-Stat)/AtHour*System.TimeSpan.TicksPerHour/System.TimeSpan.TicksPerMinute*
                balance.Sleep.eff_Apart)*System.TimeSpan.TicksPerMinute);
                
                Console.SetCursorPosition(1,2);write(inter[29].face[14]);
                Console.SetCursorPosition(1,4);write('(1) ',inter[29].face[17]);
                Console.SetCursorPosition(1,5);
                if Alarm.status then
                begin
                  write('(2) ',inter[29].face[19],': ',_Alarm.Hour.ToString,':',_Alarm.Minute.ToString.PadLeft(2,'0'));
                end
                else
                begin
                  write('(2) ',inter[29].face[18]);
                end;
                Console.SetCursorPosition(1,6);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (_sleep.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(_sleep.input);
                end;
                KTX.read_0;
                
                if _sleep.input.Left(1)='/' then con(_sleep.input);
                
                if _sleep.input='0' then _sleep.output:=0;
                
                if _Sleep.output=0 then _Sleep.status:=false;
                
                if _Sleep.input='1' then
                begin
                  GoSleep(SleepType.Apart,Stats);
                  _Sleep.status:=false;
                end;
                
                if _Sleep.input='2' then
                begin
                  SetAlarm;
                end;
              end;
              
            end;
            {$endregion}
            
            {$region Sleep at tent}
            if slp.output=2 then
            begin
              var _sleep: TBlock;
              _sleep.status:=true;
              while _sleep.status do
              begin
                Console.Clear;KTX.resize;
                outnull(_sleep.output, _sleep.input);upface;
                var _Alarm:=new DateTime(Alarm.Date);
                var Stats:=new TimeSpan(Round((1-Stat)/AtHour*System.TimeSpan.TicksPerHour/System.TimeSpan.TicksPerMinute*
                balance.Sleep.eff_Tent)*System.TimeSpan.TicksPerMinute);
                
                Console.SetCursorPosition(1,2);write(inter[29].face[15]);
                Console.SetCursorPosition(1,4);write('(1) ',inter[29].face[17]);
                Console.SetCursorPosition(1,5);
                if Alarm.status then
                begin
                  write('(2) ',inter[29].face[19],': ',_Alarm.Hour.ToString,':',_Alarm.Minute.ToString.PadLeft(2,'0'));
                end
                else
                begin
                  write('(2) ',inter[29].face[18]);
                end;
                Console.SetCursorPosition(1,6);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (_sleep.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(_sleep.input);
                end;
                KTX.read_0;
                
                if _sleep.input.Left(1)='/' then con(_sleep.input);
                
                if _sleep.input='0' then _sleep.output:=0;
                
                if _Sleep.output=0 then _Sleep.status:=false;
                
                if _Sleep.input='1' then
                begin
                  GoSleep(SleepType.Tent,Stats);
                  _Sleep.status:=false;
                end;
                
                if _Sleep.input='2' then
                begin
                  SetAlarm;
                end;
              end;
              
            end;
            {$endregion}
                        
            {$region Sleep at Hotel}
            if slp.output=3 then
            begin
              var _sleep: TBlock;
              _sleep.status:=true;
              while _sleep.status do
              begin
                Console.Clear;KTX.resize;
                outnull(_sleep.output, _sleep.input);upface;
                var _Alarm:=new DateTime(Alarm.Date);
                var Stats:=new TimeSpan(Round((1-Stat)/AtHour*System.TimeSpan.TicksPerHour/System.TimeSpan.TicksPerMinute*
                balance.Sleep.eff_Hotel)*System.TimeSpan.TicksPerMinute);
                
                var price: integer;
                var (_slvlmax, _sadd, _smin):=(
                balance.Sleep.HotelPricelvlmax[map[player.position].sort],
                balance.Sleep.HotelPriceadd[map[player.position].sort],
                balance.Sleep.HotelPricemin[map[player.position].sort]
                );
                if player.level<_slvlmax then
                begin
                  price:=Round((_smin+_sadd*player.level)*map[player.position].kprice);
                end
                else
                begin
                  price:=Round((_smin+_sadd*_slvlmax)*map[player.position].kprice);
                end;
                
                Console.SetCursorPosition(1,2);write(inter[29].face[16]);
                Console.SetCursorPosition(1,4);
                
                if player.money>=price then
                begin
                  write('(1) ',inter[29].face[17],' (',dgt(price),' ',rub(price),')');
                end
                else
                begin
                  Console.ForegroundColor:=consolecolor.Gray;
                  write('(1) ',inter[29].face[17],' (',dgt(price),' ',rub(price),')');
                  Console.ForegroundColor:=consolecolor.Black;
                end;
                
                Console.SetCursorPosition(1,5);
                if Alarm.status then
                begin
                  write('(2) ',inter[29].face[19],': ',_Alarm.Hour.ToString,':',_Alarm.Minute.ToString.PadLeft(2,'0'));
                end
                else
                begin
                  write('(2) ',inter[29].face[18]);
                end;
                Console.SetCursorPosition(1,6);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (_sleep.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(_sleep.input);
                end;
                KTX.read_0;
                
                if _sleep.input.Left(1)='/' then con(_sleep.input);
                
                if _sleep.input='0' then _sleep.output:=0;
                
                if _Sleep.output=0 then _Sleep.status:=false;
                
                if (_Sleep.input='1') and (player.money>=price) then
                begin
                  GoSleep(SleepType.Hotel,Stats);
                  _Sleep.status:=false;
                  player.money-=price;
                end;
                
                if _Sleep.input='2' then
                begin
                  SetAlarm;
                end;
              end;
              
            end;
            {$endregion}
            
            {$region Sleep at Street}
            if slp.output=4 then
            begin
              if svg.CRSP='' then ResetRandomStreetPlace();
              var _sleep: TBlock;
              _sleep.status:=true;
              while _sleep.status do
              begin
                Console.Clear;KTX.resize;
                outnull(_sleep.output, _sleep.input);upface;
                var _Alarm:=new DateTime(Alarm.Date);
                var Stats:=new TimeSpan(Round((1-Stat)/AtHour*System.TimeSpan.TicksPerHour/System.TimeSpan.TicksPerMinute*
                balance.Sleep.eff_Street)*System.TimeSpan.TicksPerMinute);
                
                Console.SetCursorPosition(1,2);write(svg.CRSP);
                Console.SetCursorPosition(1,4);write('(1) ',inter[29].face[17]);
                Console.SetCursorPosition(1,5);
                if Alarm.status then
                begin
                  write('(2) ',inter[29].face[19],': ',_Alarm.Hour.ToString,':',_Alarm.Minute.ToString.PadLeft(2,'0'));
                end
                else
                begin
                  write('(2) ',inter[29].face[18]);
                end;
                Console.SetCursorPosition(1,6);write('(0) ',inter[0].face[5]);
                
                KTX.read_1;
                while (_sleep.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
                begin
                  Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
                  readln(_sleep.input);
                end;
                KTX.read_0;
                
                if _sleep.input.Left(1)='/' then con(_sleep.input);
                
                if _sleep.input='0' then _sleep.output:=0;
                
                if _Sleep.output=0 then _Sleep.status:=false;
                
                if _Sleep.input='1' then
                begin
                  ResetRandomStreetPlace();
                  GoSleep(SleepType.Street,Stats);
                  _Sleep.status:=false;
                end;
                
                if _Sleep.input='2' then
                begin
                  SetAlarm;
                end;
              end;
              
            end;
            {$endregion}
            
          end;
        end;
        {$endregion}
        
        if svg.autosave then save;
      end;
      save;
    end;
    {$endregion}
    
    {$region SETTINGS}
    if menu.output=4 then
    begin
      settings.status:=true;
      while settings.status do
      begin
        Console.Clear;KTX.resize;
        outnull(settings.output, settings.input);
        
        Console.SetCursorPosition(round(KTX.maxx/2),1);
        write('(v) ',inter[5].face[0],':');
        Console.SetCursorPosition(round(KTX.maxx/2),2);
        write(inter[5].face[1],': ',biker_name,' (',version.Major,'.',version.Minor,'.',version.Build,')');
        Console.SetCursorPosition(round(KTX.maxx/2),3);
        write(inter[5].face[2],': ',KTX.modname,' ',KTX.version);
        Console.SetCursorPosition(round(KTX.maxx/2),4);
        write(inter[5].face[3],': ',mapname,' ',mapversion,' ',inter[5].face[4],' ',mapupdate);
        
        Console.SetCursorPosition(1,1);write('(1) ',inter[1].face[1],': ');
        {$region AUTOSAVE}
        if svg.available then
        begin
          if svg.autosave then
          begin
            Console.ForegroundColor:=consolecolor.DarkGreen;
            write(inter[1].face[2]);
            Console.ForegroundColor:=consolecolor.Black;
          end
          else
          begin
            Console.ForegroundColor:=consolecolor.Red;
            write(inter[1].face[3]);
            Console.ForegroundColor:=consolecolor.Black;
          end;
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write(inter[1].face[0]);
          Console.ForegroundColor:=consolecolor.Black;
        end;{$endregion}
        Console.SetCursorPosition(1,2);write('(2) ',inter[1].face[4],': ');
        {$region ANIMATION B1}
        if svg.available then
        begin
          if A_B1 then
          begin
            Console.ForegroundColor:=consolecolor.DarkGreen;
            write(inter[1].face[5]);
            Console.ForegroundColor:=consolecolor.Black;
          end
          else
          begin
            Console.ForegroundColor:=consolecolor.Red;
            write(inter[1].face[6]);
            Console.ForegroundColor:=consolecolor.Black;
          end;
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write(inter[1].face[0]);
          Console.ForegroundColor:=consolecolor.Black;
        end;{$endregion}
        Console.SetCursorPosition(1,3);write('(3) ',inter[1].face[7],': ');
        {$region TIME TYPE}
        if svg.available then
        begin
          var stm: string;
          Console.SetCursorPosition(7+inter[1].face[7].Length,3);
          if svg.time_type=0 then
          begin
            stm:=player.time.Day+' '+month[player.time.Month-1]+' '+player.time.Year+' '+player.time.Hour+':';
            if player.time.Minute<10 then stm:=stm+'0'+player.time.Minute
            else stm:=stm+player.time.Minute;
          end;
          if svg.time_type=1 then
          begin
            stm:=player.time.Day+' '+month[player.time.Month-1].Left(3)+' '+player.time.Year+' '+player.time.Hour+':';
            if player.time.Minute<10 then stm:=stm+'0'+player.time.Minute
            else stm:=stm+player.time.Minute;
          end;
          if svg.time_type=2 then
          begin
            if player.time.Day<10 then stm:=stm+'0'+player.time.Day+'.'
            else stm:=stm+player.time.Day+'.';
            if player.time.month<10 then stm:=stm+'0'+player.time.Month+'.'
            else stm:=stm+player.time.Month+'.';
            stm:=stm+player.time.Year+' '+player.time.Hour+':';
            if player.time.Minute<10 then stm:=stm+'0'+player.time.Minute
            else stm:=stm+player.time.Minute;
          end;
          write(stm);
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          Console.SetCursorPosition(7+inter[1].face[7].Length,3);
          write(inter[1].face[0]);
          Console.ForegroundColor:=consolecolor.Black;
        end;
        {$endregion}
        Console.SetCursorPosition(1,4);write('(4) ',inter[1].face[8],': ');
        {$region MUSIC}
        if soundavailable then
        begin
          if svg.sound then
          begin
            Console.ForegroundColor:=consolecolor.DarkGreen;
            write(inter[1].face[9]);
            Console.ForegroundColor:=consolecolor.Black;
          end
          else
          begin
            Console.ForegroundColor:=consolecolor.Red;
            write(inter[1].face[10]);
            Console.ForegroundColor:=consolecolor.Black;
          end;
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write(inter[1].face[11]);
          Console.ForegroundColor:=consolecolor.Black;
        end;{$endregion}
        Console.SetCursorPosition(1,5);write('(5) ',inter[1].face[12],': ');
        {$region RESOLUTION}
        if svg.available then
        begin
          write(KTX.maxx,'x',KTX.maxy);
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write(inter[1].face[0]);
          Console.ForegroundColor:=consolecolor.Black;
        end;
        {$endregion}
        Console.SetCursorPosition(1,6);write('(6) ',inter[1].face[13],': ');
        {$region ANIMSPEED}
        if svg.available then
        begin
          write(svg.animspeed,'x');
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write(inter[1].face[0]);
          Console.ForegroundColor:=consolecolor.Black;
        end;
        {$endregion}
        Console.SetCursorPosition(1,7);write('(7) ',inter[1].face[14],': ');
        {$region WRITESPEED}
        if svg.available then
        begin
          write(svg.wrspeed,' ',inter[0].face[14]);
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write(inter[1].face[0]);
          Console.ForegroundColor:=consolecolor.Black;
        end;
        {$endregion}
        Console.SetCursorPosition(1,8);write('(8) ',inter[1].face[15],': ');
        {$region LVLVSB}
        if svg.available then
        begin
          if svg.levelvisible then
          begin
            Console.ForegroundColor:=consolecolor.DarkGreen;
            write(inter[1].face[16]);
            Console.ForegroundColor:=consolecolor.Black;
          end
          else
          begin
            Console.ForegroundColor:=consolecolor.Red;
            write(inter[1].face[17]);
            Console.ForegroundColor:=consolecolor.Black;
          end;
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write(inter[1].face[0]);
          Console.ForegroundColor:=consolecolor.Black;
        end;
        {$endregion}
        Console.SetCursorPosition(1,9);write('(9) ',inter[1].face[18],': ');
        {$region Shop Olds}
        if svg.available then
        begin
          if shop.olds then
          begin
            Console.ForegroundColor:=consolecolor.DarkGreen;
            write(inter[1].face[19]);
            Console.ForegroundColor:=consolecolor.Black;
          end
          else
          begin
            Console.ForegroundColor:=consolecolor.Red;
            write(inter[1].face[20]);
            Console.ForegroundColor:=consolecolor.Black;
          end;
        end
        else
        begin
          Console.ForegroundColor:=consolecolor.Gray;
          write(inter[1].face[0]);
          Console.ForegroundColor:=consolecolor.Black;
        end;
        {$endregion}
        Console.SetCursorPosition(1,10);write('(0) ',inter[0].face[5]);
        
        //Console.SetCursorPosition(70,1);write(inter[1].face[7],': ');
        //Console.SetCursorPosition(71,2);write(biker.name,' ',biker.sssss,biker.version);
        //Console.SetCursorPosition(71,3);write(KTX.modname,' ',KTX.version);
        //Console.SetCursorPosition(71,4);write(mapname,' ',mapversion,' ',mapupdate);
        
        KTX.read_1;
        while (settings.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
        begin
          Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
          readln(settings.input);
        end;
        KTX.read_0;
        
        if settings.input.Left(1)='/' then con(settings.input);
        if settings.input='0' then settings.output:=0;
        //if (settings.input='-1') and (svg.available) then settings.output:=-1;
        if (settings.input='1') and (svg.available) then settings.output:=1;
        if (settings.input='2') and (svg.available) then settings.output:=2;
        if (settings.input='3') and (svg.available) then settings.output:=3;
        if (settings.input='4') and (soundavailable) then settings.output:=4;
        if (settings.input='5') and (svg.available) then settings.output:=5;
        if (settings.input='6') and (svg.available) then settings.output:=6;
        if (settings.input='7') and (svg.available) then settings.output:=7;
        if (settings.input='8') and (svg.available) then settings.output:=8;
        if (settings.input='9') and (svg.available) then settings.output:=9;
        if (settings.input.ToLower='v') then Versions;
        //if settings.output=-1 then
        //begin
        //  SUPERCONSOLE:=true;
        //  LOG.Add('SUPERCONSOLE ACTIVATED');
        //end;
        
        if settings.output=0 then
        begin
          settings.status:=false;
        end;
        if settings.output=1 then
        begin
          change(svg.autosave);save;
        end;
        if settings.output=2 then
        begin
          change(A_B1);save;
        end;
        if settings.output=3 then
        begin
          inc(svg.time_type);
          if svg.time_type>2 then svg.time_type:=0;
          save;
        end;
        if settings.output=4 then
        begin
          change(svg.sound);
          if not svg.sound then SOUND.Stop;
          if svg.sound then SOUND.PlayLooping;
          save;
        end;
        {$region resolut}
        if settings.output=5 then
        begin
          settings.resolution.status:=true;
          while settings.resolution.status do
          begin
            KTX.resize;outnull(settings.resolution.output,settings.resolution.input);
            Console.SetCursorPosition(1,1);write('(!) ',inter[6].face[0]);
            Console.SetCursorPosition(5,2);write(inter[6].face[1]);
            Console.SetCursorPosition(1,4);write('    ',inter[6].face[2],': ',KTX.maxx,'x',KTX.maxy);
            Console.SetCursorPosition(1,5);write('(1) ',inter[6].face[3]);
            Console.SetCursorPosition(1,6);write('(2) ',inter[6].face[4]);
            Console.SetCursorPosition(1,7);write('(0) ',inter[0].face[5]);
            KTX.read_1;
            while (settings.resolution.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              Console.SetCursorPosition(1,KTX.maxy-2);write(': ');
              readln(settings.resolution.input);
            end;
            KTX.read_0;
            
            if settings.resolution.input.Left(1)='/' then con( settings.resolution.input);
            if settings.resolution.input='0' then settings.resolution.output:=0;
            if settings.resolution.input='1' then settings.resolution.output:=1;
            if settings.resolution.input='2' then settings.resolution.output:=2;
            if settings.resolution.input.havechar('x') then
            begin
              if settings.resolution.input.ToWords('x').Count>1 then
              begin
                settings.resolution.output:=3;
              end;
            end;
            
            if settings.resolution.output=0 then settings.resolution.status:=false;
            if settings.resolution.output=1 then
            begin
              KTX.maxx:=Balance.int_minx;
              KTX.maxy:=Balance.int_miny;
              save;
            end;
            if settings.resolution.output=2 then
            begin
              KTX.maxx:=Balance.int_maxx;
              KTX.maxy:=Balance.int_maxy;
              save;
            end;
            if settings.resolution.output=3 then
            begin
              var e1,e2,bx,by: integer;
              val(settings.resolution.input.ToWords('x')[0],bx,e1);
              val(settings.resolution.input.ToWords('x')[1],by,e2);
              if (e1=0) and (e2=0) and (bx>=balance.int_minx) and (bx<=balance.int_maxx) and (by>=balance.int_miny) and (by<=balance.int_maxy) then
              begin
                KTX.maxx:=bx;
                KTX.maxy:=by;
                save;
              end;
            end;
          end;
        end;{$endregion}
        if settings.output=6 then
        begin
          svg.animspeed+=1;
          if svg.animspeed>balance.animmaxspeed then svg.animspeed:=balance.animminspeed;
          save;
        end;
        if settings.output=7 then
        begin
          svg.wrspeed+=3;
          if svg.wrspeed>balance.maxwritespd then svg.wrspeed:=balance.minwritespd;
          save;
        end;
        if settings.output=8 then
        begin
          change(svg.levelvisible);save;
        end;
        if settings.output=9 then
        begin
          change(shop.olds);save;
        end;
      end;
    end;{$endregion}
    
    {$region HELP}
    if menu.output=3 then
    begin
      help.status:=true;
      while help.status do
      begin
        Console.Clear;KTX.resize;
        var helpsize: integer = helps[0].value.Length;
        if helpsize>=(KTX.maxy-5)*2 then Console.SetBufferSize(KTX.maxx,Round(helpsize/2)+5);
        outnull(help.output, help.input);
        var hlpszk:=Round(helpsize/2);
        for var i:=0 to hlpszk-1 do
        begin
          Console.SetCursorPosition(1,i+1);
          write('(',i+1,') ',helps[0].value[i]);
        end;
        for var i:=hlpszk to helpsize-1 do
        begin
          Console.SetCursorPosition(Round(KTX.maxx/2),i+1-hlpszk);
          write('(',i+1,') ',helps[0].value[i]);
        end;
        Console.SetCursorPosition(1,Round(helpsize/2)+1);
        write('(0) ',inter[0].face[5]);
        
        KTX.read_1;
        while (help.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx)) do
        begin
          if helpsize>=(KTX.maxy-5)*2 then
          begin
            Console.SetCursorPosition(1,Round(helpsize/2)+4);
            Console.SetCursorPosition(1,Round(helpsize/2)+3);
          end
          else Console.SetCursorPosition(1,KTX.maxy-2);
          write(': ');
          readln(help.input);
        end;
        KTX.read_0;
        
        if help.input.Left(1)='/' then con(help.input);
        if help.input='0' then help.output:=0;
        if not (help.input='0') then
        begin
          var a,e: integer;
          val(help.input,a,e);
          if (e=0) and (a>0) and (a<=helps[0].value.Length) then help.output:=a;
        end;
        
        if help.output=0 then
        begin
          help.status:=false;
        end;
        
        if help.output>0 then
        begin
          help.output+=1;
          help.help.status:=true;
          while help.help.status do
          begin
            KTX.resize;
            outnull(help.help.output,help.help.input);
            
            var orray := ReplaceDirectives(Copy(helps[help.output-1].value));
            
            if orray[0].ToLower.Left(11) = '#noseparate' then
            begin
              for var i:=0 to orray.Length-2 do
              begin
                orray[i] := orray[i+1];
              end;
              SetLength(orray,orray.Length-1);
            end
            else orray := SizeSeparate(orray);
            
            
            var hlpsz: integer = orray.Length;
            if hlpsz>=(KTX.maxy-6) then Console.SetBufferSize(KTX.maxx,hlpsz+6);
            for var i:=0 to orray.Length-1 do
            begin
              Console.SetCursorPosition(0,i+1);write(orray[i]);
            end;
            if hlpsz>=(KTX.maxy-6) then
            begin
              Console.SetCursorPosition(1,hlpsz+2);write('(0) ',inter[0].face[5]);
            end
            else
            begin
              Console.SetCursorPosition(1,KTX.maxy-4);write('(0) ',inter[0].face[5]);
            end;
            
            
            KTX.read_1;
            while (help.help.input='') and ((Console.WindowHeight=KTX.maxy) and (Console.WindowWidth=KTX.maxx))  do
            begin
              if hlpsz>=(KTX.maxy-6) then
              begin
                Console.SetCursorPosition(1,hlpsz+5);
                Console.SetCursorPosition(1,hlpsz+4);
              end
              else Console.SetCursorPosition(1,KTX.maxy-2);
              write(': ');
              readln(help.help.input);
            end;
            KTX.read_0;
            
            if help.help.input='0' then help.help.output:=0;
            
            if help.help.output=0 then
            begin
              help.help.status:=false;
            end;
          end;

        end;
        
      end;
    end;{$endregion}
  end;
  SOUND.Stop;
  LOG.Add('');LOG.Add('FINISH GAME');
end.